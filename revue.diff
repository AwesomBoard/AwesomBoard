diff --git a/.github/workflows/ci-cd.yml b/.github/workflows/ci-cd.yml
index 2f6191730..4aa8c4a86 100644
--- a/.github/workflows/ci-cd.yml
+++ b/.github/workflows/ci-cd.yml
@@ -29,6 +29,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup dummy Firebase secret)
         run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
       - name: Build
@@ -57,11 +59,13 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup dummy Firebase secret)
         run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

-      - name: Run test suite
-        run: npm run test:ci
+      - name: Run test suites
+        run: npx nyc --version && npm run libtest:ci && npm run test:ci
       - name: Setup python
         uses: actions/setup-python@v4
         with:
@@ -100,6 +104,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup dummy Firebase secret)
         run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
       - name: Setup python
@@ -134,6 +140,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup dummy Firebase secret)
         run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

@@ -172,6 +180,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup dummy Firebase secret)
         run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

@@ -208,6 +218,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup Firebase secret, master)
         if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
         run: |
@@ -268,6 +280,8 @@ jobs:
           node-version: 18
       - name: Setup dependencies (install dependencies)
         run: npm ci
+      - name: Build lib
+        run: cd lib && npm run build
       - name: Setup dependencies (setup Firebase secret, others)
         if: ${{ github.ref != 'refs/heads/master'  && github.ref != 'refs/heads/develop' }}
         run: |
diff --git a/.gitignore b/.gitignore
index 092873f01..bf0494d8c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -26,22 +26,26 @@

 # misc
 /.angular/cache
-/.sass-cache
-/connect.lock
-/coverage
-! /coverage/branches.csv
-! /coverage/functions.csv
-! /coverage/statements.csv
-! /coverage/lines.csv
-/typings
-*.log
-
-# System Files
-.DS_Store
-Thumbs.db
-
-# firebase config file
-/src/app/firebaseConfig.ts
-
-# Local Netlify folder
-.netlify
+/.sass-cache
+/connect.lock
+/coverage
+! /coverage/branches.csv
+! /coverage/functions.csv
+! /coverage/statements.csv
+! /coverage/lines.csv
+/typings
+*.log
+
+# System Files
+.DS_Store
+Thumbs.db
+
+# firebase config file
+/src/app/firebaseConfig.ts
+
+# Local Netlify folder
+.netlify
+/lib/tsconfig.tsbuildinfo
+/lib/build/
+/lib/node_modules/
+/lib/dist/
diff --git a/lib/jasmine.json b/lib/jasmine.json
new file mode 100644
index 000000000..55d0cf087
--- /dev/null
+++ b/lib/jasmine.json
@@ -0,0 +1,7 @@
+{
+  "spec_dir": "src",
+  "spec_files": ["**/*.spec.ts"],
+  "helpers": ["../node_modules/ts-node/register/type-check.js"],
+  "stopSpecOnExpectationFailure": false,
+  "random": true
+}
diff --git a/lib/package-lock.json b/lib/package-lock.json
new file mode 100644
index 000000000..622762986
--- /dev/null
+++ b/lib/package-lock.json
@@ -0,0 +1,2309 @@
+{
+  "name": "@everyboard/lib",
+  "version": "1.0.0",
+  "lockfileVersion": 3,
+  "requires": true,
+  "packages": {
+    "": {
+      "name": "@everyboard/lib",
+      "version": "1.0.0",
+      "devDependencies": {
+        "jasmine": "^5.1.0",
+        "nyc": "^15.1.0",
+        "ts-node": "^10.9.2"
+      }
+    },
+    "node_modules/@ampproject/remapping": {
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.1.tgz",
+      "integrity": "sha512-lFMjJTrFL3j7L9yBxwYfCq2k6qqwHyzuUl/XBnif78PWTJYyL/dfowQHWE3sp6U6ZzqWiiIZnpTMO96zhkjwtg==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/gen-mapping": "^0.3.0",
+        "@jridgewell/trace-mapping": "^0.3.9"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/code-frame": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.23.4.tgz",
+      "integrity": "sha512-r1IONyb6Ia+jYR2vvIDhdWdlTGhqbBoFqLTQidzZ4kepUFH15ejXvFHxCVbtl7BOXIudsIubf4E81xeA3h3IXA==",
+      "dev": true,
+      "dependencies": {
+        "@babel/highlight": "^7.23.4",
+        "chalk": "^2.4.2"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/compat-data": {
+      "version": "7.23.3",
+      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.23.3.tgz",
+      "integrity": "sha512-BmR4bWbDIoFJmJ9z2cZ8Gmm2MXgEDgjdWgpKmKWUt54UGFJdlj31ECtbaDvCG/qVdG3AQ1SfpZEs01lUFbzLOQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/core": {
+      "version": "7.23.3",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.23.3.tgz",
+      "integrity": "sha512-Jg+msLuNuCJDyBvFv5+OKOUjWMZgd85bKjbICd3zWrKAo+bJ49HJufi7CQE0q0uR8NGyO6xkCACScNqyjHSZew==",
+      "dev": true,
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.22.13",
+        "@babel/generator": "^7.23.3",
+        "@babel/helper-compilation-targets": "^7.22.15",
+        "@babel/helper-module-transforms": "^7.23.3",
+        "@babel/helpers": "^7.23.2",
+        "@babel/parser": "^7.23.3",
+        "@babel/template": "^7.22.15",
+        "@babel/traverse": "^7.23.3",
+        "@babel/types": "^7.23.3",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@babel/core/node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "dev": true
+    },
+    "node_modules/@babel/generator": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.23.4.tgz",
+      "integrity": "sha512-esuS49Cga3HcThFNebGhlgsrVLkvhqvYDTzgjfFFlHJcIfLe5jFmRRfCQ1KuBfc4Jrtn3ndLgKWAKjBE+IraYQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/types": "^7.23.4",
+        "@jridgewell/gen-mapping": "^0.3.2",
+        "@jridgewell/trace-mapping": "^0.3.17",
+        "jsesc": "^2.5.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/generator/node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.20",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.20.tgz",
+      "integrity": "sha512-R8LcPeWZol2zR8mmH3JeKQ6QRCFb7XgUhV9ZlGhHLGyg4wpPiPZNQOOWhFZhxKw8u//yTbNGI42Bx/3paXEQ+Q==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.1.0",
+        "@jridgewell/sourcemap-codec": "^1.4.14"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets": {
+      "version": "7.22.15",
+      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.22.15.tgz",
+      "integrity": "sha512-y6EEzULok0Qvz8yyLkCvVX+02ic+By2UdOhylwUOvOn9dvYc9mKICJuuU1n1XBI02YWsNsnrY1kc6DVbjcXbtw==",
+      "dev": true,
+      "dependencies": {
+        "@babel/compat-data": "^7.22.9",
+        "@babel/helper-validator-option": "^7.22.15",
+        "browserslist": "^4.21.9",
+        "lru-cache": "^5.1.1",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
+      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
+      "dev": true,
+      "dependencies": {
+        "yallist": "^3.0.2"
+      }
+    },
+    "node_modules/@babel/helper-environment-visitor": {
+      "version": "7.22.20",
+      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.22.20.tgz",
+      "integrity": "sha512-zfedSIzFhat/gFhWfHtgWvlec0nqB9YEIVrpuwjruLlXfUSnA8cJB0miHKwqDnQ7d32aKo2xt88/xZptwxbfhA==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-function-name": {
+      "version": "7.23.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.23.0.tgz",
+      "integrity": "sha512-OErEqsrxjZTJciZ4Oo+eoZqeW9UIiOcuYKRJA4ZAgV9myA+pOXhhmpfNCKjEH/auVfEYVFJ6y1Tc4r0eIApqiw==",
+      "dev": true,
+      "dependencies": {
+        "@babel/template": "^7.22.15",
+        "@babel/types": "^7.23.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-hoist-variables": {
+      "version": "7.22.5",
+      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.22.5.tgz",
+      "integrity": "sha512-wGjk9QZVzvknA6yKIUURb8zY3grXCcOZt+/7Wcy8O2uctxhplmUPkOdlgoNhmdVee2c92JXbf1xpMtVNbfoxRw==",
+      "dev": true,
+      "dependencies": {
+        "@babel/types": "^7.22.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-imports": {
+      "version": "7.22.15",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.22.15.tgz",
+      "integrity": "sha512-0pYVBnDKZO2fnSPCrgM/6WMc7eS20Fbok+0r88fp+YtWVLZrp4CkafFGIp+W0VKw4a22sgebPT99y+FDNMdP4w==",
+      "dev": true,
+      "dependencies": {
+        "@babel/types": "^7.22.15"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-module-transforms": {
+      "version": "7.23.3",
+      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.23.3.tgz",
+      "integrity": "sha512-7bBs4ED9OmswdfDzpz4MpWgSrV7FXlc3zIagvLFjS5H+Mk7Snr21vQ6QwrsoCGMfNC4e4LQPdoULEt4ykz0SRQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/helper-environment-visitor": "^7.22.20",
+        "@babel/helper-module-imports": "^7.22.15",
+        "@babel/helper-simple-access": "^7.22.5",
+        "@babel/helper-split-export-declaration": "^7.22.6",
+        "@babel/helper-validator-identifier": "^7.22.20"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "peerDependencies": {
+        "@babel/core": "^7.0.0"
+      }
+    },
+    "node_modules/@babel/helper-simple-access": {
+      "version": "7.22.5",
+      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.22.5.tgz",
+      "integrity": "sha512-n0H99E/K+Bika3++WNL17POvo4rKWZ7lZEp1Q+fStVbUi8nxPQEBOlTmCOxW/0JsS56SKKQ+ojAe2pHKJHN35w==",
+      "dev": true,
+      "dependencies": {
+        "@babel/types": "^7.22.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-split-export-declaration": {
+      "version": "7.22.6",
+      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.22.6.tgz",
+      "integrity": "sha512-AsUnxuLhRYsisFiaJwvp1QF+I3KjD5FOxut14q/GzovUe6orHLesW2C7d754kRm53h5gqrz6sFl6sxc4BVtE/g==",
+      "dev": true,
+      "dependencies": {
+        "@babel/types": "^7.22.5"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-string-parser": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.23.4.tgz",
+      "integrity": "sha512-803gmbQdqwdf4olxrX4AJyFBV/RTr3rSmOj0rKwesmzlfhYNDEs+/iOcznzpNWlJlIlTJC2QfPFcHB6DlzdVLQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-identifier": {
+      "version": "7.22.20",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.22.20.tgz",
+      "integrity": "sha512-Y4OZ+ytlatR8AI+8KZfKuL5urKp7qey08ha31L8b3BwewJAoJamTzyvxPR/5D+KkdJCGPq/+8TukHBlY10FX9A==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helper-validator-option": {
+      "version": "7.22.15",
+      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.22.15.tgz",
+      "integrity": "sha512-bMn7RmyFjY/mdECUbgn9eoSY4vqvacUnS9i9vGAGttgFWesO6B4CYWA7XlpbWgBt71iv/hfbPlynohStqnu5hA==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/helpers": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.23.4.tgz",
+      "integrity": "sha512-HfcMizYz10cr3h29VqyfGL6ZWIjTwWfvYBMsBVGwpcbhNGe3wQ1ZXZRPzZoAHhd9OqHadHqjQ89iVKINXnbzuw==",
+      "dev": true,
+      "dependencies": {
+        "@babel/template": "^7.22.15",
+        "@babel/traverse": "^7.23.4",
+        "@babel/types": "^7.23.4"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/highlight": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.23.4.tgz",
+      "integrity": "sha512-acGdbYSfp2WheJoJm/EBBBLh/ID8KDc64ISZ9DYtBmC8/Q204PZJLHyzeB5qMzJ5trcOkybd78M4x2KWsUq++A==",
+      "dev": true,
+      "dependencies": {
+        "@babel/helper-validator-identifier": "^7.22.20",
+        "chalk": "^2.4.2",
+        "js-tokens": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/parser": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.23.4.tgz",
+      "integrity": "sha512-vf3Xna6UEprW+7t6EtOmFpHNAuxw3xqPZghy+brsnusscJRW5BMUzzHZc5ICjULee81WeUV2jjakG09MDglJXQ==",
+      "dev": true,
+      "bin": {
+        "parser": "bin/babel-parser.js"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@babel/template": {
+      "version": "7.22.15",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.15.tgz",
+      "integrity": "sha512-QPErUVm4uyJa60rkI73qneDacvdvzxshT3kksGqlGWYdOTIUOwJ7RDUL8sGqslY1uXWSL6xMFKEXDS3ox2uF0w==",
+      "dev": true,
+      "dependencies": {
+        "@babel/code-frame": "^7.22.13",
+        "@babel/parser": "^7.22.15",
+        "@babel/types": "^7.22.15"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/traverse": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.23.4.tgz",
+      "integrity": "sha512-IYM8wSUwunWTB6tFC2dkKZhxbIjHoWemdK+3f8/wq8aKhbUscxD5MX72ubd90fxvFknaLPeGw5ycU84V1obHJg==",
+      "dev": true,
+      "dependencies": {
+        "@babel/code-frame": "^7.23.4",
+        "@babel/generator": "^7.23.4",
+        "@babel/helper-environment-visitor": "^7.22.20",
+        "@babel/helper-function-name": "^7.23.0",
+        "@babel/helper-hoist-variables": "^7.22.5",
+        "@babel/helper-split-export-declaration": "^7.22.6",
+        "@babel/parser": "^7.23.4",
+        "@babel/types": "^7.23.4",
+        "debug": "^4.1.0",
+        "globals": "^11.1.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@babel/types": {
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.23.4.tgz",
+      "integrity": "sha512-7uIFwVYpoplT5jp/kVv6EF93VaJ8H+Yn5IczYiaAi98ajzjfoZfslet/e0sLh+wVBjb2qqIut1b0S26VSafsSQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/helper-string-parser": "^7.23.4",
+        "@babel/helper-validator-identifier": "^7.22.20",
+        "to-fast-properties": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
+      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/trace-mapping": "0.3.9"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@isaacs/cliui": {
+      "version": "8.0.2",
+      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
+      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
+      "dev": true,
+      "dependencies": {
+        "string-width": "^5.1.2",
+        "string-width-cjs": "npm:string-width@^4.2.0",
+        "strip-ansi": "^7.0.1",
+        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
+        "wrap-ansi": "^8.1.0",
+        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
+      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
+      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
+      "version": "9.2.2",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
+      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
+      "dev": true
+    },
+    "node_modules/@isaacs/cliui/node_modules/string-width": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
+      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
+      "dev": true,
+      "dependencies": {
+        "eastasianwidth": "^0.2.0",
+        "emoji-regex": "^9.2.2",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
+      "version": "7.1.0",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
+      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
+      }
+    },
+    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
+      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^6.1.0",
+        "string-width": "^5.0.1",
+        "strip-ansi": "^7.0.1"
+      },
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/@istanbuljs/load-nyc-config": {
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
+      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
+      "dev": true,
+      "dependencies": {
+        "camelcase": "^5.3.1",
+        "find-up": "^4.1.0",
+        "get-package-type": "^0.1.0",
+        "js-yaml": "^3.13.1",
+        "resolve-from": "^5.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@istanbuljs/schema": {
+      "version": "0.1.3",
+      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
+      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/@jridgewell/gen-mapping": {
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
+      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/set-array": "^1.0.1",
+        "@jridgewell/sourcemap-codec": "^1.4.10",
+        "@jridgewell/trace-mapping": "^0.3.9"
+      },
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/resolve-uri": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz",
+      "integrity": "sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/set-array": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
+      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.0.0"
+      }
+    },
+    "node_modules/@jridgewell/sourcemap-codec": {
+      "version": "1.4.15",
+      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
+      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==",
+      "dev": true
+    },
+    "node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
+      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
+      }
+    },
+    "node_modules/@pkgjs/parseargs": {
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
+      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
+      "dev": true,
+      "optional": true,
+      "engines": {
+        "node": ">=14"
+      }
+    },
+    "node_modules/@tsconfig/node10": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
+      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node12": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
+      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node14": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
+      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node16": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
+      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
+      "dev": true
+    },
+    "node_modules/@types/node": {
+      "version": "20.9.4",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.9.4.tgz",
+      "integrity": "sha512-wmyg8HUhcn6ACjsn8oKYjkN/zUzQeNtMy44weTJSM6p4MMzEOuKbA3OjJ267uPCOW7Xex9dyrNTful8XTQYoDA==",
+      "dev": true,
+      "peer": true,
+      "dependencies": {
+        "undici-types": "~5.26.4"
+      }
+    },
+    "node_modules/acorn": {
+      "version": "8.11.2",
+      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.11.2.tgz",
+      "integrity": "sha512-nc0Axzp/0FILLEVsm4fNwLCwMttvhEI263QtVPQcbpfZZ3ts0hLsZGOpE6czNlid7CJ9MlyH8reXkpsf3YUY4w==",
+      "dev": true,
+      "bin": {
+        "acorn": "bin/acorn"
+      },
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/acorn-walk": {
+      "version": "8.3.0",
+      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.0.tgz",
+      "integrity": "sha512-FS7hV565M5l1R08MXqo8odwMTB02C2UqzB17RVgu9EyuYFBqJZ3/ZY97sQD5FewVu1UyDFc1yztUDrAwT0EypA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
+    "node_modules/aggregate-error": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
+      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
+      "dev": true,
+      "dependencies": {
+        "clean-stack": "^2.0.0",
+        "indent-string": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/append-transform": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/append-transform/-/append-transform-2.0.0.tgz",
+      "integrity": "sha512-7yeyCEurROLQJFv5Xj4lEGTy0borxepjFv1g22oAdqFu//SrAlDl1O1Nxx15SH1RoliUml6p8dwJW9jvZughhg==",
+      "dev": true,
+      "dependencies": {
+        "default-require-extensions": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/archy": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/archy/-/archy-1.0.0.tgz",
+      "integrity": "sha512-Xg+9RwCg/0p32teKdGMPTPnVXKD0w3DfHnFTficozsAgsvq2XenPJq/MYpzzQ/v8zrOyJn6Ds39VA4JIDwFfqw==",
+      "dev": true
+    },
+    "node_modules/arg": {
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
+      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
+      "dev": true
+    },
+    "node_modules/argparse": {
+      "version": "1.0.10",
+      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
+      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
+      "dev": true,
+      "dependencies": {
+        "sprintf-js": "~1.0.2"
+      }
+    },
+    "node_modules/balanced-match": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
+      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
+      "dev": true
+    },
+    "node_modules/brace-expansion": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
+      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
+      "dev": true,
+      "dependencies": {
+        "balanced-match": "^1.0.0"
+      }
+    },
+    "node_modules/browserslist": {
+      "version": "4.22.1",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.22.1.tgz",
+      "integrity": "sha512-FEVc202+2iuClEhZhrWy6ZiAcRLvNMyYcxZ8raemul1DYVOVdFsbqckWLdsixQZCpJlwe77Z3UTalE7jsjnKfQ==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "dependencies": {
+        "caniuse-lite": "^1.0.30001541",
+        "electron-to-chromium": "^1.4.535",
+        "node-releases": "^2.0.13",
+        "update-browserslist-db": "^1.0.13"
+      },
+      "bin": {
+        "browserslist": "cli.js"
+      },
+      "engines": {
+        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
+      }
+    },
+    "node_modules/caching-transform": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/caching-transform/-/caching-transform-4.0.0.tgz",
+      "integrity": "sha512-kpqOvwXnjjN44D89K5ccQC+RUrsy7jB/XLlRrx0D7/2HNcTPqzsb6XgYoErwko6QsV184CA2YgS1fxDiiDZMWA==",
+      "dev": true,
+      "dependencies": {
+        "hasha": "^5.0.0",
+        "make-dir": "^3.0.0",
+        "package-hash": "^4.0.0",
+        "write-file-atomic": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/camelcase": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
+      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/caniuse-lite": {
+      "version": "1.0.30001564",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001564.tgz",
+      "integrity": "sha512-DqAOf+rhof+6GVx1y+xzbFPeOumfQnhYzVnZD6LAXijR77yPtm9mfOcqOnT3mpnJiZVT+kwLAFnRlZcIz+c6bg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ]
+    },
+    "node_modules/chalk": {
+      "version": "2.4.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
+      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^3.2.1",
+        "escape-string-regexp": "^1.0.5",
+        "supports-color": "^5.3.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/chalk/node_modules/ansi-styles": {
+      "version": "3.2.1",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
+      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^1.9.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/chalk/node_modules/color-convert": {
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
+      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "1.1.3"
+      }
+    },
+    "node_modules/chalk/node_modules/color-name": {
+      "version": "1.1.3",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
+      "integrity": "sha512-72fSenhMw2HZMTVHeCA9KCmpEIbzWiQsjN+BHcBbS9vr1mtt+vJjPdksIBNUmKAW8TFUDPJK5SUU3QhE9NEXDw==",
+      "dev": true
+    },
+    "node_modules/clean-stack": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
+      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/cliui": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
+      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
+      "dev": true,
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^6.2.0"
+      }
+    },
+    "node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/commondir": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
+      "integrity": "sha512-W9pAhw0ja1Edb5GVdIF1mjZw/ASI0AlShXM83UUGe2DVr5TdAPEA1OA8m/g8zWp9x6On7gqufY+FatDbC3MDQg==",
+      "dev": true
+    },
+    "node_modules/concat-map": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
+      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
+      "dev": true
+    },
+    "node_modules/convert-source-map": {
+      "version": "1.9.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.9.0.tgz",
+      "integrity": "sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==",
+      "dev": true
+    },
+    "node_modules/create-require": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
+      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
+      "dev": true
+    },
+    "node_modules/cross-spawn": {
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.3.tgz",
+      "integrity": "sha512-iRDPJKUPVEND7dHPO8rkbOnPpyDygcDFtWjpeWNCgy8WP2rXcxXL8TskReQl6OrB2G7+UJrags1q15Fudc7G6w==",
+      "dev": true,
+      "dependencies": {
+        "path-key": "^3.1.0",
+        "shebang-command": "^2.0.0",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/debug": {
+      "version": "4.3.4",
+      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
+      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
+      "dev": true,
+      "dependencies": {
+        "ms": "2.1.2"
+      },
+      "engines": {
+        "node": ">=6.0"
+      },
+      "peerDependenciesMeta": {
+        "supports-color": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/decamelize": {
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
+      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/default-require-extensions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/default-require-extensions/-/default-require-extensions-3.0.1.tgz",
+      "integrity": "sha512-eXTJmRbm2TIt9MgWTsOH1wEuhew6XGZcMeGKCtLedIg/NCsg1iBePXkceTdK4Fii7pzmN9tGsZhKzZ4h7O/fxw==",
+      "dev": true,
+      "dependencies": {
+        "strip-bom": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/eastasianwidth": {
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
+      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
+      "dev": true
+    },
+    "node_modules/electron-to-chromium": {
+      "version": "1.4.594",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.594.tgz",
+      "integrity": "sha512-xT1HVAu5xFn7bDfkjGQi9dNpMqGchUkebwf1GL7cZN32NSwwlHRPMSDJ1KN6HkS0bWUtndbSQZqvpQftKG2uFQ==",
+      "dev": true
+    },
+    "node_modules/emoji-regex": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
+      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
+      "dev": true
+    },
+    "node_modules/es6-error": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
+      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
+      "dev": true
+    },
+    "node_modules/escalade": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
+      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/escape-string-regexp": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
+      "integrity": "sha512-vbRorB5FUQWvla16U8R/qgaFIya2qGzwDrNmCZuYKrbdSUMG6I1ZCGQRefkRVhuOkIGVne7BQ35DSfo1qvJqFg==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.8.0"
+      }
+    },
+    "node_modules/find-cache-dir": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
+      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
+      "dev": true,
+      "dependencies": {
+        "commondir": "^1.0.1",
+        "make-dir": "^3.0.2",
+        "pkg-dir": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
+      }
+    },
+    "node_modules/find-up": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
+      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
+      "dev": true,
+      "dependencies": {
+        "locate-path": "^5.0.0",
+        "path-exists": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/foreground-child": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.1.1.tgz",
+      "integrity": "sha512-TMKDUnIte6bfb5nWv7V/caI169OHgvwjb7V4WkeUvbQQdjr5rWKqHFiKWb/fcOwB+CzBT+qbWjvj+DVwRskpIg==",
+      "dev": true,
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/fromentries": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/fromentries/-/fromentries-1.3.2.tgz",
+      "integrity": "sha512-cHEpEQHUg0f8XdtZCc2ZAhrHzKzT0MrFUTcvx+hfxYu7rGMDc5SKoXFh+n4YigxsHXRzc6OrCshdR1bWH6HHyg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
+    "node_modules/fs.realpath": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
+      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
+      "dev": true
+    },
+    "node_modules/gensync": {
+      "version": "1.0.0-beta.2",
+      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
+      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
+      "dev": true,
+      "engines": {
+        "node": ">=6.9.0"
+      }
+    },
+    "node_modules/get-caller-file": {
+      "version": "2.0.5",
+      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
+      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
+      "dev": true,
+      "engines": {
+        "node": "6.* || 8.* || >= 10.*"
+      }
+    },
+    "node_modules/get-package-type": {
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
+      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/glob": {
+      "version": "7.2.3",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
+      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "dev": true,
+      "dependencies": {
+        "fs.realpath": "^1.0.0",
+        "inflight": "^1.0.4",
+        "inherits": "2",
+        "minimatch": "^3.1.1",
+        "once": "^1.3.0",
+        "path-is-absolute": "^1.0.0"
+      },
+      "engines": {
+        "node": "*"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/globals": {
+      "version": "11.12.0",
+      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
+      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
+      "dev": true,
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/graceful-fs": {
+      "version": "4.2.11",
+      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
+      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
+      "dev": true
+    },
+    "node_modules/has-flag": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
+      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
+      "dev": true,
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/hasha": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/hasha/-/hasha-5.2.2.tgz",
+      "integrity": "sha512-Hrp5vIK/xr5SkeN2onO32H0MgNZ0f17HRNH39WfL0SYUNOTZ5Lz1TJ8Pajo/87dYGEFlLMm7mIc/k/s6Bvz9HQ==",
+      "dev": true,
+      "dependencies": {
+        "is-stream": "^2.0.0",
+        "type-fest": "^0.8.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/html-escaper": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
+      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
+      "dev": true
+    },
+    "node_modules/imurmurhash": {
+      "version": "0.1.4",
+      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
+      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.8.19"
+      }
+    },
+    "node_modules/indent-string": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
+      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/inflight": {
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
+      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
+      "dev": true,
+      "dependencies": {
+        "once": "^1.3.0",
+        "wrappy": "1"
+      }
+    },
+    "node_modules/inherits": {
+      "version": "2.0.4",
+      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
+      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
+      "dev": true
+    },
+    "node_modules/is-fullwidth-code-point": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
+      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/is-stream": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
+      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/is-typedarray": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/is-typedarray/-/is-typedarray-1.0.0.tgz",
+      "integrity": "sha512-cyA56iCMHAh5CdzjJIa4aohJyeO1YbwLi3Jc35MmRU6poroFjIGZzUzupGiRPOjgHg9TLu43xbpwXk523fMxKA==",
+      "dev": true
+    },
+    "node_modules/is-windows": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz",
+      "integrity": "sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/isexe": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
+      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
+      "dev": true
+    },
+    "node_modules/istanbul-lib-coverage": {
+      "version": "3.2.2",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
+      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-hook": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-hook/-/istanbul-lib-hook-3.0.0.tgz",
+      "integrity": "sha512-Pt/uge1Q9s+5VAZ+pCo16TYMWPBIl+oaNIjgLQxcX0itS6ueeaA+pEfThZpH8WxhFgCiEb8sAJY6MdUKgiIWaQ==",
+      "dev": true,
+      "dependencies": {
+        "append-transform": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-instrument": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz",
+      "integrity": "sha512-BXgQl9kf4WTCPCCpmFGoJkz/+uhvm7h7PFKUYxh7qarQd3ER33vHG//qaE8eN25l07YqZPpHXU9I09l/RD5aGQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/core": "^7.7.5",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-coverage": "^3.0.0",
+        "semver": "^6.3.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-processinfo": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-processinfo/-/istanbul-lib-processinfo-2.0.3.tgz",
+      "integrity": "sha512-NkwHbo3E00oybX6NGJi6ar0B29vxyvNwoC7eJ4G4Yq28UfY758Hgn/heV8VRFhevPED4LXfFz0DQ8z/0kw9zMg==",
+      "dev": true,
+      "dependencies": {
+        "archy": "^1.0.0",
+        "cross-spawn": "^7.0.3",
+        "istanbul-lib-coverage": "^3.2.0",
+        "p-map": "^3.0.0",
+        "rimraf": "^3.0.0",
+        "uuid": "^8.3.2"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-report": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
+      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
+      "dev": true,
+      "dependencies": {
+        "istanbul-lib-coverage": "^3.0.0",
+        "make-dir": "^4.0.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/lru-cache": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
+      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
+      "dev": true,
+      "dependencies": {
+        "yallist": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/make-dir": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
+      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
+      "dev": true,
+      "dependencies": {
+        "semver": "^7.5.3"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/semver": {
+      "version": "7.5.4",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
+      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
+      "dev": true,
+      "dependencies": {
+        "lru-cache": "^6.0.0"
+      },
+      "bin": {
+        "semver": "bin/semver.js"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dev": true,
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-report/node_modules/yallist": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
+      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
+      "dev": true
+    },
+    "node_modules/istanbul-lib-source-maps": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
+      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
+      "dev": true,
+      "dependencies": {
+        "debug": "^4.1.1",
+        "istanbul-lib-coverage": "^3.0.0",
+        "source-map": "^0.6.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/istanbul-lib-source-maps/node_modules/source-map": {
+      "version": "0.6.1",
+      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
+      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/istanbul-reports": {
+      "version": "3.1.6",
+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
+      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
+      "dev": true,
+      "dependencies": {
+        "html-escaper": "^2.0.0",
+        "istanbul-lib-report": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/jackspeak": {
+      "version": "2.3.6",
+      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-2.3.6.tgz",
+      "integrity": "sha512-N3yCS/NegsOBokc8GAdM8UcmfsKiSS8cipheD/nivzr700H+nsMOxJjQnvwOcRYVuFkdH0wGUvW2WbXGmrZGbQ==",
+      "dev": true,
+      "dependencies": {
+        "@isaacs/cliui": "^8.0.2"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      },
+      "optionalDependencies": {
+        "@pkgjs/parseargs": "^0.11.0"
+      }
+    },
+    "node_modules/jasmine": {
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/jasmine/-/jasmine-5.1.0.tgz",
+      "integrity": "sha512-prmJlC1dbLhti4nE4XAPDWmfJesYO15sjGXVp7Cs7Ym5I9Xtwa/hUHxxJXjnpfLO72+ySttA0Ztf8g/RiVnUKw==",
+      "dev": true,
+      "dependencies": {
+        "glob": "^10.2.2",
+        "jasmine-core": "~5.1.0"
+      },
+      "bin": {
+        "jasmine": "bin/jasmine.js"
+      }
+    },
+    "node_modules/jasmine-core": {
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/jasmine-core/-/jasmine-core-5.1.1.tgz",
+      "integrity": "sha512-UrzO3fL7nnxlQXlvTynNAenL+21oUQRlzqQFsA2U11ryb4+NLOCOePZ70PTojEaUKhiFugh7dG0Q+I58xlPdWg==",
+      "dev": true
+    },
+    "node_modules/jasmine/node_modules/glob": {
+      "version": "10.3.10",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.10.tgz",
+      "integrity": "sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==",
+      "dev": true,
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^2.3.5",
+        "minimatch": "^9.0.1",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0",
+        "path-scurry": "^1.10.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/jasmine/node_modules/minimatch": {
+      "version": "9.0.3",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.3.tgz",
+      "integrity": "sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/js-tokens": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
+      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
+      "dev": true
+    },
+    "node_modules/js-yaml": {
+      "version": "3.14.1",
+      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
+      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
+      "dev": true,
+      "dependencies": {
+        "argparse": "^1.0.7",
+        "esprima": "^4.0.0"
+      },
+      "bin": {
+        "js-yaml": "bin/js-yaml.js"
+      }
+    },
+    "node_modules/js-yaml/node_modules/esprima": {
+      "version": "4.0.1",
+      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
+      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
+      "dev": true,
+      "bin": {
+        "esparse": "bin/esparse.js",
+        "esvalidate": "bin/esvalidate.js"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/jsesc": {
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
+      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
+      "dev": true,
+      "bin": {
+        "jsesc": "bin/jsesc"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/json5": {
+      "version": "2.2.3",
+      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
+      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
+      "dev": true,
+      "bin": {
+        "json5": "lib/cli.js"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/locate-path": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
+      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
+      "dev": true,
+      "dependencies": {
+        "p-locate": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/lodash.flattendeep": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/lodash.flattendeep/-/lodash.flattendeep-4.4.0.tgz",
+      "integrity": "sha512-uHaJFihxmJcEX3kT4I23ABqKKalJ/zDrDg0lsFtc1h+3uw49SIJ5beyhx5ExVRti3AvKoOJngIj7xz3oylPdWQ==",
+      "dev": true
+    },
+    "node_modules/lru-cache": {
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
+      "dev": true,
+      "engines": {
+        "node": "14 || >=16.14"
+      }
+    },
+    "node_modules/make-dir": {
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-3.1.0.tgz",
+      "integrity": "sha512-g3FeP20LNwhALb/6Cz6Dd4F2ngze0jz7tbzrD2wAV+o9FeNHe4rL+yK2md0J/fiSf1sa1ADhXqi5+oVwOM/eGw==",
+      "dev": true,
+      "dependencies": {
+        "semver": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
+      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
+      "dev": true
+    },
+    "node_modules/minimatch": {
+      "version": "3.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
+      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^1.1.7"
+      },
+      "engines": {
+        "node": "*"
+      }
+    },
+    "node_modules/minimatch/node_modules/brace-expansion": {
+      "version": "1.1.11",
+      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
+      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
+      "dev": true,
+      "dependencies": {
+        "balanced-match": "^1.0.0",
+        "concat-map": "0.0.1"
+      }
+    },
+    "node_modules/minipass": {
+      "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.0.4.tgz",
+      "integrity": "sha512-jYofLM5Dam9279rdkWzqHozUo4ybjdZmCsDHePy5V/PbBcVMiSZR97gmAy45aqi8CK1lG2ECd356FU86avfwUQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      }
+    },
+    "node_modules/ms": {
+      "version": "2.1.2",
+      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
+      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
+      "dev": true
+    },
+    "node_modules/node-preload": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/node-preload/-/node-preload-0.2.1.tgz",
+      "integrity": "sha512-RM5oyBy45cLEoHqCeh+MNuFAxO0vTFBLskvQbOKnEE7YTTSN4tbN8QWDIPQ6L+WvKsB/qLEGpYe2ZZ9d4W9OIQ==",
+      "dev": true,
+      "dependencies": {
+        "process-on-spawn": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/node-releases": {
+      "version": "2.0.13",
+      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.13.tgz",
+      "integrity": "sha512-uYr7J37ae/ORWdZeQ1xxMJe3NtdmqMC/JZK+geofDrkLUApKRHPd18/TxtBOJ4A0/+uUIliorNrfYV6s1b02eQ==",
+      "dev": true
+    },
+    "node_modules/nyc": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/nyc/-/nyc-15.1.0.tgz",
+      "integrity": "sha512-jMW04n9SxKdKi1ZMGhvUTHBN0EICCRkHemEoE5jm6mTYcqcdas0ATzgUgejlQUHMvpnOZqGB5Xxsv9KxJW1j8A==",
+      "dev": true,
+      "dependencies": {
+        "@istanbuljs/load-nyc-config": "^1.0.0",
+        "@istanbuljs/schema": "^0.1.2",
+        "caching-transform": "^4.0.0",
+        "convert-source-map": "^1.7.0",
+        "decamelize": "^1.2.0",
+        "find-cache-dir": "^3.2.0",
+        "find-up": "^4.1.0",
+        "foreground-child": "^2.0.0",
+        "get-package-type": "^0.1.0",
+        "glob": "^7.1.6",
+        "istanbul-lib-coverage": "^3.0.0",
+        "istanbul-lib-hook": "^3.0.0",
+        "istanbul-lib-instrument": "^4.0.0",
+        "istanbul-lib-processinfo": "^2.0.2",
+        "istanbul-lib-report": "^3.0.0",
+        "istanbul-lib-source-maps": "^4.0.0",
+        "istanbul-reports": "^3.0.2",
+        "make-dir": "^3.0.0",
+        "node-preload": "^0.2.1",
+        "p-map": "^3.0.0",
+        "process-on-spawn": "^1.0.0",
+        "resolve-from": "^5.0.0",
+        "rimraf": "^3.0.0",
+        "signal-exit": "^3.0.2",
+        "spawn-wrap": "^2.0.0",
+        "test-exclude": "^6.0.0",
+        "yargs": "^15.0.2"
+      },
+      "bin": {
+        "nyc": "bin/nyc.js"
+      },
+      "engines": {
+        "node": ">=8.9"
+      }
+    },
+    "node_modules/nyc/node_modules/foreground-child": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-2.0.0.tgz",
+      "integrity": "sha512-dCIq9FpEcyQyXKCkyzmlPTFNgrCzPudOe+mhvJU5zAtlBnGVy2yKxtfsxK2tQBThwq225jcvBjpw1Gr40uzZCA==",
+      "dev": true,
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/nyc/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true
+    },
+    "node_modules/once": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
+      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
+      "dev": true,
+      "dependencies": {
+        "wrappy": "1"
+      }
+    },
+    "node_modules/p-limit": {
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
+      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
+      "dev": true,
+      "dependencies": {
+        "p-try": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=6"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/p-locate": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
+      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
+      "dev": true,
+      "dependencies": {
+        "p-limit": "^2.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/p-map": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/p-map/-/p-map-3.0.0.tgz",
+      "integrity": "sha512-d3qXVTF/s+W+CdJ5A29wywV2n8CQQYahlgz2bFiA+4eVNJbHJodPZ+/gXwPGh0bOqA+j8S+6+ckmvLGPk1QpxQ==",
+      "dev": true,
+      "dependencies": {
+        "aggregate-error": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/p-try": {
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
+      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/package-hash": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/package-hash/-/package-hash-4.0.0.tgz",
+      "integrity": "sha512-whdkPIooSu/bASggZ96BWVvZTRMOFxnyUG5PnTSGKoJE2gd5mbVNmR2Nj20QFzxYYgAXpoqC+AiXzl+UMRh7zQ==",
+      "dev": true,
+      "dependencies": {
+        "graceful-fs": "^4.1.15",
+        "hasha": "^5.0.0",
+        "lodash.flattendeep": "^4.4.0",
+        "release-zalgo": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-exists": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
+      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-is-absolute": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
+      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/path-key": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
+      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/path-scurry": {
+      "version": "1.10.1",
+      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.10.1.tgz",
+      "integrity": "sha512-MkhCqzzBEpPvxxQ71Md0b1Kk51W01lrYvlMzSUaIzNsODdd7mqhiimSZlr+VegAz5Z6Vzt9Xg2ttE//XBhH3EQ==",
+      "dev": true,
+      "dependencies": {
+        "lru-cache": "^9.1.1 || ^10.0.0",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/picocolors": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
+      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
+      "dev": true
+    },
+    "node_modules/pkg-dir": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
+      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
+      "dev": true,
+      "dependencies": {
+        "find-up": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/process-on-spawn": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/process-on-spawn/-/process-on-spawn-1.0.0.tgz",
+      "integrity": "sha512-1WsPDsUSMmZH5LeMLegqkPDrsGgsWwk1Exipy2hvB0o/F0ASzbpIctSCcZIK1ykJvtTJULEH+20WOFjMvGnCTg==",
+      "dev": true,
+      "dependencies": {
+        "fromentries": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/release-zalgo": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/release-zalgo/-/release-zalgo-1.0.0.tgz",
+      "integrity": "sha512-gUAyHVHPPC5wdqX/LG4LWtRYtgjxyX78oanFNTMMyFEfOqdC54s3eE82imuWKbOeqYht2CrNf64Qb8vgmmtZGA==",
+      "dev": true,
+      "dependencies": {
+        "es6-error": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/require-directory": {
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
+      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
+    "node_modules/require-main-filename": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/require-main-filename/-/require-main-filename-2.0.0.tgz",
+      "integrity": "sha512-NKN5kMDylKuldxYLSUfrbo5Tuzh4hd+2E8NPPX02mZtn1VuREQToYe/ZdlJy+J3uCpfaiGF05e7B8W0iXbQHmg==",
+      "dev": true
+    },
+    "node_modules/resolve-from": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
+      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/rimraf": {
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
+      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
+      "dev": true,
+      "dependencies": {
+        "glob": "^7.1.3"
+      },
+      "bin": {
+        "rimraf": "bin.js"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/set-blocking": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
+      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
+      "dev": true
+    },
+    "node_modules/shebang-command": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
+      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
+      "dev": true,
+      "dependencies": {
+        "shebang-regex": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/shebang-regex": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
+      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/signal-exit": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
+      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
+      "dev": true,
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
+    },
+    "node_modules/spawn-wrap": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/spawn-wrap/-/spawn-wrap-2.0.0.tgz",
+      "integrity": "sha512-EeajNjfN9zMnULLwhZZQU3GWBoFNkbngTUPfaawT4RkMiviTxcX0qfhVbGey39mfctfDHkWtuecgQ8NJcyQWHg==",
+      "dev": true,
+      "dependencies": {
+        "foreground-child": "^2.0.0",
+        "is-windows": "^1.0.2",
+        "make-dir": "^3.0.0",
+        "rimraf": "^3.0.0",
+        "signal-exit": "^3.0.2",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/spawn-wrap/node_modules/foreground-child": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-2.0.0.tgz",
+      "integrity": "sha512-dCIq9FpEcyQyXKCkyzmlPTFNgrCzPudOe+mhvJU5zAtlBnGVy2yKxtfsxK2tQBThwq225jcvBjpw1Gr40uzZCA==",
+      "dev": true,
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/spawn-wrap/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true
+    },
+    "node_modules/sprintf-js": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
+      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
+      "dev": true
+    },
+    "node_modules/string-width": {
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/string-width-cjs": {
+      "name": "string-width",
+      "version": "4.2.3",
+      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
+      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
+      "dev": true,
+      "dependencies": {
+        "emoji-regex": "^8.0.0",
+        "is-fullwidth-code-point": "^3.0.0",
+        "strip-ansi": "^6.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-ansi-cjs": {
+      "name": "strip-ansi",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/strip-bom": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
+      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/supports-color": {
+      "version": "5.5.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
+      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
+      "dev": true,
+      "dependencies": {
+        "has-flag": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/test-exclude": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
+      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
+      "dev": true,
+      "dependencies": {
+        "@istanbuljs/schema": "^0.1.2",
+        "glob": "^7.1.4",
+        "minimatch": "^3.0.4"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/to-fast-properties": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
+      "integrity": "sha512-/OaKK0xYrs3DmxRYqL/yDc+FxFUVYhDlXMhRmv3z915w2HF1tnN1omB354j8VUGO/hbRzyD6Y3sA7v7GS/ceog==",
+      "dev": true,
+      "engines": {
+        "node": ">=4"
+      }
+    },
+    "node_modules/ts-node": {
+      "version": "10.9.2",
+      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
+      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
+      "dev": true,
+      "dependencies": {
+        "@cspotcode/source-map-support": "^0.8.0",
+        "@tsconfig/node10": "^1.0.7",
+        "@tsconfig/node12": "^1.0.7",
+        "@tsconfig/node14": "^1.0.0",
+        "@tsconfig/node16": "^1.0.2",
+        "acorn": "^8.4.1",
+        "acorn-walk": "^8.1.1",
+        "arg": "^4.1.0",
+        "create-require": "^1.1.0",
+        "diff": "^4.0.1",
+        "make-error": "^1.1.1",
+        "v8-compile-cache-lib": "^3.0.1",
+        "yn": "3.1.1"
+      },
+      "bin": {
+        "ts-node": "dist/bin.js",
+        "ts-node-cwd": "dist/bin-cwd.js",
+        "ts-node-esm": "dist/bin-esm.js",
+        "ts-node-script": "dist/bin-script.js",
+        "ts-node-transpile-only": "dist/bin-transpile.js",
+        "ts-script": "dist/bin-script-deprecated.js"
+      },
+      "peerDependencies": {
+        "@swc/core": ">=1.2.50",
+        "@swc/wasm": ">=1.2.50",
+        "@types/node": "*",
+        "typescript": ">=2.7"
+      },
+      "peerDependenciesMeta": {
+        "@swc/core": {
+          "optional": true
+        },
+        "@swc/wasm": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/ts-node/node_modules/diff": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
+      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
+    "node_modules/type-fest": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
+      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/typedarray-to-buffer": {
+      "version": "3.1.5",
+      "resolved": "https://registry.npmjs.org/typedarray-to-buffer/-/typedarray-to-buffer-3.1.5.tgz",
+      "integrity": "sha512-zdu8XMNEDepKKR+XYOXAVPtWui0ly0NtohUscw+UmaHiAWT8hrV1rr//H6V+0DvJ3OQ19S979M0laLfX8rm82Q==",
+      "dev": true,
+      "dependencies": {
+        "is-typedarray": "^1.0.0"
+      }
+    },
+    "node_modules/typescript": {
+      "version": "5.3.2",
+      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.3.2.tgz",
+      "integrity": "sha512-6l+RyNy7oAHDfxC4FzSJcz9vnjTKxrLpDG5M2Vu4SHRVNg6xzqZp6LYSR9zjqQTu8DU/f5xwxUdADOkbrIX2gQ==",
+      "dev": true,
+      "peer": true,
+      "bin": {
+        "tsc": "bin/tsc",
+        "tsserver": "bin/tsserver"
+      },
+      "engines": {
+        "node": ">=14.17"
+      }
+    },
+    "node_modules/undici-types": {
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
+      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
+      "dev": true,
+      "peer": true
+    },
+    "node_modules/update-browserslist-db": {
+      "version": "1.0.13",
+      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.0.13.tgz",
+      "integrity": "sha512-xebP81SNcPuNpPP3uzeW1NYXxI3rxyJzF3pD6sH4jE7o/IX+WtSpwnVU+qIsDPyk0d3hmFQ7mjqc6AtV604hbg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "opencollective",
+          "url": "https://opencollective.com/browserslist"
+        },
+        {
+          "type": "tidelift",
+          "url": "https://tidelift.com/funding/github/npm/browserslist"
+        },
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/ai"
+        }
+      ],
+      "dependencies": {
+        "escalade": "^3.1.1",
+        "picocolors": "^1.0.0"
+      },
+      "bin": {
+        "update-browserslist-db": "cli.js"
+      },
+      "peerDependencies": {
+        "browserslist": ">= 4.21.0"
+      }
+    },
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+      "dev": true,
+      "bin": {
+        "uuid": "dist/bin/uuid"
+      }
+    },
+    "node_modules/v8-compile-cache-lib": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
+      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
+      "dev": true
+    },
+    "node_modules/which": {
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
+      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
+      "dev": true,
+      "dependencies": {
+        "isexe": "^2.0.0"
+      },
+      "bin": {
+        "node-which": "bin/node-which"
+      },
+      "engines": {
+        "node": ">= 8"
+      }
+    },
+    "node_modules/which-module": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/which-module/-/which-module-2.0.1.tgz",
+      "integrity": "sha512-iBdZ57RDvnOR9AGBhML2vFZf7h8vmBjhoaZqODJBFWHVtKkDmKuHai3cx5PgVMrX5YDNp27AofYbAwctSS+vhQ==",
+      "dev": true
+    },
+    "node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/wrap-ansi-cjs": {
+      "name": "wrap-ansi",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
+      }
+    },
+    "node_modules/wrappy": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
+      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
+      "dev": true
+    },
+    "node_modules/write-file-atomic": {
+      "version": "3.0.3",
+      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-3.0.3.tgz",
+      "integrity": "sha512-AvHcyZ5JnSfq3ioSyjrBkH9yW4m7Ayk8/9My/DD9onKeu/94fwrMocemO2QAJFAlnnDN+ZDS+ZjAR5ua1/PV/Q==",
+      "dev": true,
+      "dependencies": {
+        "imurmurhash": "^0.1.4",
+        "is-typedarray": "^1.0.0",
+        "signal-exit": "^3.0.2",
+        "typedarray-to-buffer": "^3.1.5"
+      }
+    },
+    "node_modules/write-file-atomic/node_modules/signal-exit": {
+      "version": "3.0.7",
+      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
+      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
+      "dev": true
+    },
+    "node_modules/y18n": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
+      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
+      "dev": true
+    },
+    "node_modules/yallist": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
+      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
+      "dev": true
+    },
+    "node_modules/yargs": {
+      "version": "15.4.1",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
+      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
+      "dev": true,
+      "dependencies": {
+        "cliui": "^6.0.0",
+        "decamelize": "^1.2.0",
+        "find-up": "^4.1.0",
+        "get-caller-file": "^2.0.1",
+        "require-directory": "^2.1.1",
+        "require-main-filename": "^2.0.0",
+        "set-blocking": "^2.0.0",
+        "string-width": "^4.2.0",
+        "which-module": "^2.0.0",
+        "y18n": "^4.0.0",
+        "yargs-parser": "^18.1.2"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/yargs-parser": {
+      "version": "18.1.3",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
+      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
+      "dev": true,
+      "dependencies": {
+        "camelcase": "^5.0.0",
+        "decamelize": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
+    "node_modules/yn": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
+      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    }
+  }
+}
diff --git a/lib/package.json b/lib/package.json
new file mode 100644
index 000000000..8859c39f8
--- /dev/null
+++ b/lib/package.json
@@ -0,0 +1,23 @@
+{
+  "name": "@everyboard/lib",
+  "version": "1.0.0",
+  "description": "EveryBoard's library",
+  "private": "true",
+  "main": "./dist/index.js",
+  "module": "./dist/index.mjs",
+  "types": "./dist/index.d.ts",
+  "files": [
+    "dist"
+  ],
+  "scripts": {
+    "build": "tsc --build",
+    "watch": "tsc --watch",
+    "test": "nyc -x '**/*.spec.ts' --reporter=lcov --reporter=text npx jasmine --config=jasmine.json",
+    "coverage": "nyc --branches 100 --lines 100 --statements 100 --functions 100 check-coverage"
+  },
+  "devDependencies": {
+    "jasmine": "^5.1.0",
+    "nyc": "^15.1.0",
+    "ts-node": "^10.9.2"
+  }
+}
diff --git a/src/app/utils/ArrayUtils.ts b/lib/src/ArrayUtils.ts
similarity index 54%
rename from src/app/utils/ArrayUtils.ts
rename to lib/src/ArrayUtils.ts
index f90a4e877..d6817eed8 100644
--- a/src/app/utils/ArrayUtils.ts
+++ b/lib/src/ArrayUtils.ts
@@ -1,8 +1,5 @@
-import { Coord } from '../jscaip/Coord';
 import { Comparable, comparableEquals } from './Comparable';
-import { MGPMap } from './MGPMap';
-import { MGPOptional } from './MGPOptional';
-import { Utils } from './utils';
+import { Utils } from './Utils';

 export class ArrayUtils {

@@ -42,6 +39,7 @@ export class ArrayUtils {
         return true;
     }

+
     public static isPrefix<T extends Comparable>(prefix: ReadonlyArray<T>, list: ReadonlyArray<T>): boolean {
         if (prefix.length > list.length) return false;
         return ArrayUtils.equals(prefix, list.slice(0, prefix.length));
@@ -76,7 +74,6 @@ export class ArrayUtils {
         return array[randomIndex];
     }

-
     /**
      * Gets the maximum elements of an array, according to a given metric.
      * Returns an array containing all the maximal values
@@ -97,6 +94,9 @@ export class ArrayUtils {
         return maximums;
     }

+    /**
+     * Counts the number of element in an array that have the provided value
+     */
     public static count<T>(array: T[], value: T): number {
         let total: number = 0;
         for (const element of array) {
@@ -107,6 +107,9 @@ export class ArrayUtils {
         return total;
     }

+    /**
+     * Check whether the first argument is strictly smaller than the second, element-wise
+     */
     public static isLessThan(inferior: ReadonlyArray<number>, superior: ReadonlyArray<number>): boolean {
         Utils.assert(inferior.length > 0 && superior.length > 0, 'ArrayUtils.isLessThan/isGreaterThan should have two non-empty list as parameter');
         const maximumIndex: number = Math.min(inferior.length, superior.length);
@@ -118,10 +121,16 @@ export class ArrayUtils {
         return false; // They are equal
     }

+    /**
+     * Check whether the first argument is strictly greater than the second, element-wise.
+     */
     public static isGreaterThan(superior: ReadonlyArray<number>, inferior: ReadonlyArray<number>): boolean {
         return ArrayUtils.isLessThan(inferior, superior);
     }

+    /**
+     * Return the minimal array (comparing element-wise) between two arrays.
+     */
     public static min(left: ReadonlyArray<number>, right: ReadonlyArray<number>): ReadonlyArray<number> {
         if (ArrayUtils.isLessThan(left, right)) {
             return left;
@@ -130,6 +139,9 @@ export class ArrayUtils {
         }
     }

+    /**
+     * Return the maximal array (comparing element-wise) between two arrays.
+     */
     public static max(left: ReadonlyArray<number>, right: ReadonlyArray<number>): ReadonlyArray<number> {
         if (ArrayUtils.isGreaterThan(left, right)) {
             return left;
@@ -140,111 +152,3 @@ export class ArrayUtils {

 }

-export type Table<T> = ReadonlyArray<ReadonlyArray<T>>;
-
-export class TableUtils {
-
-    public static sum(board: Table<number>): number {
-        let sum: number = 0;
-        for (const line of board) {
-            for (const element of line) {
-                sum += element;
-            }
-        }
-        return sum;
-    }
-
-    public static add(left: Table<number>, right: Table<number>): number[][] {
-        const width: number = left[0].length;
-        const height: number = left.length;
-        Utils.assert(height === right.length, 'Table should have same height');
-        Utils.assert(width === right[0].length, 'Table should have same width');
-        const sum: number[][] = TableUtils.create(width, height, 0);
-        for (let y: number = 0; y < height; y++) {
-            for (let x: number = 0; x < width; x++) {
-                sum[y][x] = left[y][x] + right[y][x];
-            }
-        }
-        return sum;
-    }
-
-    public static create<T>(width: number, height: number, initValue: T): T[][] {
-        const table: Array<Array<T>> = [];
-        for (let y: number = 0; y < height; y++) {
-            table.push(ArrayUtils.create(width, initValue));
-        }
-        return table;
-    }
-
-    public static map<T, U>(table: Table<T>, fun: (t: T) => U): U[][] {
-        return table.map((row: T[]): U[] => row.map(fun));
-    }
-
-    public static copy<T>(table: Table<T>): T[][] {
-        return TableUtils.map(table, (t: T): T => t);
-    }
-
-    public static compare<T extends Comparable>(t1: Table<T>, t2: Table<T>): boolean {
-        if (t1.length !== t2.length) return false;
-        for (let i: number = 0; i < t1.length; i++) {
-            if (ArrayUtils.equals(t1[i], t2[i]) === false) return false;
-        }
-        return true;
-    }
-
-}
-
-export type Cell<T> = {
-    x: number,
-    y: number,
-    content: T,
-};
-
-export class TableWithPossibleNegativeIndices<T extends NonNullable<unknown>> {
-    // This cannot be represented by an array as it may have negative indices
-    // which cannot be iterated over
-    protected content: MGPMap<number, MGPMap<number, T>> = new MGPMap();
-
-    public get(coord: Coord): MGPOptional<T> {
-        const line: MGPOptional<MGPMap<number, T>> = this.content.get(coord.y);
-        if (line.isAbsent()) return MGPOptional.empty();
-        return line.get().get(coord.x);
-    }
-    public set(coord: Coord, value: T): void {
-        const lineOpt: MGPOptional<MGPMap<number, T>> = this.content.get(coord.y);
-        let line: MGPMap<number, T>;
-        if (lineOpt.isPresent()) {
-            line = lineOpt.get();
-        } else {
-            line = new MGPMap<number, T>();
-            this.content.set(coord.y, line);
-        }
-        line.set(coord.x, value);
-    }
-    [Symbol.iterator](): IterableIterator<Cell<T>> {
-        const elements: Cell<T>[] = [];
-        const ys: number[] = this.content.getKeySet().toList();
-        ys.sort(ArrayUtils.smallerFirst);
-        for (const y of ys) {
-            const line: MGPMap<number, T> = this.content.get(y).get();
-            const xs: number[] = line.getKeySet().toList();
-            xs.sort(ArrayUtils.smallerFirst);
-            for (const x of xs) {
-                const content: T = line.get(x).get();
-                elements.push({ x, y, content });
-            }
-        }
-        return elements.values();
-    }
-}
-
-export class Table3DUtils {
-
-    public static create<T>(depth: number, width: number, height: number, initValue: T): T[][][] {
-        const triTable: Array<Array<Array<T>>> = [];
-        for (let z: number = 0; z < depth; z++) {
-            triTable.push(TableUtils.create(width, height, initValue));
-        }
-        return triTable;
-    }
-}
diff --git a/src/app/utils/Combinatorics.ts b/lib/src/Combinatorics.ts
similarity index 92%
rename from src/app/utils/Combinatorics.ts
rename to lib/src/Combinatorics.ts
index 69b4116de..1a2f89c93 100644
--- a/src/app/utils/Combinatorics.ts
+++ b/lib/src/Combinatorics.ts
@@ -1,14 +1,16 @@
-import { assert } from './assert';
+import { Utils } from './Utils';

 export class Combinatorics {
+
     public static getCombinations<T>(elements: T[], size: number): T[][] {
-        assert(size <= elements.length, 'cannot compute combinations for less elements than needed');
+        Utils.assert(size <= elements.length, 'cannot compute combinations for less elements than needed');
         return this.getSubsetsOfSize(elements, size).map((subset: T[]): T[][] => {
             return this.getPermutations(subset);
         }).reduce((accumulator: T[][], combinations: T[][]): T[][] => {
             return accumulator.concat(combinations);
         });
     }
+
     public static getPermutations<T>(elements: T[]): T[][] {
         // Uses Heap's algorithm to compute all permutations of `elements`
         const length: number = elements.length;
@@ -31,6 +33,7 @@ export class Combinatorics {
         }
         return result;
     }
+
     public static getSubsetsOfSize<T>(elements: T[], size: number): T[][] {
         function subsets(length: number, start: number): T[][] {
             if (elements.length <= start || length < 1) {
diff --git a/src/app/utils/Comparable.ts b/lib/src/Comparable.ts
similarity index 97%
rename from src/app/utils/Comparable.ts
rename to lib/src/Comparable.ts
index 77703460d..2f89ea1ed 100644
--- a/src/app/utils/Comparable.ts
+++ b/lib/src/Comparable.ts
@@ -1,4 +1,4 @@
-import { isJSONPrimitive, JSONPrimitive } from './utils';
+import { isJSONPrimitive, JSONPrimitive } from './JSON';

 export interface ComparableObject {

diff --git a/src/app/utils/Encoder.ts b/lib/src/Encoder.ts
similarity index 90%
rename from src/app/utils/Encoder.ts
rename to lib/src/Encoder.ts
index e3f1ef240..3f3ae8853 100644
--- a/src/app/utils/Encoder.ts
+++ b/lib/src/Encoder.ts
@@ -1,4 +1,6 @@
-import { JSONValue, JSONValueWithoutArray, Utils } from 'src/app/utils/utils';
+import { JSONValue, JSONValueWithoutArray } from './JSON';
+import { Utils } from './Utils';
+
 // Used internally. If T = [A, B, C], then
 // EncoderArray<T> = [Encoder<A>, Encoder<B>, Encoder<C>]
 type EncoderArray<T> = { [P in keyof T]: Encoder<T[P]> };
@@ -17,12 +19,14 @@ export abstract class Encoder<T> {
             }
         };
     }
+
     public static identity<U extends JSONValueWithoutArray>(): Encoder<U> {
         function identity(x: U): U {
             return x;
         }
         return Encoder.fromFunctions(identity, identity);
     }
+
     public static constant<U>(constant: JSONValueWithoutArray, onlyValue: U): Encoder<U> {
         return new class extends Encoder<U> {
             public encode(_value: U): JSONValueWithoutArray {
@@ -33,6 +37,7 @@ export abstract class Encoder<T> {
             }
         };
     }
+
     public static tuple<T, Fields extends object>(encoders: EncoderArray<Fields>,
                                                   encode: (t: T) => Fields,
                                                   decode: (fields: Fields) => T): Encoder<T> {
@@ -55,6 +60,7 @@ export abstract class Encoder<T> {
             }
         };
     }
+
     /**
      * This creates a "sum" encoder, i.e., it encodes values of either type T and U and V and ...
      */
@@ -85,6 +91,7 @@ export abstract class Encoder<T> {
             }
         };
     }
+
     public static list<T>(encoder: Encoder<T>): Encoder<Array<T>> {
         return new class extends Encoder<Array<T>> {
             public encode(list: T[]): JSONValue {
@@ -101,7 +108,19 @@ export abstract class Encoder<T> {
             }
         };
     }
+
     public abstract encode(move: T): JSONValue;

     public abstract decode(encodedMove: JSONValue): T;
 }
+
+/**
+ * This is a helper class to test encoders
+ */
+export class EncoderTestUtils {
+    public static expectToBeBijective<T>(encoder: Encoder<T>, value: T): void {
+        const encoded: JSONValue = encoder.encode(value);
+        const decoded: T = encoder.decode(encoded);
+        expect(decoded).withContext(`Expected decoded value (${decoded}) to be ${value}`).toEqual(value);
+    }
+}
diff --git a/lib/src/JSON.ts b/lib/src/JSON.ts
new file mode 100644
index 000000000..19e20d90f
--- /dev/null
+++ b/lib/src/JSON.ts
@@ -0,0 +1,27 @@
+import { FieldValue } from 'firebase/firestore';
+
+// These are the datatypes supported by firestore. Arrays of arrays are not
+// supported, but arrays containing objects containing arrays are, which is what
+// is encoded in these types.
+
+export type JSONPrimitive = string | number | boolean | null | undefined;
+export type JSONValue = JSONPrimitive | JSONObject | Array<JSONValueWithoutArray>;
+export type JSONValueWithoutArray = JSONPrimitive | JSONObject
+export type JSONObject = { [member: string]: JSONValue };
+
+export function isJSONPrimitive(value: unknown): value is JSONPrimitive {
+    if (typeof value === 'string') return true;
+    if (typeof value === 'number') return true;
+    if (typeof value === 'boolean') return true;
+    if (value === null) return true;
+    return false;
+}
+
+export type FirestoreJSONPrimitive = JSONPrimitive | FieldValue;
+export type FirestoreJSONValue =
+    FirestoreJSONPrimitive |
+    FirestoreJSONObject |
+    Array<FirestoreJSONValueWithoutArray> |
+    ReadonlyArray<FirestoreJSONValueWithoutArray>;
+export type FirestoreJSONValueWithoutArray = FirestoreJSONPrimitive | FirestoreJSONObject
+export type FirestoreJSONObject = { [member: string]: FirestoreJSONValue };
diff --git a/src/app/utils/MGPFallible.ts b/lib/src/MGPFallible.ts
similarity index 86%
rename from src/app/utils/MGPFallible.ts
rename to lib/src/MGPFallible.ts
index 9aa2821c6..1b4e514ce 100644
--- a/src/app/utils/MGPFallible.ts
+++ b/lib/src/MGPFallible.ts
@@ -97,3 +97,16 @@ class MGPFallibleFailure<T> extends MGPFallible<T> {
         return MGPFallible.failure(this.reason);
     }
 }
+
+export class MGPFallibleTestUtils {
+
+    public static expectToBeSuccess<T>(fallible: MGPFallible<T>, value: T): void {
+        expect(fallible.isSuccess()).toBeTrue();
+        expect(fallible.get()).toBe(value);
+    }
+
+    public static expectToBeFailure<T>(fallible: MGPFallible<T>, reason: string): void {
+        expect(fallible.isFailure()).toBeTrue();
+        expect(fallible.getReason()).toBe(reason);
+    }
+}
diff --git a/src/app/utils/MGPMap.ts b/lib/src/MGPMap.ts
similarity index 94%
rename from src/app/utils/MGPMap.ts
rename to lib/src/MGPMap.ts
index 1cf267671..c7b6a4a7e 100644
--- a/src/app/utils/MGPMap.ts
+++ b/lib/src/MGPMap.ts
@@ -1,12 +1,11 @@
 import { MGPOptional } from './MGPOptional';
 import { Comparable, comparableEquals } from './Comparable';
 import { MGPSet } from './MGPSet';
-import { assert } from './assert';
-import { Utils } from './utils';
+import { Utils } from './Utils';

 export class MGPMap<K extends NonNullable<Comparable>, V extends NonNullable<unknown>> {

-    public static from<K extends string | number, V extends NonNullable<unknown>>(record: Record<K, V>)
+    public static from<K extends string, V extends NonNullable<unknown>>(record: Record<K, V>)
     : MGPMap<K, V>
     {
         const keys: K[] = Object.keys(record) as K[];
@@ -118,7 +117,7 @@ export class MGPMap<K extends NonNullable<Comparable>, V extends NonNullable<unk
     public set(key: K, firstValue: V): void {
         this.assertImmutability('set');
         if (this.containsKey(key)) {
-            throw new Error('Key ' + key.toString() + ' already exist in Map!');
+            throw new Error('Key ' + key.toString() + ' already exists in map!');
         } else {
             this.map.push({ key, value: firstValue });
         }
@@ -136,7 +135,7 @@ export class MGPMap<K extends NonNullable<Comparable>, V extends NonNullable<unk
                 return oldValue;
             }
         }
-        throw new Error('No Value to delete for key "'+ key.toString() +'"!');
+        throw new Error('No value to delete for key "'+ key.toString() +'"!');
     }

     public getCopy(): this {
@@ -157,7 +156,7 @@ export class MGPMap<K extends NonNullable<Comparable>, V extends NonNullable<unk
         for (const key of thisKeySet) {
             const thisValue: V = this.get(key).get();
             const otherValue: MGPOptional<V> = other.get(key);
-            assert(otherValue.isPresent(), 'value is absent in a map even though its key is present!');
+            Utils.assert(otherValue.isPresent(), 'value is absent in a map even though its key is present!');
             if (comparableEquals(thisValue, otherValue.get()) === false) {
                 return false;
             }
@@ -165,6 +164,7 @@ export class MGPMap<K extends NonNullable<Comparable>, V extends NonNullable<unk
         return true;
     }
 }
+
 export class ReversibleMap<K extends NonNullable<Comparable>, V extends NonNullable<Comparable>> extends MGPMap<K, V> {

     public reverse(): ReversibleMap<V, MGPSet<K>> {
diff --git a/src/app/utils/MGPOptional.ts b/lib/src/MGPOptional.ts
similarity index 98%
rename from src/app/utils/MGPOptional.ts
rename to lib/src/MGPOptional.ts
index 5d57a0f11..0f42af56c 100644
--- a/src/app/utils/MGPOptional.ts
+++ b/lib/src/MGPOptional.ts
@@ -1,19 +1,22 @@
 import { comparableEquals } from './Comparable';
 import { Encoder } from './Encoder';
-import { JSONValue } from './utils';
+import { JSONValue } from './JSON';

 export class MGPOptional<T> {

     public static of<T>(value: T): MGPOptional<T> {
         return new MGPOptional(value);
     }
+
     public static ofNullable<T>(value: T | null | undefined): MGPOptional<T> {
         if (value == null) return MGPOptional.empty();
         return MGPOptional.of(value);
     }
+
     public static empty<T>(): MGPOptional<T> {
         return new MGPOptional(null as T | null);
     }
+
     /**
      * Encodes a MGPOptional<T> using an encoder of T.
      * It will use the same encoding as T, and use null to encode an empty optional.
@@ -36,14 +39,17 @@ export class MGPOptional<T> {
             }
         };
     }
+
     private constructor(private readonly value: T | null) {}

     public isPresent(): boolean {
         return this.value != null;
     }
+
     public isAbsent(): boolean {
         return this.value == null;
     }
+
     public get(): T {
         if (this.isPresent()) {
             return this.value as T;
@@ -51,6 +57,7 @@ export class MGPOptional<T> {
             throw new Error('Value is absent');
         }
     }
+
     public getOrElse(defaultValue: T): T {
         if (this.isPresent()) {
             return this.value as T;
@@ -58,6 +65,7 @@ export class MGPOptional<T> {
             return defaultValue;
         }
     }
+
     public equals(other: MGPOptional<T>): boolean {
         if (this.isAbsent()) {
             return other.isAbsent();
@@ -67,9 +75,11 @@ export class MGPOptional<T> {
         }
         return comparableEquals(this.value, other.value);
     }
+
     public equalsValue(other: T): boolean {
         return this.equals(MGPOptional.of(other));
     }
+
     public toString(): string {
         if (this.isAbsent()) {
             return 'MGPOptional.empty()';
@@ -77,6 +87,7 @@ export class MGPOptional<T> {
             return `MGPOptional.of(${this.value as T})`;
         }
     }
+
     public map<U>(f: (value: T) => U): MGPOptional<U> {
         if (this.isPresent()) {
             return MGPOptional.of(f(this.get()));
diff --git a/src/app/utils/MGPSet.ts b/lib/src/MGPSet.ts
similarity index 100%
rename from src/app/utils/MGPSet.ts
rename to lib/src/MGPSet.ts
diff --git a/src/app/utils/MGPUniqueList.ts b/lib/src/MGPUniqueList.ts
similarity index 90%
rename from src/app/utils/MGPUniqueList.ts
rename to lib/src/MGPUniqueList.ts
index 033d8f76e..0763b4b2e 100644
--- a/src/app/utils/MGPUniqueList.ts
+++ b/lib/src/MGPUniqueList.ts
@@ -1,7 +1,11 @@
 import { Comparable, comparableEquals } from './Comparable';
 import { MGPSet } from './MGPSet';
-import { Utils } from './utils';
+import { Utils } from './Utils';

+/**
+ * This is a list that contains each element only once.
+ * It is an ordered set.
+ */
 export class MGPUniqueList<T extends Comparable> extends MGPSet<T> {

     public override equals(other: MGPUniqueList<T>): boolean {
@@ -17,10 +21,12 @@ export class MGPUniqueList<T extends Comparable> extends MGPSet<T> {
         }
         return true;
     }
+
     public get(index: number): T {
         Utils.assert(index < this.values.length, 'MGPUniqueList: index out of bounds: ' + index);
         return this.values[index];
     }
+
     /**
       * Get element starting to count from the end (0 for the last)
       * @param index the index of the element to fetch, starting from the end (0 as last)
diff --git a/src/app/utils/MGPValidation.ts b/lib/src/MGPValidation.ts
similarity index 52%
rename from src/app/utils/MGPValidation.ts
rename to lib/src/MGPValidation.ts
index 6946aad1a..d172e73d6 100644
--- a/src/app/utils/MGPValidation.ts
+++ b/lib/src/MGPValidation.ts
@@ -19,3 +19,22 @@ export namespace MGPValidation {
         return MGPFallible.failure(reason);
     }
 }
+
+/**
+ * This is a helper class to test MGPValidation values
+ */
+export class MGPValidationTestUtils {
+
+    public static expectToBeSuccess(fallible: MGPValidation, context?: string): void {
+        if (context != null) {
+            expect(fallible.isSuccess()).withContext(context).toBeTrue();
+        } else {
+            expect(fallible.isSuccess()).toBeTrue();
+        }
+    }
+
+    public static expectToBeFailure(fallible: MGPValidation, reason: string): void {
+        expect(fallible.isFailure()).toBeTrue();
+        expect(fallible.getReason()).toBe(reason);
+    }
+}
diff --git a/src/app/utils/MathUtils.ts b/lib/src/MathUtils.ts
similarity index 100%
rename from src/app/utils/MathUtils.ts
rename to lib/src/MathUtils.ts
diff --git a/src/app/utils/NumberMap.ts b/lib/src/NumberMap.ts
similarity index 100%
rename from src/app/utils/NumberMap.ts
rename to lib/src/NumberMap.ts
diff --git a/src/app/utils/tests/ObservableSubject.spec.ts b/lib/src/ObservableSubject.ts
similarity index 88%
rename from src/app/utils/tests/ObservableSubject.spec.ts
rename to lib/src/ObservableSubject.ts
index 4628a5367..0e090a723 100644
--- a/src/app/utils/tests/ObservableSubject.spec.ts
+++ b/lib/src/ObservableSubject.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { BehaviorSubject, Observable } from 'rxjs';
-import { ComparableObject } from '../Comparable';
+import { ComparableObject } from './Comparable';

 export class ObservableSubject<T> implements ComparableObject {
     public constructor(
diff --git a/src/app/utils/OptimizedSet.ts b/lib/src/OptimizedSet.ts
similarity index 80%
rename from src/app/utils/OptimizedSet.ts
rename to lib/src/OptimizedSet.ts
index 198bf7016..1d07e0034 100644
--- a/src/app/utils/OptimizedSet.ts
+++ b/lib/src/OptimizedSet.ts
@@ -1,11 +1,21 @@
-import { Coord } from '../jscaip/Coord';
 import { Comparable } from './Comparable';
 import { MGPSet } from './MGPSet';

+/**
+ * This is an optimized representation of sets.
+ * It performs multi-level hashing and is suitable for types
+ * that can be decomposed into multiple fields represented by numbers.
+ */
 export abstract class OptimizedSet<T extends Comparable> extends MGPSet<T> {
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     private readonly valueMap: any;

+    /**
+     * This should be defined for each specialization of OptimizedSet.
+     * It transforms a value into a list of fields.
+     * There should be at least one field, which is the second element returned.
+     * The first element returned is the list of other fields.
+     */
     protected abstract toFields(value: T): [[number], number];

     public constructor(values?: readonly T[]) {
@@ -18,6 +28,7 @@ export abstract class OptimizedSet<T extends Comparable> extends MGPSet<T> {
             }
         }
     }
+
     public override add(element: T): boolean {
         const fields: [[number], number] = this.toFields(element);
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -37,6 +48,7 @@ export abstract class OptimizedSet<T extends Comparable> extends MGPSet<T> {
             return false;
         }
     }
+
     public override contains(element: T): boolean {
         const fields: [[number], number] = this.toFields(element);
         // eslint-disable-next-line @typescript-eslint/no-explicit-any
@@ -50,13 +62,8 @@ export abstract class OptimizedSet<T extends Comparable> extends MGPSet<T> {
         const finalField: number = fields[1];
         return indirection[finalField] !== undefined;
     }
+
     [Symbol.iterator](): IterableIterator<T> {
         return this.values.values();
     }
 }
-
-export class CoordSet extends OptimizedSet<Coord> {
-    protected toFields(coord: Coord): [[number], number] {
-        return [[coord.y], coord.x];
-    }
-}
diff --git a/src/app/utils/Sets.ts b/lib/src/Sets.ts
similarity index 100%
rename from src/app/utils/Sets.ts
rename to lib/src/Sets.ts
diff --git a/lib/src/TestUtils.ts b/lib/src/TestUtils.ts
new file mode 100644
index 000000000..3b215082e
--- /dev/null
+++ b/lib/src/TestUtils.ts
@@ -0,0 +1,16 @@
+import { MGPValidation } from './MGPValidation';
+import { Utils } from './Utils';
+
+export class TestUtils {
+
+    public static expectToThrowAndLog(func: () => void, error: string): void {
+        if (jasmine.isSpy(Utils.logError) === false) {
+            spyOn(Utils, 'logError').and.callFake((component: string, message: string) =>
+                MGPValidation.failure(component + ': ' + message));
+        }
+        expect(func)
+            .withContext('Expected Assertion failure: ' + error)
+            .toThrowError('Assertion failure: ' + error);
+        expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', error, undefined);
+    }
+}
diff --git a/src/app/utils/TimeUtils.ts b/lib/src/TimeUtils.ts
similarity index 100%
rename from src/app/utils/TimeUtils.ts
rename to lib/src/TimeUtils.ts
diff --git a/lib/src/Utils.ts b/lib/src/Utils.ts
new file mode 100644
index 000000000..08ecc65b4
--- /dev/null
+++ b/lib/src/Utils.ts
@@ -0,0 +1,57 @@
+import { JSONValue } from './JSON';
+import { MGPValidation } from './MGPValidation';
+
+export class Utils {
+
+    /**
+     * The error logger is called in order to log errors when they arise.
+     * It should be set by the codebase relying on this, for example by doing:
+     * Utils.logError = myErrorLogger;
+     */
+    public static logError: (kind: string, message: string, data?: JSONValue) => MGPValidation =
+        (_kind: string, message: string, _data?: JSONValue) => {
+            return MGPValidation.failure(message);
+        };
+
+    public static expectToBe<T>(value: T, expected: T, message?: string): void {
+        if (value !== expected) {
+            if (message !== undefined) {
+                throw new Error(message);
+            }
+            throw new Error(`A default switch case did not observe the correct value, expected ${expected}, but got ${value} instead.`);
+        }
+    }
+
+    public static expectToBeMultiple<T>(value: T, expectedValues: T[]): void {
+        for (const expected of expectedValues) {
+            if (value === expected) {
+                return;
+            }
+        }
+        // No value found!
+        throw new Error(`A default switch case did not observe the correct value, expected a value among ${expectedValues}, but got ${value} instead.`);
+    }
+
+    public static getNonNullable<T>(value : T | null | undefined): T {
+        if (value == null) {
+            throw new Error(`Expected value not to be null or undefined, but it was.`);
+        } else {
+            return value;
+        }
+    }
+
+    public static assert(condition: boolean, message: string, data?: JSONValue): void {
+        if (condition === false) {
+            // We log the error but we also throw an exception
+            // This is because if an assertion fails,
+            // we don't want to execute the code after the assertion.
+            // Otherwise, this could result in potentially very serious issues.
+            Utils.logError('Assertion failure', message, data);
+            throw new Error(`Assertion failure: ${message}`);
+        }
+    }
+
+    public static identity<T>(thing: T): T {
+        return thing;
+    }
+}
diff --git a/lib/src/index.ts b/lib/src/index.ts
new file mode 100644
index 000000000..f9f29513c
--- /dev/null
+++ b/lib/src/index.ts
@@ -0,0 +1,20 @@
+export * from './ArrayUtils';
+export * from './Combinatorics';
+export * from './Comparable';
+export * from './Encoder';
+export * from './index';
+export * from './JSON';
+export * from './MathUtils';
+export * from './MGPFallible';
+export * from './MGPMap';
+export * from './MGPOptional';
+export * from './MGPSet';
+export * from './MGPUniqueList';
+export * from './MGPValidation';
+export * from './NumberMap';
+export * from './ObservableSubject';
+export * from './OptimizedSet';
+export * from './Sets';
+export * from './TestUtils';
+export * from './TimeUtils';
+export * from './Utils';
diff --git a/lib/src/tests/ArrayUtils.spec.ts b/lib/src/tests/ArrayUtils.spec.ts
new file mode 100644
index 000000000..67dc04bd3
--- /dev/null
+++ b/lib/src/tests/ArrayUtils.spec.ts
@@ -0,0 +1,268 @@
+/* eslint-disable max-lines-per-function */
+import { ArrayUtils } from '../ArrayUtils';
+import { TestUtils } from '../TestUtils';
+import { Utils } from '../Utils';
+
+describe('ArrayUtils', () => {
+
+    describe('create', () => {
+        it('should create an array of the given size only containing the element', () => {
+            // When creating an array of a given size with a given initial value
+            const array: number[] = ArrayUtils.create(4, 42);
+            // Then the array has the size and value
+            expect(array.length).toBe(4);
+            expect(array).toEqual([42, 42, 42, 42]);
+        });
+    });
+
+    describe('copy', () => {
+        it('should make a copy', () => {
+            // Given the copy of an array
+            const array: number[] = ArrayUtils.create(4, 0);
+            const copy: number[] = ArrayUtils.copy(array);
+            // When modifying the copy
+            copy[1] = 42;
+            // Then it should not have modified the original array
+            expect(array[1]).toBe(0);
+        });
+    });
+
+    describe('sortByDescending', () => {
+        it('should sort the array', () => {
+            // Given an array and a key function
+            const array: number[] = [0, 1, 2, 4, 2];
+            const key: (n: number) => number = Utils.identity;
+            // When sorting the array according to the key
+            ArrayUtils.sortByDescending(array, key);
+            // Then it should be sorted
+            expect(array).toEqual([4, 2, 2, 1, 0]);
+        });
+    });
+
+    describe('equals', () => {
+        it('should return true for equal arrays', () => {
+            expect(ArrayUtils.equals([0, 1, 2], [0, 1, 2])).toBeTrue();
+        });
+        it('should return false for different arrays', () => {
+            expect(ArrayUtils.equals([0, 1, 2], [0, 1, 3])).toBeFalse();
+            expect(ArrayUtils.equals([0, 1, 2], [0, 1])).toBeFalse();
+        });
+    });
+
+    describe('isPrefix', () => {
+        it('should be false when the prefix is longer than the list', () => {
+            const prefix: number[] = [1, 2, 3];
+            const list: number[] = [1];
+            expect(ArrayUtils.isPrefix(prefix, list)).toBeFalse();
+        });
+
+        it('should be false when we the prefix is not a prefix', () => {
+            const prefix: number[] = [1, 4];
+            const list: number[] = [1, 2, 3];
+            expect(ArrayUtils.isPrefix(prefix, list)).toBeFalse();
+        });
+
+        it('should be true when we have a prefix', () => {
+            const prefix: number[] = [1, 2, 3];
+            const list: number[] = [1, 2, 3, 4, 5];
+            expect(ArrayUtils.isPrefix(prefix, list)).toBeTrue();
+        });
+    });
+
+    describe('range', () => {
+        it('should produce a range up to the argument (non inclusive)', () => {
+            expect(ArrayUtils.range(5)).toEqual([0, 1, 2, 3, 4]);
+        });
+    });
+
+    describe('smallerFirst', () => {
+        it('should compare numbers to sort by smaller first', () => {
+            // Given an array
+            const array: number[] = [3, 2, 1, 0];
+            // When sorting it with smallerFirst order
+            array.sort(ArrayUtils.smallerFirst);
+            // Then it should be sorted in increasing size
+            expect(array).toEqual([0, 1, 2, 3]);
+        });
+    });
+
+    describe('getRandomElement', () => {
+        it('should give an element of the array', () => {
+            expect(ArrayUtils.getRandomElement(ArrayUtils.range(5))).toBeLessThan(5);
+        });
+    });
+
+    describe('maximumsBy', () => {
+        it('should extract the maximums', () => {
+            // Given an array and a metric
+            const array: number[] = [0, 3, 1, 2, 3];
+            const metric: (value: number) => number = Utils.identity;
+            // When extracting the maximums
+            const maximums: number[] = ArrayUtils.maximumsBy(array, metric);
+            // Then it should return all the maximum elements
+            expect(maximums).toEqual([3, 3]);
+        });
+    });
+
+    describe('count', () => {
+        it('should count the given value', () => {
+            // Given an array
+            const array: number[] = [0, 1, 2, 3, 3];
+            // When counting the number of times an element is present
+            const count: number = ArrayUtils.count(array, 3);
+            // Then it should return the correct value
+            expect(count).toBe(2);
+        });
+    });
+
+    describe('isGreaterThan && isLessThan', () => {
+
+        function expectComparisonCorrectness(left: number[], status: '<' | '=' | '>', right: number[]): void {
+            const actualIsGreaterThan: boolean = ArrayUtils.isGreaterThan(left, right);
+            const actualIsLessThan: boolean = ArrayUtils.isLessThan(left, right);
+            switch (status) {
+                case '<':
+                    expect(actualIsLessThan).toBeTrue();
+                    expect(actualIsGreaterThan).toBeFalse();
+                    break;
+                case '=':
+                    expect(actualIsLessThan).toBeFalse();
+                    expect(actualIsGreaterThan).toBeFalse();
+                    break;
+                default:
+                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
+                    Utils.assert(status === '>', 'should be >');
+                    expect(actualIsLessThan).toBeFalse();
+                    expect(actualIsGreaterThan).toBeTrue();
+                    break;
+
+            }
+        }
+
+        it('should consider a one-element list with a greater number greater', () => {
+            // Given a 1-element list
+            const superior: number[] = [5];
+            // and another 1-element list with a smaller number
+            const inferior: number[] = [0];
+
+            // When comparing them
+            // Then isGreaterThan should be true and isLessThan false
+            expectComparisonCorrectness(superior, '>', inferior);
+        });
+
+        it('should consider a multiple-element list with greater numbers greater', () => {
+            // Given a list being superior in the early number
+            const superior: number[] = [3, 2, 1];
+            // and another list being inferior in the early number
+            const inferior: number[] = [2, 2, 1];
+
+            // When comparing them
+            // Then isGreaterThan should be true and isLessThan false
+            expectComparisonCorrectness(superior, '>', inferior);
+        });
+
+        it('should consider a multiple-element list with smaller numbers smaller', () => {
+            // Given a list being inferior in the early number
+            const inferior: number[] = [2, 2, 1];
+            // and another list being superior in the early number
+            const superior: number[] = [3, 2, 1];
+
+            // When comparing them
+            // Then isGreaterThan should be false and isLessThan true
+            expectComparisonCorrectness(inferior, '<', superior);
+        });
+
+        it('should consider a one-element list with smaller number smaller', () => {
+            // Given a list being inferior in the early number
+            const inferior: number[] = [9876156];
+            // and another list being superior in the early number
+            const superior: number[] = [Number.MAX_SAFE_INTEGER];
+
+            // When comparing them
+            // Then isGreaterThan should be false and isLessThan true
+            expectComparisonCorrectness(inferior, '<', superior);
+        });
+
+        it('should consider equal lists equal', () => {
+            // Given two equal lists
+            const left: number[] = [3, 2, 1];
+            const right: number[] = [3, 2, 1];
+
+            // When comparing them
+            // Then isGreaterThan should be false and isLessThan false
+            expectComparisonCorrectness(left, '=', right);
+        });
+
+        it('should consider equal 1-element lists equal', () => {
+            // Given two equal lists
+            const left: number[] = [123456789];
+            const right: number[] = [123456789];
+
+            // When comparing them
+            // Then isGreaterThan should be false and isLessThan false
+            expectComparisonCorrectness(left, '=', right);
+        });
+
+        it('should throw with empty list (isGreaterThan)', () => {
+            // Given one empty list and one normal
+            // When comparing both list
+            const reason: string = 'ArrayUtils.isLessThan/isGreaterThan should have two non-empty list as parameter';
+            TestUtils.expectToThrowAndLog(() => {
+                ArrayUtils.isGreaterThan([], [1]);
+            }, reason);
+        });
+
+        it('should throw with empty list (isLessThan)', () => {
+            // Given one empty list and one normal
+            // When comparing both list
+            const reason: string = 'ArrayUtils.isLessThan/isGreaterThan should have two non-empty list as parameter';
+            TestUtils.expectToThrowAndLog(() => {
+                ArrayUtils.isLessThan([], [1]);
+            }, reason);
+        });
+
+    });
+
+    describe('min', () => {
+        it('should return the first argument if it is smaller than the second one', () => {
+            // Given a list smaller than another
+            const smaller: number[] = [1];
+            const greater: number[] = [2];
+            // When taking the min
+            const result: ReadonlyArray<number> = ArrayUtils.min(smaller, greater);
+            // Then it should take the smallest
+            expect(result).toEqual(smaller);
+        });
+        it('should return the second argument if it is smaller than the first one', () => {
+            // Given a list smaller than another
+            const smaller: number[] = [1];
+            const greater: number[] = [2];
+            // When taking the min
+            const result: ReadonlyArray<number> = ArrayUtils.min(greater, smaller);
+            // Then it should take the smallest
+            expect(result).toEqual(smaller);
+        });
+    });
+
+    describe('max', () => {
+        it('should return the first argument if it is greater than the second one', () => {
+            // Given a list greater than another
+            const smaller: number[] = [1];
+            const greater: number[] = [2];
+            // When taking the max
+            const result: ReadonlyArray<number> = ArrayUtils.max(smaller, greater);
+            // Then it should take the smallest
+            expect(result).toEqual(greater);
+        });
+        it('should return the second argument if it is greater than the first one', () => {
+            // Given a list greater than another
+            const smaller: number[] = [1];
+            const greater: number[] = [2];
+            // When taking the max
+            const result: ReadonlyArray<number> = ArrayUtils.max(greater, smaller);
+            // Then it should take the smallest
+            expect(result).toEqual(greater);
+        });
+    });
+});
+
diff --git a/src/app/utils/tests/Combinatorics.spec.ts b/lib/src/tests/Combinatorics.spec.ts
similarity index 100%
rename from src/app/utils/tests/Combinatorics.spec.ts
rename to lib/src/tests/Combinatorics.spec.ts
diff --git a/src/app/utils/tests/Comparable.spec.ts b/lib/src/tests/Comparable.spec.ts
similarity index 100%
rename from src/app/utils/tests/Comparable.spec.ts
rename to lib/src/tests/Comparable.spec.ts
diff --git a/lib/src/tests/Encoder.spec.ts b/lib/src/tests/Encoder.spec.ts
new file mode 100644
index 000000000..763b1b71d
--- /dev/null
+++ b/lib/src/tests/Encoder.spec.ts
@@ -0,0 +1,94 @@
+/* eslint-disable max-lines-per-function */
+import { ArrayUtils } from '../ArrayUtils';
+import { ComparableObject } from '../Comparable';
+import { Encoder, EncoderTestUtils } from '../Encoder';
+import { JSONValueWithoutArray } from '../JSON';
+import { Pair } from './Pair.spec';
+
+class Triplet implements ComparableObject {
+    public constructor(public elements: [number, number, number]) {
+    }
+
+    public equals(other: Triplet): boolean {
+        return ArrayUtils.equals(this.elements, other.elements);
+    }
+}
+
+describe('Encoder', () => {
+
+    describe('fromFunction', () => {
+        it('should provide a bijective encoder', () => {
+            function encode(v: number): JSONValueWithoutArray {
+                return v;
+            }
+            function decode(v: JSONValueWithoutArray): number {
+                return v as number;
+            }
+            const encoder: Encoder<number> = Encoder.fromFunctions(encode, decode);
+            EncoderTestUtils.expectToBeBijective(encoder, 42);
+        });
+    });
+
+    describe('identity', () => {
+        it('should provide a bijective encoder', () => {
+            const encoder: Encoder<number> = Encoder.identity();
+            EncoderTestUtils.expectToBeBijective(encoder, 42);
+        });
+    });
+
+    describe('constant', () => {
+        it('should provide a bijective encoder', () => {
+            const encoder: Encoder<number> = Encoder.constant(42, 42);
+            EncoderTestUtils.expectToBeBijective(encoder, 42);
+        });
+    });
+
+    describe('tuple', () => {
+        const numberEncoder: Encoder<number> = Encoder.identity<number>();
+
+        const pairEncoder: Encoder<Pair> = Encoder.tuple(
+            [numberEncoder, numberEncoder],
+            (pair: Pair): [number, number] => [pair.first, pair.second],
+            (fields: [number, number]): Pair => new Pair(fields[0], fields[1]));
+
+
+        const tripletEncoder: Encoder<Triplet> =
+            Encoder.tuple(
+                [numberEncoder, numberEncoder, numberEncoder],
+                (move: Triplet): [number, number, number] => move.elements,
+                (fields: [number, number, number]): Triplet => new Triplet(fields));
+
+        it('should provide a bijective encoder', () => {
+            EncoderTestUtils.expectToBeBijective(pairEncoder, new Pair(0, 2));
+            EncoderTestUtils.expectToBeBijective(tripletEncoder, new Triplet([0, 3, 4]));
+        });
+    });
+
+    describe('disjunction', () => {
+        const encoder1: Encoder<number> = Encoder.identity<number>();
+        function is1(value : number | boolean): value is number {
+            return typeof(value) === 'number';
+        }
+        const encoder2: Encoder<boolean> = Encoder.identity<boolean>();
+        function is2(value : number | boolean): value is boolean {
+            return typeof(value) === 'boolean';
+        }
+        const encoder: Encoder<number | boolean> = Encoder.disjunction([is1, is2], [encoder1, encoder2]);
+
+        it('should provide a bijective encoder', () => {
+            const disjunctedValues: (number | boolean)[] = [0, 1, 3, true, false];
+
+            for (const disjunctedValue of disjunctedValues) {
+                EncoderTestUtils.expectToBeBijective(encoder, disjunctedValue);
+            }
+        });
+    });
+
+    describe('list', () => {
+        it('should provide a bijective encoder', () => {
+            const baseEncoder: Encoder<number> = Encoder.identity();
+            const encoder: Encoder<Array<number>> = Encoder.list(baseEncoder);
+            EncoderTestUtils.expectToBeBijective(encoder, [1, 2, 3]);
+        });
+    });
+});
diff --git a/lib/src/tests/JSON.spec.ts b/lib/src/tests/JSON.spec.ts
new file mode 100644
index 000000000..4fe564bea
--- /dev/null
+++ b/lib/src/tests/JSON.spec.ts
@@ -0,0 +1,15 @@
+import { isJSONPrimitive } from '../JSON';
+
+describe('isJSONPrimitive', () => {
+    it('should return true for all types of JSON primitives', () => {
+        expect(isJSONPrimitive('foo')).toBeTrue();
+        expect(isJSONPrimitive(42)).toBeTrue();
+        expect(isJSONPrimitive(true)).toBeTrue();
+        expect(isJSONPrimitive(null)).toBeTrue();
+    });
+    it('should return false for non-JSON primitives', () => {
+        expect(isJSONPrimitive([1, 2, 3])).toBeFalse();
+        expect(isJSONPrimitive({})).toBeFalse();
+        expect(isJSONPrimitive(undefined)).toBeFalse(); // undefined is not valid in JSON!
+    });
+});
diff --git a/src/app/utils/tests/MGPFallible.spec.ts b/lib/src/tests/MGPFallible.spec.ts
similarity index 82%
rename from src/app/utils/tests/MGPFallible.spec.ts
rename to lib/src/tests/MGPFallible.spec.ts
index 9d47836a7..a809b8855 100644
--- a/src/app/utils/tests/MGPFallible.spec.ts
+++ b/lib/src/tests/MGPFallible.spec.ts
@@ -1,76 +1,93 @@
 /* eslint-disable max-lines-per-function */
-import { MGPFallible } from '../MGPFallible';
+import { MGPFallible, MGPFallibleTestUtils } from '../MGPFallible';
 import { MGPOptional } from '../MGPOptional';

-export class MGPFallibleTestUtils {
-
-    public static expectToBeSuccess<T>(fallible: MGPFallible<T>, value: T): void {
-        expect(fallible.isSuccess()).toBeTrue();
-        expect(fallible.get()).toBe(value);
-    }
-
-    public static expectToBeFailure<T>(fallible: MGPFallible<T>, reason: string): void {
-        expect(fallible.isFailure()).toBeTrue();
-        expect(fallible.getReason()).toBe(reason);
-    }
-}
-
-
 describe('MGPFallible', () => {

     describe('success', () => {
         const value: MGPFallible<number> = MGPFallible.success(42);
+
         it('should create a success value', () => {
             expect(value.isSuccess()).toBeTrue();
             expect(value.isFailure()).toBeFalse();
         });
+
         it('should have value accessible with get', () => {
             expect(value.get()).toBe(42);
         });
+
         it('should throw when accessing the failure reason', () => {
             expect(() => value.getReason())
                 .toThrowError('Cannot get failure reason from a success');
         });
+
         it('should convert to an optional with the same value', () => {
             expect(value.toOptional()).toEqual(MGPOptional.of(42));
         });
+
         it('should extract the passed value with getReasonOr', () => {
             expect(value.getReasonOr('foo')).toBe('foo');
         });
+
         it('should have a well-defined equality', () => {
             expect(value.equals(value)).toBeTrue();
             expect(value.equals(MGPFallible.success(41))).toBeFalse();
             expect(value.equals(MGPFallible.failure('foo'))).toBeFalse();
         });
+
         it('should be convertible to string', () => {
             expect(value.toString()).toBe('MGPFallible.success(42)');
         });
     });
     describe('failure', () => {
         const value: MGPFallible<number> = MGPFallible.failure('reason');
+
         it('should create a failure value', () => {
             expect(value.isSuccess()).toBeFalse();
             expect(value.isFailure()).toBeTrue();
         });
+
         it('should throw when accessing value with get', () => {
             expect(() => value.get()).toThrowError('Value is absent from failure, with the following reason: reason');
         });
+
         it('should contain the failure reason', () => {
             expect(value.getReason()).toBe('reason');
         });
+
         it('should convert to an empty optional', () => {
             expect(value.toOptional()).toEqual(MGPOptional.empty());
         });
+
         it('should extract the reason with getReasonOr', () => {
             expect(value.getReasonOr('foo')).toBe('reason');
         });
+
         it('should have a well-defined equality', () => {
             expect(value.equals(value)).toBeTrue();
             expect(value.equals(MGPFallible.success(41))).toBeFalse();
             expect(value.equals(MGPFallible.failure('other reason'))).toBeFalse();
         });
+
         it('should give the reason with toString', () => {
             expect(value.toString()).toBe('MGPFallible.failure(reason)');
         });
+
+        it('should be convertible to other fallible type', () => {
+            if (value.isFailure()) {
+                expect(value.toOtherFallible<string>()).toEqual(value);
+            }
+        });
+    });
+});
+
+
+describe('MGPFallibleTestUtils', () => {
+    it('should detect success', () => {
+        MGPFallibleTestUtils.expectToBeSuccess(MGPFallible.success(42), 42);
+    });
+
+    it('should detect failure', () => {
+        MGPFallibleTestUtils.expectToBeFailure(MGPFallible.failure('error'), 'error');
     });
 });
diff --git a/lib/src/tests/MGPMap.spec.ts b/lib/src/tests/MGPMap.spec.ts
new file mode 100644
index 000000000..be7fbc1d8
--- /dev/null
+++ b/lib/src/tests/MGPMap.spec.ts
@@ -0,0 +1,228 @@
+/* eslint-disable max-lines-per-function */
+import { MGPMap, ReversibleMap } from '../MGPMap';
+import { MGPOptional } from '../MGPOptional';
+import { MGPSet } from '../MGPSet';
+
+describe('MGPMap', () => {
+
+    describe('from', () => {
+        it('should construct a map from a record with string keys', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ a: 1, b: 2 });
+            expect(map.size()).toBe(2);
+            expect(map.get('a').get()).toBe(1);
+            expect(map.get('b').get()).toBe(2);
+        });
+    });
+
+    describe('getAnyPair', () => {
+        it('should return an element from the map', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ salut: 5 });
+            const element: number = map.getAnyPair().get().value;
+            expect(element).toBe(5);
+        });
+
+        it('should not return anything if the map is empty', () => {
+            const emptyMap: MGPMap<string, number> = new MGPMap();
+            expect(emptyMap.getAnyPair().isAbsent()).toBeTrue();
+        });
+    });
+
+    describe('forEach', () => {
+        it('should iterate over all elements of the map', () => {
+            // Given a map with elements
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1, second: 2 });
+
+            // When calling forEach
+            let sum: number = 0;
+            map.forEach((item: {key: string, value: number}) => sum += item.value);
+
+            // Then all elements should have been iterated over
+            expect(sum).toBe(3);
+        });
+    });
+
+    describe('putAll', () => {
+        it('should concatenate two maps, erasing the overlapping content on the receiver', () => {
+            const receiver: MGPMap<string, number> = MGPMap.from({ first: 0, second: 1 });
+
+            const giver: MGPMap<string, number> = MGPMap.from({ first: 1, third: 3 });
+            receiver.putAll(giver);
+
+            const expectedSum: MGPMap<string, number> = MGPMap.from({ first: 1, second: 1, third: 3 });
+            expect(receiver).toEqual(expectedSum);
+        });
+    });
+
+    describe('put', () => {
+        it('should replace value if key value was already present', () => {
+            const map: MGPMap<string, string> = MGPMap.from({ oui: 'yes' });
+            expect(() => map.put('oui', 'DA')).not.toThrow();
+            expect(map.get('oui')).toEqual(MGPOptional.of('DA'));
+        });
+    });
+
+    describe('containsKey', () => {
+        it('should return true if there is a matching key', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ a: 1 });
+            expect(map.containsKey('a')).toBeTrue();
+        });
+
+        it('should return false if there is no matching key', () => {
+            const map: MGPMap<string, number> = new MGPMap();
+            expect(map.containsKey('a')).toBeFalse();
+        });
+    });
+
+    describe('size', () => {
+        it('should return the size of the set', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ a: 1, b: 2 });
+            expect(map.size()).toBe(2);
+        });
+    });
+
+    describe('listKeys', () => {
+        it('should return all the keys', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1, second: 2 });
+            expect(map.listKeys()).toEqual(['first', 'second']);
+        });
+    });
+
+    describe('listValues', () => {
+        it('should return all the values', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1, second: 2 });
+            expect(map.listValues()).toEqual([1, 2]);
+        });
+    });
+
+    describe('getKeySet', () => {
+        it('should return all the keys in a set', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1, second: 2 });
+            expect(map.getKeySet()).toEqual(new MGPSet(['first', 'second']));
+        });
+    });
+
+    describe('filter', () => {
+        it('should keep only elements for which the predicate returns true', () => {
+            function pred(_key: string, value: number): boolean {
+                return value >= 2;
+            }
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1, second: 2 });
+            const expectedMap: MGPMap<string, number> = MGPMap.from({ second: 2 });
+            expect(map.filter(pred)).toEqual(expectedMap);
+        });
+    });
+
+    describe('replace', () => {
+        it('should replace existing value', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1 });
+            map.replace('first', 0);
+
+            expect(map.get('first')).toEqual(MGPOptional.of(0));
+        });
+
+        it('should throw when value not found', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 1 });
+
+            expect(() => map.replace('firstZUUU', 0)).toThrowError('No Value to replace for key firstZUUU!');
+        });
+    });
+
+    describe('set', () => {
+        let map: MGPMap<string, string>;
+        beforeEach(() => map = MGPMap.from({ oui: 'yes' }));
+
+        it('should add the value to the set', () => {
+            expect(() => map.set('non', 'no')).not.toThrow();
+            expect(map.get('non').get()).toBe('no');
+        });
+
+        it('should throw if key value was already present', () => {
+            expect(() => map.set('oui', 'si')).toThrowError('Key oui already exists in map!');
+        });
+
+        it('should throw when called on immutable set', () => {
+            map.makeImmutable();
+            expect(() => map.set('non', 'no')).toThrowError('Assertion failure: Cannot call set on immutable map!');
+        });
+    });
+
+    describe('delete', () => {
+        let map: MGPMap<string, number>;
+        beforeEach(() => map = MGPMap.from({ first: 0 }));
+
+        it('should delete element with the corresponding key', () => {
+            map.delete('first');
+            expect(map.get('first')).toEqual(MGPOptional.empty());
+        });
+
+        it('should throw when unexisting key passed', () => {
+            expect(() => map.delete('second')).toThrowError('No value to delete for key "second"!');
+        });
+
+        it('should throw when called on immutable set', () => {
+            map.makeImmutable();
+            expect(() => map.delete('first')).toThrowError('Assertion failure: Cannot call delete on immutable map!');
+        });
+    });
+
+    describe('getCopy', () => {
+        let map: MGPMap<string, number>;
+        beforeEach(() => map = MGPMap.from({ first: 0, second: 0 }));
+
+        it('should make equal copy when mutable', () => {
+            const copy: MGPMap<string, number> = map.getCopy();
+            expect(copy).toEqual(map);
+        });
+
+        it('should not be the same physical copy when mutable', () => {
+            const copy: MGPMap<string, number> = map.getCopy();
+            map.set('third', 2);
+            expect(copy).not.toEqual(map);
+        });
+
+        it('should equal but mutable when original was immutable', () => {
+            map.makeImmutable();
+            const copy: MGPMap<string, number> = map.getCopy();
+
+            expect(copy).not.toEqual(map); // due to immutability
+            copy.makeImmutable();
+            expect(copy).toEqual(map);
+        });
+    });
+
+    describe('equals', () => {
+        it('should detect maps with distinct keys as different', () => {
+            const map1: MGPMap<string, number> = MGPMap.from({ first: 0 });
+            const map2: MGPMap<string, number> = MGPMap.from({ second: 1 });
+            expect(map1.equals(map2)).toBeFalse();
+        });
+
+        it('should detect map with same keys but distinct values as different', () => {
+            const map1: MGPMap<string, number> = MGPMap.from({ first: 0 });
+            const map2: MGPMap<string, number> = MGPMap.from({ first: 1 });
+            expect(map1.equals(map2)).toBeFalse();
+        });
+
+        it('should detect the same map as equal', () => {
+            const map: MGPMap<string, number> = MGPMap.from({ first: 0 });
+            expect(map.equals(map)).toBeTrue();
+        });
+    });
+});
+
+describe('ReversibleMap', () => {
+    describe('reverse', () => {
+        it('should return the map with values as keys and keys as values', () => {
+            const map: ReversibleMap<string, string> = new ReversibleMap();
+            map.set('rater', 'miss');
+            map.set('manquer', 'miss');
+            map.set('non', 'no');
+            const reversed: ReversibleMap<string, MGPSet<string>> = map.reverse();
+
+            const expectedReversed: ReversibleMap<string, MGPSet<string>> = new ReversibleMap();
+            expectedReversed.set('miss', new MGPSet(['rater', 'manquer']));
+            expectedReversed.set('no', new MGPSet(['non']));
+            expect(reversed).toEqual(expectedReversed);
+        });
+    });
+});
diff --git a/lib/src/tests/MGPOptional.spec.ts b/lib/src/tests/MGPOptional.spec.ts
new file mode 100644
index 000000000..b197ce51a
--- /dev/null
+++ b/lib/src/tests/MGPOptional.spec.ts
@@ -0,0 +1,111 @@
+/* eslint-disable max-lines-per-function */
+import { Encoder, EncoderTestUtils } from '../Encoder';
+import { MGPOptional } from '../MGPOptional';
+
+describe('MGPOptional', () => {
+
+    describe('of', () => {
+        it('should construct a non empty optional', () => {
+            expect(MGPOptional.of(42).isPresent()).toBeTrue();
+        });
+    });
+
+    describe('ofNullable', () => {
+        it('should construct a non empty optional if the value is not null', () => {
+            expect(MGPOptional.ofNullable(42).isPresent()).toBeTrue();
+        });
+
+        it('should construct an empty optional if the value is null', () => {
+            expect(MGPOptional.ofNullable(null).isPresent()).toBeFalse();
+        });
+    });
+
+    describe('empty', () => {
+        it('should construct the empty optional', () => {
+            expect(MGPOptional.empty().isPresent()).toBeFalse();
+        });
+    });
+
+    describe('getEncoder', () => {
+        it('should provide a bijective encoder', () => {
+            const encoder: Encoder<MGPOptional<number>> = MGPOptional.getEncoder(Encoder.identity());
+            EncoderTestUtils.expectToBeBijective(encoder, MGPOptional.empty());
+            EncoderTestUtils.expectToBeBijective(encoder, MGPOptional.of(5));
+        });
+    });
+
+    describe('get', () => {
+        it('should return the value if there is one', () => {
+            expect(MGPOptional.of(42).get()).toBe(42);
+        });
+
+        it('should throw if empty', () => {
+            const optional: MGPOptional<string> = MGPOptional.empty();
+            expect(() => optional.get()).toThrowError('Value is absent');
+        });
+    });
+
+    describe('getOrElse', () => {
+        it('should return the value if there is one', () => {
+            expect(MGPOptional.of(42).getOrElse(0)).toBe(42);
+        });
+
+        it('should return the other value if there is no value inside', () => {
+            expect(MGPOptional.empty().getOrElse(0)).toBe(0);
+        });
+    });
+
+    describe('equals', () => {
+        it('should consider the same optional equal', () => {
+            const optional: MGPOptional<number> = MGPOptional.of(42);
+            expect(optional.equals(optional)).toBeTrue();
+        });
+
+        it('should consider different optionals with values not equal', () => {
+            const optional: MGPOptional<number> = MGPOptional.of(42);
+            const otherOptional: MGPOptional<number> = MGPOptional.of(41);
+            const empty: MGPOptional<number> = MGPOptional.empty();
+            expect(optional.equals(otherOptional)).toBeFalse();
+            expect(optional.equals(empty)).toBeFalse();
+        });
+
+        it('should consider empty different from a value', () => {
+            const optional: MGPOptional<number> = MGPOptional.empty();
+            const otherOptional: MGPOptional<number> = MGPOptional.of(42);
+            expect(optional.equals(otherOptional)).toBeFalse();
+        });
+    });
+
+    describe('equalsValue', () => {
+        it('should compare an optional with a direct value', () => {
+            const optional: MGPOptional<number> = MGPOptional.of(42);
+            expect(optional.equalsValue(42)).toBeTrue();
+        });
+    });
+
+    describe('toString', () => {
+        it('should succeed for empty values', () => {
+            expect(MGPOptional.empty<string>().toString()).toBe('MGPOptional.empty()');
+        });
+
+        it('should include value for non-empty values', () => {
+            expect(MGPOptional.of('foo').toString()).toBe('MGPOptional.of(foo)');
+        });
+    });
+
+    describe('map', () => {
+        function addOne(x: number): number {
+            return x + 1;
+        }
+
+        it('should not do anything on empty', () => {
+            const optional: MGPOptional<number> = MGPOptional.empty();
+            expect(optional.map(addOne)).toEqual(MGPOptional.empty());
+        });
+
+        it('should apply the function inside the optional', () => {
+            const optional: MGPOptional<number> = MGPOptional.of(41);
+            expect(optional.map(addOne)).toEqual(MGPOptional.of(42));
+        });
+    });
+});
diff --git a/lib/src/tests/MGPSet.spec.ts b/lib/src/tests/MGPSet.spec.ts
new file mode 100644
index 000000000..cccbeccb4
--- /dev/null
+++ b/lib/src/tests/MGPSet.spec.ts
@@ -0,0 +1,264 @@
+/* eslint-disable max-lines-per-function */
+import { MGPOptional } from '../MGPOptional';
+import { MGPSet } from '../MGPSet';
+import { Pair } from './Pair.spec';
+
+describe('MGPSet', () => {
+
+    it('should create an empty set when not provided with argument', () => {
+        const set: MGPSet<number> = new MGPSet<number>();
+        expect(set.size()).toBe(0);
+    });
+
+    describe('equals', () => {
+
+        it('should test size', () => {
+            const one: MGPSet<string> = new MGPSet(['salut']);
+            const two: MGPSet<string> = new MGPSet(['salut', 'kutentak']);
+            expect(one.equals(two)).toBeFalse();
+        });
+
+        it('should not care about order', () => {
+            const one: MGPSet<string> = new MGPSet(['un', 'deux']);
+            const two: MGPSet<string> = new MGPSet(['deux', 'un']);
+            expect(one.equals(two)).toBeTrue();
+        });
+
+        it('should detect inequality', () => {
+            const one: MGPSet<string> = new MGPSet(['un', 'deux']);
+            const two: MGPSet<string> = new MGPSet(['deux', 'trois']);
+            expect(one.equals(two)).toBeFalse();
+        });
+    });
+
+    describe('toString', () => {
+
+        it('should show the set as a string', () => {
+            const a: Pair = new Pair(0, 0);
+            const b: Pair = new Pair(1, 1);
+            const set: MGPSet<Pair> = new MGPSet([a, b]);
+            expect(set.toString()).toBe('[' + a.toString() + ', ' + b.toString() + ']');
+        });
+
+        it('should show null when it is in the set', () => {
+            const set: MGPSet<Pair | null> = new MGPSet([null]);
+            expect(set.toString()).toBe('[null]');
+        });
+    });
+
+    describe('add', () => {
+
+        it('should return true when adding element', () => {
+            const set: MGPSet<Pair> = new MGPSet([new Pair(0, 0), new Pair(1, 1)]);
+            expect(set.add(new Pair(2, 2))).toBeTrue();
+        });
+
+        it('should not add duplicate elements, and return false instead', () => {
+            const set: MGPSet<Pair> = new MGPSet([new Pair(0, 0), new Pair(1, 1)]);
+            expect(set.add(new Pair(0, 0))).toBeFalse();
+            expect(set.size()).toBe(2);
+        });
+    });
+
+    describe('remove', () => {
+
+        it('should remove element from the set and return true', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.remove(2)).toBeTrue();
+            expect(set.equals(new MGPSet([1]))).toBeTrue();
+        });
+
+        it('should preserve set and return false if element is not contained', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.remove(3)).toBeFalse();
+            expect(set.equals(new MGPSet([1, 2]))).toBeTrue();
+        });
+    });
+
+    describe('union', () => {
+        it('should return the elements present in either set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            const otherSet: MGPSet<number> = new MGPSet([2, 3]);
+            const union: MGPSet<number> = set.union(otherSet);
+            expect(union).toEqual(new MGPSet([1, 2, 3]));
+        });
+    });
+
+    describe('contains', () => {
+        const set: MGPSet<number> = new MGPSet([1, 2]);
+        it('should return true when the set contains the element', () => {
+            expect(set.contains(1)).toBeTrue();
+        });
+        it('should return false when the set does not contain the element', () => {
+            expect(set.contains(3)).toBeFalse();
+        });
+    });
+
+    describe('size', () => {
+        it('should return the size of the set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.size()).toBe(2);
+        });
+    });
+
+    describe('toList', () => {
+
+        it('should provide a copy of the set and disallow set modifications', () => {
+            const originalData: Pair[] = [new Pair(0, 0), new Pair(1, 1)];
+            const set: MGPSet<Pair> = new MGPSet(originalData);
+            const assigned: MGPSet<Pair> = set;
+            const copiedData: Pair[] = set.toList();
+
+            assigned.add(new Pair(2, 2));
+
+            expect(set.equals(assigned)).toBeTrue();
+            expect(copiedData).toEqual(originalData);
+        });
+    });
+
+    describe('getAnyElement', () => {
+
+        it('should return an element from the set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            const element: number = set.getAnyElement().get();
+            expect(element === 1 || element === 2).toBeTrue();
+        });
+
+        it('should not return anything if the set is empty', () => {
+            const emptySet: MGPSet<number> = new MGPSet();
+            expect(emptySet.getAnyElement().isAbsent()).toBeTrue();
+        });
+    });
+
+    describe('isEmpty', () => {
+
+        it('should return true for the empty set', () => {
+            const set: MGPSet<number> = new MGPSet();
+            expect(set.isEmpty()).toBeTrue();
+        });
+
+        it('should return false for any non-empty set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.isEmpty()).toBeFalse();
+        });
+    });
+
+    describe('hasElements', () => {
+
+        it('should return false for the empty set', () => {
+            const set: MGPSet<number> = new MGPSet();
+            expect(set.hasElements()).toBeFalse();
+        });
+
+        it('should return true for any non-empty set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.hasElements()).toBeTrue();
+        });
+    });
+
+    describe('map', () => {
+
+        it('should iterate over the elements of the set', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            function increment(x: number): number {
+                return x+1;
+            }
+            expect(set.map(increment).equals(new MGPSet([2, 3]))).toBeTrue();
+        });
+    });
+
+    describe('flatMap', () => {
+
+        it('should iterate over the elements of the set, and then flatten it again', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            function makeTwo(x: number): MGPSet<number> {
+                return new MGPSet([x, x+1]);
+            }
+            expect(set.flatMap(makeTwo).equals(new MGPSet([1, 2, 3]))).toBeTrue();
+        });
+    });
+
+    describe('filter', () => {
+        it('should keep only elements for which the predicate returns true', () => {
+            function pred(value: number): boolean {
+                return value >= 2;
+            }
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            expect(set.filter(pred)).toEqual(new MGPSet([2]));
+        });
+    });
+
+    describe('findAnyCommonElement', () => {
+        it('should return a common element if there is one', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            const otherSet: MGPSet<number> = new MGPSet([2, 3]);
+            const commonElement: MGPOptional<number> = MGPOptional.of(2);
+            expect(set.findAnyCommonElement(otherSet)).toEqual(commonElement);
+        });
+        it('should return empty if there is no common element', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            const otherSet: MGPSet<number> = new MGPSet([3, 4]);
+            expect(set.findAnyCommonElement(otherSet)).toEqual(MGPOptional.empty());
+        });
+    });
+
+    describe('intersection', () => {
+        it('should return the elements present in both sets', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2]);
+            const otherSet: MGPSet<number> = new MGPSet([2, 3]);
+            const intersection: MGPSet<number> = set.intersection(otherSet);
+            expect(intersection).toEqual(new MGPSet([2]));
+        });
+    });
+
+    describe('iterator', () => {
+        it('should iterate over all set values', () => {
+            const set: MGPSet<number> = new MGPSet([1, 2, 3]);
+            let sum: number = 0;
+            for (const element of set) {
+                sum += element;
+            }
+            expect(sum).toBe(6);
+        });
+    });
+
+    describe('getMissingElement', () => {
+
+        it('should return a missing element between two sets that have no intersection', () => {
+            // Given two set, one with one element, the other empty
+            const fullSet: MGPSet<number> = new MGPSet([0]);
+            const emptySet: MGPSet<number> = new MGPSet([]);
+
+            // When calling getMissingElement on the empty one
+            const missingElement: MGPOptional<number> = emptySet.getMissingElementFrom(fullSet);
+
+            // Then it should return the missing element
+            expect(missingElement).toEqual(MGPOptional.of(0));
+        });
+
+        it('should return a missing element between two sets that have an intersection', () => {
+            // Given two set that have some intersection, but also an element not in common
+            const fullSet: MGPSet<number> = new MGPSet([1, 2, 3]);
+            const missingElementSet: MGPSet<number> = new MGPSet([1, 2]);
+
+            // When calling getMissingElement on the one missing an element
+            const missingElement: MGPOptional<number> = missingElementSet.getMissingElementFrom(fullSet);
+
+            // Then it should return the missing element
+            expect(missingElement).toEqual(MGPOptional.of(3));
+        });
+
+        it('should return empty when nothing is missing', () => {
+            // Given two set, one with one element, the other empty
+            const fullSet: MGPSet<number> = new MGPSet([0]);
+            const emptySet: MGPSet<number> = new MGPSet([]);
+
+            // When calling getMissingElement on the full one
+            const missingElement: MGPOptional<number> = fullSet.getMissingElementFrom(emptySet);
+
+            // Then it should appear than the full set miss nothing
+            expect(missingElement).toEqual(MGPOptional.empty());
+        });
+
+    });
+});
diff --git a/src/app/utils/tests/MGPUniqueList.spec.ts b/lib/src/tests/MGPUniqueList.spec.ts
similarity index 78%
rename from src/app/utils/tests/MGPUniqueList.spec.ts
rename to lib/src/tests/MGPUniqueList.spec.ts
index 800653cda..b7b78a8ff 100644
--- a/src/app/utils/tests/MGPUniqueList.spec.ts
+++ b/lib/src/tests/MGPUniqueList.spec.ts
@@ -1,54 +1,64 @@
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
-import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { MGPUniqueList } from '../MGPUniqueList';
+import { Utils } from '../Utils';

 describe('MGPUniqueList', () => {
+
     describe('equals', () => {
+
         it('should test size', () => {
             const one: MGPUniqueList<string> = new MGPUniqueList(['salut']);
             const two: MGPUniqueList<string> = new MGPUniqueList(['salut', 'kutentak']);
             expect(one.equals(two)).toBeFalse();
         });
+
         it('should care about order', () => {
             const one: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             const two: MGPUniqueList<string> = new MGPUniqueList(['deux', 'un']);
             expect(one.equals(two)).toBeFalse();
         });
+
         it('should detect inequality', () => {
             const one: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             const two: MGPUniqueList<string> = new MGPUniqueList(['deux', 'trois']);
             expect(one.equals(two)).toBeFalse();
         });
+
         it('should detect equality', () => {
             const one: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             const two: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             expect(one.equals(two)).toBeTrue();
         });
     });
+
     describe('get', () => {
+
         it('should get nth element', () => {
             const mySet: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             expect(mySet.get(0)).toBe('un');
             expect(mySet.get(1)).toBe('deux');
         });
+
         it('should fail if trying an out of bounds access', () => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callThrough();
             const mySet: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             expect(() => mySet.get(2)).toThrowError('Assertion failure: MGPUniqueList: index out of bounds: 2');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'MGPUniqueList: index out of bounds: 2');
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', 'MGPUniqueList: index out of bounds: 2', undefined);
         });
     });
+
     describe('getFromEnd', () => {
+
         it('should get nth element from the end', () => {
             const mySet: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             expect(mySet.getFromEnd(0)).toBe('deux');
             expect(mySet.getFromEnd(1)).toBe('un');
         });
+
         it('should fail if trying an out of bounds access', () => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callThrough();
             const mySet: MGPUniqueList<string> = new MGPUniqueList(['un', 'deux']);
             expect(() => mySet.getFromEnd(2)).toThrowError('Assertion failure: MGPUniqueList: index (from end) out of bounds: 2');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'MGPUniqueList: index (from end) out of bounds: 2');
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', 'MGPUniqueList: index (from end) out of bounds: 2', undefined);
         });
     });
 });
diff --git a/lib/src/tests/MGPValidation.spec.ts b/lib/src/tests/MGPValidation.spec.ts
new file mode 100644
index 000000000..1ca09d32e
--- /dev/null
+++ b/lib/src/tests/MGPValidation.spec.ts
@@ -0,0 +1,51 @@
+/* eslint-disable max-lines-per-function */
+import { MGPFallible } from '../MGPFallible';
+import { MGPValidation, MGPValidationTestUtils } from '../MGPValidation';
+
+describe('MGPValidation', () => {
+
+    it('should throw when asking MGPValidation.SUCCESS.getReason()', () => {
+        const expectedError: string = 'Cannot get failure reason from a success';
+        expect(() => MGPValidation.SUCCESS.getReason()).toThrowError(expectedError);
+    });
+
+    describe('ofFallible', () => {
+        it('should return MGPValidation.SUCCESS when given a success', () => {
+            // Given a successful MGPFallible
+            const fallible: MGPFallible<number> = MGPFallible.success(42);
+
+            // When converting it to a MGPValidation
+            const validation: MGPValidation = MGPValidation.ofFallible(fallible);
+
+            // Then it should be MGPValidation.SUCCESS
+            expect(validation).toBe(MGPValidation.SUCCESS);
+        });
+
+        it('should return a failure when given a failed fallible', () => {
+            const fallible: MGPFallible<number> = MGPFallible.failure('I am a failure!');
+            const validation: MGPValidation = MGPValidation.ofFallible(fallible);
+            expect(validation).toEqual(MGPValidation.failure('I am a failure!'));
+        });
+    });
+
+    describe('failure', () => {
+        it('should construct a failure', () => {
+            expect(MGPValidation.failure('error').isFailure()).toBeTrue();
+        });
+    });
+});
+
+describe('MGPValidationTestUtils', () => {
+    it('should validate success with expectToBeSuccess', () => {
+        MGPValidationTestUtils.expectToBeSuccess(MGPValidation.SUCCESS);
+    });
+
+    it('should validate success with expectToBeSuccess and a context', () => {
+        MGPValidationTestUtils.expectToBeSuccess(MGPValidation.SUCCESS, 'this should be a success');
+    });
+
+    it('should validate failure with expectToBeFailure', () => {
+        const failure: MGPValidation = MGPValidation.failure('I am a failure!');
+        MGPValidationTestUtils.expectToBeFailure(failure, 'I am a failure!');
+    });
+});
diff --git a/src/app/utils/tests/MathUtils.spec.ts b/lib/src/tests/MathUtils.spec.ts
similarity index 99%
rename from src/app/utils/tests/MathUtils.spec.ts
rename to lib/src/tests/MathUtils.spec.ts
index 7b896a13a..4c469493d 100644
--- a/src/app/utils/tests/MathUtils.spec.ts
+++ b/lib/src/tests/MathUtils.spec.ts
@@ -9,6 +9,7 @@ describe('MathUtils', () => {
             expect(MathUtils.gcd(15, 3)).toBe(3);
             expect(MathUtils.gcd(3, 15)).toBe(3);
         });
+
         it('should compute a positive gcd when used with negative numbers', () => {
             expect(MathUtils.gcd(-5, 3)).toBe(1);
             expect(MathUtils.gcd(-15, 3)).toBe(3);
diff --git a/lib/src/tests/OptimizedSet.spec.ts b/lib/src/tests/OptimizedSet.spec.ts
new file mode 100644
index 000000000..8b1378917
--- /dev/null
+++ b/lib/src/tests/OptimizedSet.spec.ts
@@ -0,0 +1 @@
+
diff --git a/lib/src/tests/Pair.spec.ts b/lib/src/tests/Pair.spec.ts
new file mode 100644
index 000000000..2d7d5b610
--- /dev/null
+++ b/lib/src/tests/Pair.spec.ts
@@ -0,0 +1,15 @@
+import { ComparableObject } from '../Comparable';
+
+export class Pair implements ComparableObject {
+
+    public constructor(public readonly first: number, public readonly second: number) {
+    }
+
+    public equals(other: Pair): boolean {
+        return this.first === other.first && this.second === other.second;
+    }
+
+    public toString(): string {
+        return `(${this.first}, ${this.second})`;
+    }
+}
diff --git a/src/app/utils/tests/Sets.spec.ts b/lib/src/tests/Sets.spec.ts
similarity index 72%
rename from src/app/utils/tests/Sets.spec.ts
rename to lib/src/tests/Sets.spec.ts
index 02f63135d..681e85c3a 100644
--- a/src/app/utils/tests/Sets.spec.ts
+++ b/lib/src/tests/Sets.spec.ts
@@ -1,17 +1,18 @@
 /* eslint-disable max-lines-per-function */
-import { Coord } from 'src/app/jscaip/Coord';
 import { Comparable, ComparableObject } from '../Comparable';
 import { Sets } from '../Sets';
+import { Pair } from './Pair.spec';

 describe('Sets', () => {

     it('should remove duplicate (with ComparableObject)', () => {
-        const withDuplicate: ComparableObject[] = [new Coord(0, 0), new Coord(0, 0), new Coord(1, 1)];
+        const withDuplicate: ComparableObject[] = [new Pair(0, 0), new Pair(0, 0), new Pair(1, 1)];

         const asSet: ComparableObject[] = Sets.toComparableObjectSet(withDuplicate);

-        expect(asSet).toEqual([new Coord(0, 0), new Coord(1, 1)]);
+        expect(asSet).toEqual([new Pair(0, 0), new Pair(1, 1)]);
     });
+
     it('should remove duplicate (with Comparable)', () => {
         const withDuplicate: Comparable[] = [1, 2, 1];

diff --git a/lib/src/tests/TestUtils.spec.ts b/lib/src/tests/TestUtils.spec.ts
new file mode 100644
index 000000000..7f484e2b4
--- /dev/null
+++ b/lib/src/tests/TestUtils.spec.ts
@@ -0,0 +1,14 @@
+/* eslint-disable max-lines-per-function */
+import { Utils } from '../Utils';
+import { TestUtils } from '../TestUtils';
+
+describe('TestUtils', () => {
+    describe('expectToThrowAndLog', () => {
+        it('should work with multiple invocations', () => {
+            TestUtils.expectToThrowAndLog(() => Utils.assert(false, 'failure'),
+                                          'failure');
+            TestUtils.expectToThrowAndLog(() => Utils.assert(false, 'failure'),
+                                          'failure');
+        });
+    });
+});
diff --git a/lib/src/tests/Utils.spec.ts b/lib/src/tests/Utils.spec.ts
new file mode 100644
index 000000000..a3f130a0f
--- /dev/null
+++ b/lib/src/tests/Utils.spec.ts
@@ -0,0 +1,76 @@
+/* eslint-disable max-lines-per-function */
+import { Utils } from '../Utils';
+
+describe('Utils', () => {
+
+    describe('expectToBe', () => {
+
+        it('should not fail if the value is as expected', () => {
+            expect(() => Utils.expectToBe(1, 1)).not.toThrowError();
+        });
+
+        it('should fail when the default case has a different value than expected', () => {
+            const value: number = 2;
+            expect(() => {
+                switch (value) {
+                    case 0:
+                        break;
+                    default:
+                        // we expect that value can only be 0 or 1
+                        Utils.expectToBe(value, 1);
+                        break;
+                }
+            }).toThrowError(`A default switch case did not observe the correct value, expected 1, but got 2 instead.`);
+        });
+
+        it('should use the message if it is passed', () => {
+            expect(() => Utils.expectToBe(1, 2, 'message')).toThrowError('message');
+        });
+    });
+
+    describe('expectToBeMultiple', () => {
+
+        it('should not fail if the value is as expected', () => {
+            expect(() => Utils.expectToBeMultiple(1, [0, 1])).not.toThrowError();
+        });
+
+        it('should fail when the default case has a different value than one of the expected values', () => {
+            const value: number = 2;
+            expect(() => {
+                switch (value) {
+                    default:
+                        // we expect that value can only be 0 or 1
+                        Utils.expectToBeMultiple(value, [0, 1]);
+                        break;
+                }
+            }).toThrowError(`A default switch case did not observe the correct value, expected a value among 0,1, but got 2 instead.`);
+        });
+    });
+
+    describe('getNonNullable', () => {
+
+        it('should fail if the value is null or undefined', () => {
+            expect(() => Utils.getNonNullable(null)).toThrowError('Expected value not to be null or undefined, but it was.');
+            expect(() => Utils.getNonNullable(undefined)).toThrowError('Expected value not to be null or undefined, but it was.');
+        });
+
+        it('should return the value if it is not null', () => {
+            expect(Utils.getNonNullable(42)).toBe(42);
+        });
+    });
+
+    describe('assert', () => {
+
+        it('should log error and throw when condition is false', () => {
+            spyOn(Utils, 'logError').and.callThrough();
+            expect(() => Utils.assert(false, 'error')).toThrowError('Assertion failure: error');
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', 'error', undefined);
+        });
+    });
+
+    describe('identity', () => {
+        it('should return its argument', () => {
+            expect(Utils.identity(5)).toBe(5);
+        });
+    });
+});
diff --git a/lib/tsconfig.json b/lib/tsconfig.json
new file mode 100644
index 000000000..719a5dc43
--- /dev/null
+++ b/lib/tsconfig.json
@@ -0,0 +1,12 @@
+{
+    "extends": "../tsconfig.json",
+    "compilerOptions": {
+        "module": "commonjs",
+        "rootDir": "./src",
+        "outDir": "./dist",
+        "declaration": true
+    },
+    "files": [],
+    "include": ["src/**/*.ts"],
+    "exclude": ["src/**/*.spec.ts"],
+}
diff --git a/package-lock.json b/package-lock.json
index 8ea7c06e6..60a0a0e0e 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -8,60 +8,74 @@
       "name": "EveryBoard",
       "version": "0.0.0",
       "dependencies": {
-        "@angular/animations": "^17.2.3",
-        "@angular/common": "^17.2.3",
-        "@angular/core": "^17.2.3",
-        "@angular/forms": "^17.2.3",
-        "@angular/platform-browser": "^17.2.3",
-        "@angular/platform-browser-dynamic": "^17.2.3",
-        "@angular/router": "^17.2.3",
+        "@angular/animations": "^17.1.0",
+        "@angular/common": "^17.1.0",
+        "@angular/core": "^17.1.0",
+        "@angular/fire": "^17.0.1",
+        "@angular/forms": "^17.1.0",
+        "@angular/platform-browser": "^17.1.0",
+        "@angular/platform-browser-dynamic": "^17.1.0",
+        "@angular/router": "^17.1.0",
         "@creativebulma/bulma-tooltip": "^1.2.0",
+        "@everyboard/lib": "file:lib",
         "@fortawesome/angular-fontawesome": "^0.14.1",
         "@fortawesome/fontawesome-svg-core": "^6.5.1",
         "@fortawesome/free-brands-svg-icons": "^6.5.1",
         "@fortawesome/free-solid-svg-icons": "^6.5.1",
         "async-mutex": "^0.4.1",
         "bulma": "^0.9.4",
-        "bulma-toast": "^2.4.4",
+        "bulma-toast": "^2.4.3",
         "bulmaswatch": "^0.8.1",
-        "core-js": "^3.36.0",
+        "core-js": "^3.35.0",
         "eslint-plugin-jasmine": "^4.1.3",
-        "firebase": "^10.8.1",
-        "firebase-tools": "^13.4.0",
+        "firebase": "^10.7.1",
+        "firebase-tools": "^13.0.3",
         "rxjs": "^7.8.1",
-        "zone.js": "^0.14.4"
+        "zone.js": "^0.14.3"
       },
       "devDependencies": {
-        "@angular-devkit/build-angular": "^17.2.2",
-        "@angular-eslint/builder": "^17.2.1",
-        "@angular-eslint/eslint-plugin": "^17.2.1",
-        "@angular-eslint/eslint-plugin-template": "^17.2.1",
-        "@angular-eslint/schematics": "^17.2.1",
-        "@angular-eslint/template-parser": "^17.2.1",
-        "@angular/cli": "^17.2.2",
-        "@angular/compiler": "^17.2.3",
-        "@angular/compiler-cli": "^17.2.3",
-        "@angular/localize": "^17.2.3",
+        "@angular-devkit/build-angular": "^17.1.0",
+        "@angular-eslint/builder": "^17.2.0",
+        "@angular-eslint/eslint-plugin": "^17.2.0",
+        "@angular-eslint/eslint-plugin-template": "^17.2.0",
+        "@angular-eslint/schematics": "^17.2.0",
+        "@angular-eslint/template-parser": "^17.2.0",
+        "@angular/cli": "^17.1.0",
+        "@angular/compiler": "^17.1.0",
+        "@angular/compiler-cli": "^17.1.0",
+        "@angular/localize": "^17.1.0",
         "@types/jasmine": "^5.1.4",
-        "angular-cli-ghpages": "^1.0.6",
+        "@typescript-eslint/eslint-plugin": "^6.19.0",
+        "@typescript-eslint/parser": "^6.19.0",
+        "angular-cli-ghpages": "^1.0.7",
         "angular-eslint": "^0.0.1-alpha.0",
-        "eslint": "^8.57.0",
+        "eslint": "^8.56.0",
         "eslint-config-google": "^0.14.0",
         "eslint-config-standard": "^17.1.0",
         "eslint-plugin-import": "^2.29.1",
         "eslint-plugin-node": "^11.1.0",
         "eslint-plugin-promise": "^6.1.1",
-        "karma": "^6.4.3",
+        "jasmine": "^5.1.0",
+        "karma": "^6.4.2",
         "karma-chrome-launcher": "^3.2.0",
         "karma-coverage": "^2.2.1",
         "karma-jasmine": "^5.1.0",
         "karma-jasmine-html-reporter": "^2.1.0",
-        "karma-time-stats-reporter": "^0.1.0",
         "netlify-plugin-chromium": "^1.1.4",
+        "nyc": "^15.1.0",
         "protractor": "^7.0.0",
-        "sass": "^1.71.1",
-        "typescript": "^5.3.3",
-        "typescript-eslint": "^7.1.1"
+        "sass": "^1.70.0",
+        "ts-node": "^10.9.1",
+        "typescript": "^5.3.3"
+      }
+    },
+    "lib": {
+      "name": "@everyboard/lib",
+      "version": "1.0.0",
+      "devDependencies": {
+        "jasmine": "^5.1.0",
+        "nyc": "^15.1.0",
+        "ts-node": "^10.9.2"
       }
     },
     "node_modules/@aashutoshrathi/word-wrap": {
@@ -129,78 +143,72 @@
         }
       }
     },
-    "node_modules/@angular-devkit/architect/node_modules/jsonc-parser": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz",
-      "integrity": "sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==",
-      "dev": true,
-      "peer": true
-    },
     "node_modules/@angular-devkit/build-angular": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/build-angular/-/build-angular-17.2.3.tgz",
-      "integrity": "sha512-AZsEHZj+k2Lxb7uQUwfEpSE6TvQhCoIgP6XLKgKxZHUOiTUVXDj84WhNcbup5SsSG1cafmoVN7APxxuSwHcoeg==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/build-angular/-/build-angular-17.1.0.tgz",
+      "integrity": "sha512-N9B2SlKewD48qKFgRPKDH1X2EvOGll1ocMlFxi95mT9aXuFd2d75JUYHzS1v3FQRU3peoAoFKxCV7OuIL/cmTA==",
       "dev": true,
       "dependencies": {
         "@ampproject/remapping": "2.2.1",
-        "@angular-devkit/architect": "0.1702.3",
-        "@angular-devkit/build-webpack": "0.1702.3",
-        "@angular-devkit/core": "17.2.3",
-        "@babel/core": "7.23.9",
+        "@angular-devkit/architect": "0.1701.0",
+        "@angular-devkit/build-webpack": "0.1701.0",
+        "@angular-devkit/core": "17.1.0",
+        "@babel/core": "7.23.7",
         "@babel/generator": "7.23.6",
         "@babel/helper-annotate-as-pure": "7.22.5",
         "@babel/helper-split-export-declaration": "7.22.6",
-        "@babel/plugin-transform-async-generator-functions": "7.23.9",
+        "@babel/plugin-transform-async-generator-functions": "7.23.7",
         "@babel/plugin-transform-async-to-generator": "7.23.3",
-        "@babel/plugin-transform-runtime": "7.23.9",
-        "@babel/preset-env": "7.23.9",
-        "@babel/runtime": "7.23.9",
+        "@babel/plugin-transform-runtime": "7.23.7",
+        "@babel/preset-env": "7.23.7",
+        "@babel/runtime": "7.23.7",
         "@discoveryjs/json-ext": "0.5.7",
-        "@ngtools/webpack": "17.2.3",
-        "@vitejs/plugin-basic-ssl": "1.1.0",
+        "@ngtools/webpack": "17.1.0",
+        "@vitejs/plugin-basic-ssl": "1.0.2",
         "ansi-colors": "4.1.3",
-        "autoprefixer": "10.4.17",
+        "autoprefixer": "10.4.16",
         "babel-loader": "9.1.3",
         "babel-plugin-istanbul": "6.1.1",
         "browserslist": "^4.21.5",
         "copy-webpack-plugin": "11.0.0",
         "critters": "0.0.20",
-        "css-loader": "6.10.0",
-        "esbuild-wasm": "0.20.0",
+        "css-loader": "6.8.1",
+        "esbuild-wasm": "0.19.11",
         "fast-glob": "3.3.2",
         "http-proxy-middleware": "2.0.6",
         "https-proxy-agent": "7.0.2",
-        "inquirer": "9.2.14",
-        "jsonc-parser": "3.2.1",
+        "inquirer": "9.2.12",
+        "jsonc-parser": "3.2.0",
         "karma-source-map-support": "1.4.0",
         "less": "4.2.0",
         "less-loader": "11.1.0",
         "license-webpack-plugin": "4.0.2",
         "loader-utils": "3.2.1",
-        "magic-string": "0.30.7",
-        "mini-css-extract-plugin": "2.8.0",
+        "magic-string": "0.30.5",
+        "mini-css-extract-plugin": "2.7.6",
         "mrmime": "2.0.0",
         "open": "8.4.2",
         "ora": "5.4.1",
         "parse5-html-rewriting-stream": "7.0.0",
-        "picomatch": "4.0.1",
-        "piscina": "4.3.1",
-        "postcss": "8.4.35",
-        "postcss-loader": "8.1.0",
+        "picomatch": "3.0.1",
+        "piscina": "4.2.1",
+        "postcss": "8.4.33",
+        "postcss-loader": "7.3.4",
         "resolve-url-loader": "5.0.0",
         "rxjs": "7.8.1",
-        "sass": "1.70.0",
-        "sass-loader": "14.1.0",
-        "semver": "7.6.0",
+        "sass": "1.69.7",
+        "sass-loader": "13.3.3",
+        "semver": "7.5.4",
         "source-map-loader": "5.0.0",
         "source-map-support": "0.5.21",
-        "terser": "5.27.0",
+        "terser": "5.26.0",
+        "text-table": "0.2.0",
         "tree-kill": "1.2.2",
         "tslib": "2.6.2",
-        "undici": "6.6.2",
-        "vite": "5.0.12",
+        "undici": "6.2.1",
+        "vite": "5.0.11",
         "watchpack": "2.4.0",
-        "webpack": "5.90.1",
+        "webpack": "5.89.0",
         "webpack-dev-middleware": "6.1.1",
         "webpack-dev-server": "4.15.1",
         "webpack-merge": "5.10.0",
@@ -212,7 +220,7 @@
         "yarn": ">= 1.13.0"
       },
       "optionalDependencies": {
-        "esbuild": "0.20.0"
+        "esbuild": "0.19.11"
       },
       "peerDependencies": {
         "@angular/compiler-cli": "^17.0.0",
@@ -266,12 +274,12 @@
       }
     },
     "node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/architect": {
-      "version": "0.1702.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1702.3.tgz",
-      "integrity": "sha512-4jeBgtBIZxAeJyiwSdbRE4+rWu34j0UMCKia8s7473rKj0Tn4+dXlHmA/kuFYIp6K/9pE/hBoeUFxLNA/DZuRQ==",
+      "version": "0.1701.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1701.0.tgz",
+      "integrity": "sha512-VP6mjptKFn0HO2dn4bH0mFMe4CrexlWlgnTHyAUbL7ZFaV9w4VQuE/vXr60wMlQ+83NIGUeJImjt1QVNlIjJnQ==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
+        "@angular-devkit/core": "17.1.0",
         "rxjs": "7.8.1"
       },
       "engines": {
@@ -281,15 +289,15 @@
       }
     },
     "node_modules/@angular-devkit/build-angular/node_modules/@angular-devkit/core": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.2.3.tgz",
-      "integrity": "sha512-A7WWl1/VsZw6utFFPBib1wSbAB5OeBgAgQmVpVe9wW8u9UZa6CLc7b3InWtRRyBXTo9Sa5GNZDFfwlXhy3iW3w==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-w7HeJjyM6YtjXrwFdmFIsp9lzDPAFJov8hVCD18DZaCwryRixz+o8egfw2SkpI4L8kuGAiGxpaCTRsTQtmR4/w==",
       "dev": true,
       "dependencies": {
         "ajv": "8.12.0",
         "ajv-formats": "2.1.1",
-        "jsonc-parser": "3.2.1",
-        "picomatch": "4.0.1",
+        "jsonc-parser": "3.2.0",
+        "picomatch": "3.0.1",
         "rxjs": "7.8.1",
         "source-map": "0.7.4"
       },
@@ -307,10 +315,233 @@
         }
       }
     },
+    "node_modules/@angular-devkit/build-angular/node_modules/@babel/core": {
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.23.7.tgz",
+      "integrity": "sha512-+UpDgowcmqe36d4NwqvKsyPMlOLNGMsfMmQ5WGCu+siCe3t3dfe9njrzGfdN4qq+bcNUt0+Vw6haRxBOycs4dw==",
+      "dev": true,
+      "dependencies": {
+        "@ampproject/remapping": "^2.2.0",
+        "@babel/code-frame": "^7.23.5",
+        "@babel/generator": "^7.23.6",
+        "@babel/helper-compilation-targets": "^7.23.6",
+        "@babel/helper-module-transforms": "^7.23.3",
+        "@babel/helpers": "^7.23.7",
+        "@babel/parser": "^7.23.6",
+        "@babel/template": "^7.22.15",
+        "@babel/traverse": "^7.23.7",
+        "@babel/types": "^7.23.6",
+        "convert-source-map": "^2.0.0",
+        "debug": "^4.1.0",
+        "gensync": "^1.0.0-beta.2",
+        "json5": "^2.2.3",
+        "semver": "^6.3.1"
+      },
+      "engines": {
+        "node": ">=6.9.0"
+      },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/babel"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/@babel/core/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/chalk": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
+      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
+      "dev": true,
+      "engines": {
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/cli-width": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
+      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
+      "dev": true,
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/convert-source-map": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
+      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
+      "dev": true
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/escape-string-regexp": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
+      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/fast-glob": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
+      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
+      "dev": true,
+      "dependencies": {
+        "@nodelib/fs.stat": "^2.0.2",
+        "@nodelib/fs.walk": "^1.2.3",
+        "glob-parent": "^5.1.2",
+        "merge2": "^1.3.0",
+        "micromatch": "^4.0.4"
+      },
+      "engines": {
+        "node": ">=8.6.0"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/figures": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/figures/-/figures-5.0.0.tgz",
+      "integrity": "sha512-ej8ksPF4x6e5wvK9yevct0UCXh8TTFlWGVLlgjZuoBH1HwjIfKE/IdL5mq89sFA7zELi1VhKpmtDnrs7zWyeyg==",
+      "dev": true,
+      "dependencies": {
+        "escape-string-regexp": "^5.0.0",
+        "is-unicode-supported": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/inquirer": {
+      "version": "9.2.12",
+      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-9.2.12.tgz",
+      "integrity": "sha512-mg3Fh9g2zfuVWJn6lhST0O7x4n03k7G8Tx5nvikJkbq8/CK47WDVm+UznF0G6s5Zi0KcyUisr6DU8T67N5U+1Q==",
+      "dev": true,
+      "dependencies": {
+        "@ljharb/through": "^2.3.11",
+        "ansi-escapes": "^4.3.2",
+        "chalk": "^5.3.0",
+        "cli-cursor": "^3.1.0",
+        "cli-width": "^4.1.0",
+        "external-editor": "^3.1.0",
+        "figures": "^5.0.0",
+        "lodash": "^4.17.21",
+        "mute-stream": "1.0.0",
+        "ora": "^5.4.1",
+        "run-async": "^3.0.0",
+        "rxjs": "^7.8.1",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^6.2.0"
+      },
+      "engines": {
+        "node": ">=14.18.0"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/is-unicode-supported": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
+      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/magic-string": {
+      "version": "0.30.5",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.5.tgz",
+      "integrity": "sha512-7xlpfBaQaP/T6Vh8MO/EqXSW5En6INHEvEXQiuff7Gku0PWjU3uf6w/j9o7O+SpB5fOAkrI5HeoNgwjEO0pFsA==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.4.15"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/mute-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
+      "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
+      "dev": true,
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/picomatch": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-3.0.1.tgz",
+      "integrity": "sha512-I3EurrIQMlRc9IaAZnqRR044Phh2DXY+55o7uJ0V+hYZAcQYSuFWsc9q5PvyDHUSCe1Qxn/iBz+78s86zWnGag==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/@angular-devkit/build-angular/node_modules/run-async": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz",
+      "integrity": "sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
     "node_modules/@angular-devkit/build-angular/node_modules/sass": {
-      "version": "1.70.0",
-      "resolved": "https://registry.npmjs.org/sass/-/sass-1.70.0.tgz",
-      "integrity": "sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==",
+      "version": "1.69.7",
+      "resolved": "https://registry.npmjs.org/sass/-/sass-1.69.7.tgz",
+      "integrity": "sha512-rzj2soDeZ8wtE2egyLXgOOHQvaC2iosZrkF6v3EUG+tBwEvhqUCzm0VP3k9gHF9LXbSrRhT5SksoI56Iw8NPnQ==",
       "dev": true,
       "dependencies": {
         "chokidar": ">=3.0.0 <4.0.0",
@@ -324,13 +555,27 @@
         "node": ">=14.0.0"
       }
     },
+    "node_modules/@angular-devkit/build-angular/node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/@angular-devkit/build-webpack": {
-      "version": "0.1702.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/build-webpack/-/build-webpack-0.1702.3.tgz",
-      "integrity": "sha512-G9F2Ori8WxJtMvOQGxTdg7d+5aAO1IPeEtMiZwFPrw65Ey6Gvfm0h2+3FnQdzeKrZmGaTk5E6gffHXJJQfCnmQ==",
+      "version": "0.1701.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/build-webpack/-/build-webpack-0.1701.0.tgz",
+      "integrity": "sha512-AUQbdnAXMdXKPj51RWr+0SusTh5M1EWEpXtEZgDSO5Vab6ak+xsX+k1IhjlEoliF0prHjD5WzBegr6WKCjZ30w==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/architect": "0.1702.3",
+        "@angular-devkit/architect": "0.1701.0",
         "rxjs": "7.8.1"
       },
       "engines": {
@@ -344,12 +589,12 @@
       }
     },
     "node_modules/@angular-devkit/build-webpack/node_modules/@angular-devkit/architect": {
-      "version": "0.1702.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1702.3.tgz",
-      "integrity": "sha512-4jeBgtBIZxAeJyiwSdbRE4+rWu34j0UMCKia8s7473rKj0Tn4+dXlHmA/kuFYIp6K/9pE/hBoeUFxLNA/DZuRQ==",
+      "version": "0.1701.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1701.0.tgz",
+      "integrity": "sha512-VP6mjptKFn0HO2dn4bH0mFMe4CrexlWlgnTHyAUbL7ZFaV9w4VQuE/vXr60wMlQ+83NIGUeJImjt1QVNlIjJnQ==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
+        "@angular-devkit/core": "17.1.0",
         "rxjs": "7.8.1"
       },
       "engines": {
@@ -359,15 +604,15 @@
       }
     },
     "node_modules/@angular-devkit/build-webpack/node_modules/@angular-devkit/core": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.2.3.tgz",
-      "integrity": "sha512-A7WWl1/VsZw6utFFPBib1wSbAB5OeBgAgQmVpVe9wW8u9UZa6CLc7b3InWtRRyBXTo9Sa5GNZDFfwlXhy3iW3w==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-w7HeJjyM6YtjXrwFdmFIsp9lzDPAFJov8hVCD18DZaCwryRixz+o8egfw2SkpI4L8kuGAiGxpaCTRsTQtmR4/w==",
       "dev": true,
       "dependencies": {
         "ajv": "8.12.0",
         "ajv-formats": "2.1.1",
-        "jsonc-parser": "3.2.1",
-        "picomatch": "4.0.1",
+        "jsonc-parser": "3.2.0",
+        "picomatch": "3.0.1",
         "rxjs": "7.8.1",
         "source-map": "0.7.4"
       },
@@ -385,10 +630,22 @@
         }
       }
     },
+    "node_modules/@angular-devkit/build-webpack/node_modules/picomatch": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-3.0.1.tgz",
+      "integrity": "sha512-I3EurrIQMlRc9IaAZnqRR044Phh2DXY+55o7uJ0V+hYZAcQYSuFWsc9q5PvyDHUSCe1Qxn/iBz+78s86zWnGag==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/@angular-devkit/core": {
-      "version": "16.2.12",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-16.2.12.tgz",
-      "integrity": "sha512-o6ziQs+EcEonFezrsA46jbZqkQrs4ckS1bAQj93g5ZjGtieUz8l/U3lclvKpL/iEzWkGVViSYuP2KyW2oqTDiQ==",
+      "version": "16.2.11",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-16.2.11.tgz",
+      "integrity": "sha512-u3cEQHqhSMWyAFIaPdRukCJwEUJt7Fy3C02gTlTeCB4F/OnftVFIm2e5vmCqMo9rgbfdvjWj9V+7wWiCpMrzAQ==",
       "dev": true,
       "peer": true,
       "dependencies": {
@@ -413,34 +670,14 @@
         }
       }
     },
-    "node_modules/@angular-devkit/core/node_modules/jsonc-parser": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz",
-      "integrity": "sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==",
-      "dev": true,
-      "peer": true
-    },
-    "node_modules/@angular-devkit/core/node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
-      "peer": true,
-      "engines": {
-        "node": ">=8.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
     "node_modules/@angular-devkit/schematics": {
-      "version": "16.2.12",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-16.2.12.tgz",
-      "integrity": "sha512-lf/Nz2o875pllxGNUcI2by4rctfRsOZOxvaLq2UaH6XG6Re9tqeNfn40a8qXrr9/IYntXnlvEid/pd9e8gFBIw==",
+      "version": "16.2.11",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-16.2.11.tgz",
+      "integrity": "sha512-QJ1+ZqVmxhFnIsHnKIA01Ks2ZmzTbctlZT0Wr7cMMFpIhLHlwsMYR+AURRcHJA+s1OBU1jJQfGzTM0s22leVhw==",
       "dev": true,
       "peer": true,
       "dependencies": {
-        "@angular-devkit/core": "16.2.12",
+        "@angular-devkit/core": "16.2.11",
         "jsonc-parser": "3.2.0",
         "magic-string": "0.30.1",
         "ora": "5.4.1",
@@ -452,30 +689,10 @@
         "yarn": ">= 1.13.0"
       }
     },
-    "node_modules/@angular-devkit/schematics/node_modules/jsonc-parser": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz",
-      "integrity": "sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==",
-      "dev": true,
-      "peer": true
-    },
-    "node_modules/@angular-devkit/schematics/node_modules/magic-string": {
-      "version": "0.30.1",
-      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.1.tgz",
-      "integrity": "sha512-mbVKXPmS0z0G4XqFDCTllmDQ6coZzn94aMlb0o/A4HEHJCKcanlDZwYJgwnkmgD3jyWhUgj9VsPrfd972yPffA==",
-      "dev": true,
-      "peer": true,
-      "dependencies": {
-        "@jridgewell/sourcemap-codec": "^1.4.15"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
     "node_modules/@angular-eslint/builder": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/builder/-/builder-17.2.1.tgz",
-      "integrity": "sha512-O30eaR0wCPiP+zKWvXj2JM8hVq30Wok2rp7zJMFm3PurjF9nWIIyexXkE5fa538DYZYxu8N3gQRqhpv5jvTXCg==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/builder/-/builder-17.2.0.tgz",
+      "integrity": "sha512-xPxgCTPcnFRT8OYs9R5UZVAtzVouIIfdMOqTcB847Cev4H8kqRz0gO5aqkQiL+0erwnLf8D4nRzMTJjSBpQQNw==",
       "dev": true,
       "dependencies": {
         "@nx/devkit": "17.2.8",
@@ -487,19 +704,19 @@
       }
     },
     "node_modules/@angular-eslint/bundled-angular-compiler": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/bundled-angular-compiler/-/bundled-angular-compiler-17.2.1.tgz",
-      "integrity": "sha512-puC0itsZv2QlrDOCcWtq1KZH+DvfrpV+mV78HHhi6+h25R5iIhr8ARKcl3EQxFjvrFq34jhG8pSupxKvFbHVfA==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/bundled-angular-compiler/-/bundled-angular-compiler-17.2.0.tgz",
+      "integrity": "sha512-uBvPbPE2JxqpdLs//Nd5+TRLgjxDxvTYgmGFTKI9Eo98krqps+rhSQCRSHWACukzc25X3Q4ITHfvjODQL8qQkg==",
       "dev": true
     },
     "node_modules/@angular-eslint/eslint-plugin": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/eslint-plugin/-/eslint-plugin-17.2.1.tgz",
-      "integrity": "sha512-9yA81BHpsaCUKRBtHGN3ieAy8HpIoffzPQMu34lYqZFT4yGHGhYmhQjNSQGBRbV2LD9dVv2U35rMHNmUcozXpw==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/eslint-plugin/-/eslint-plugin-17.2.0.tgz",
+      "integrity": "sha512-8A3hD/11N6QEchsAGggTPmNsa0GS5p44t930slMsxrTvdSlKAo56FzVdxwSkOcejKIJs57oWxoKvtK4UyLYkeA==",
       "dev": true,
       "dependencies": {
-        "@angular-eslint/utils": "17.2.1",
-        "@typescript-eslint/utils": "6.19.0"
+        "@angular-eslint/utils": "17.2.0",
+        "@typescript-eslint/utils": "6.18.0"
       },
       "peerDependencies": {
         "eslint": "^7.20.0 || ^8.0.0",
@@ -507,15 +724,15 @@
       }
     },
     "node_modules/@angular-eslint/eslint-plugin-template": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/eslint-plugin-template/-/eslint-plugin-template-17.2.1.tgz",
-      "integrity": "sha512-hl1hcHtcm90wyVL1OQGTz16oA0KHon+FFb3Qg0fLXObaXxA495Ecefd9ub5Xxg4JEOPRDi29bF1Y3YKpwflgeg==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/eslint-plugin-template/-/eslint-plugin-template-17.2.0.tgz",
+      "integrity": "sha512-CkcAOWWqNwX0FXeLwJu0Vctso8q/NPHJ95R2Cy8hjwuMyFF83/vDouyeIjYC+SRv6hbevmNa+BbdYXhQZinIHw==",
       "dev": true,
       "dependencies": {
-        "@angular-eslint/bundled-angular-compiler": "17.2.1",
-        "@angular-eslint/utils": "17.2.1",
-        "@typescript-eslint/type-utils": "6.19.0",
-        "@typescript-eslint/utils": "6.19.0",
+        "@angular-eslint/bundled-angular-compiler": "17.2.0",
+        "@angular-eslint/utils": "17.2.0",
+        "@typescript-eslint/type-utils": "6.18.0",
+        "@typescript-eslint/utils": "6.18.0",
         "aria-query": "5.3.0",
         "axobject-query": "4.0.0"
       },
@@ -525,13 +742,13 @@
       }
     },
     "node_modules/@angular-eslint/schematics": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/schematics/-/schematics-17.2.1.tgz",
-      "integrity": "sha512-7ldtIePI4ZTp/TBpeOZkzfv30HSAn//4TgtFuqvojudI8n8batV5FqQ0VNm1e0zitl75t8Zwtr0KYT4I6vh59g==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/schematics/-/schematics-17.2.0.tgz",
+      "integrity": "sha512-lV2+2H3Hf6FCJfM+cddJ/7ss3qc99OO2wuvTjGNH512mP75tvfLakV+e6TFFdzK0km+ceXvB2VqNXMSShB4PVQ==",
       "dev": true,
       "dependencies": {
-        "@angular-eslint/eslint-plugin": "17.2.1",
-        "@angular-eslint/eslint-plugin-template": "17.2.1",
+        "@angular-eslint/eslint-plugin": "17.2.0",
+        "@angular-eslint/eslint-plugin-template": "17.2.0",
         "@nx/devkit": "17.2.8",
         "ignore": "5.3.0",
         "nx": "17.2.8",
@@ -543,12 +760,12 @@
       }
     },
     "node_modules/@angular-eslint/template-parser": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/template-parser/-/template-parser-17.2.1.tgz",
-      "integrity": "sha512-WPQYFvRju0tCDXQ/pwrzC911pE07JvpeDgcN2elhzV6lxDHJEZpA5O9pnW9qgNA6J6XM9Q7dBkJ22ztAzC4WFw==",
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/template-parser/-/template-parser-17.2.0.tgz",
+      "integrity": "sha512-Js9w1IXWPvXEjd05bWkZzRaLw0g0mJPztAWOj3DiU7H9LKkautQq0zZu02cAAnXZim2CsAagEh2GmGjhaYvoKg==",
       "dev": true,
       "dependencies": {
-        "@angular-eslint/bundled-angular-compiler": "17.2.1",
+        "@angular-eslint/bundled-angular-compiler": "17.2.0",
         "eslint-scope": "^8.0.0"
       },
       "peerDependencies": {
@@ -556,14 +773,30 @@
         "typescript": "*"
       }
     },
-    "node_modules/@angular-eslint/utils": {
-      "version": "17.2.1",
-      "resolved": "https://registry.npmjs.org/@angular-eslint/utils/-/utils-17.2.1.tgz",
-      "integrity": "sha512-qQYTBXy90dWM7fhhpa5i9lTtqqhJisvRa+naCrQx9kBgR458JScLdkVIdcZ9D/rPiDCmKiVUfgcDISnjUeqTqg==",
+    "node_modules/@angular-eslint/template-parser/node_modules/eslint-scope": {
+      "version": "8.0.0",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.0.0.tgz",
+      "integrity": "sha512-zj3Byw6jX4TcFCJmxOzLt6iol5FAr9xQyZZSQjEzW2UiCJXLwXdRIKCYVFftnpZckaC9Ps9xlC7jB8tSeWWOaw==",
+      "dev": true,
+      "dependencies": {
+        "esrecurse": "^4.3.0",
+        "estraverse": "^5.2.0"
+      },
+      "engines": {
+        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+      },
+      "funding": {
+        "url": "https://opencollective.com/eslint"
+      }
+    },
+    "node_modules/@angular-eslint/utils": {
+      "version": "17.2.0",
+      "resolved": "https://registry.npmjs.org/@angular-eslint/utils/-/utils-17.2.0.tgz",
+      "integrity": "sha512-J7DsFKb5yxv8te8LQvChNn6MBvKulcBx+jtHX1uen+uuuv8XhZuVMZXS0rolUkdl1Q0mBeHpkuO2q6Vh17pqbQ==",
       "dev": true,
       "dependencies": {
-        "@angular-eslint/bundled-angular-compiler": "17.2.1",
-        "@typescript-eslint/utils": "6.19.0"
+        "@angular-eslint/bundled-angular-compiler": "17.2.0",
+        "@typescript-eslint/utils": "6.18.0"
       },
       "peerDependencies": {
         "eslint": "^7.20.0 || ^8.0.0",
@@ -571,9 +804,9 @@
       }
     },
     "node_modules/@angular/animations": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/animations/-/animations-17.2.4.tgz",
-      "integrity": "sha512-eTjD8XeioL1Xj+W6iQayOh2JBCfjkg+MG3wzyEW0jhetE/N+wm2xbI1aub2pYplKsu96hOih3lfowYt7qIKGfw==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/animations/-/animations-17.1.0.tgz",
+      "integrity": "sha512-EzyJsla/CnRX4ARmHe9J1m3Pl+J4m5hznzeQFyZpJehikaHKAGGJTGM/+DFAX9TuR1ZpCmS0z0oWsYzag2Q7RA==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -581,31 +814,31 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/core": "17.2.4"
+        "@angular/core": "17.1.0"
       }
     },
     "node_modules/@angular/cli": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular/cli/-/cli-17.2.3.tgz",
-      "integrity": "sha512-GIF9NF4t8PiHS4wt6baw1hECfmMOmNHvDAuT12/xoAueOairxIQ+AX13WaEHMJriWujm31TjqbwXmhPxMSEQpw==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/cli/-/cli-17.1.0.tgz",
+      "integrity": "sha512-mZh8ibV94CqHls+GTHok9rF78UvrtKZx+o1QOcG50ZM1L5O5s2NYrBhf+QXVeTTmzhSH1wXQb7ueyuLNLVB/eA==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/architect": "0.1702.3",
-        "@angular-devkit/core": "17.2.3",
-        "@angular-devkit/schematics": "17.2.3",
-        "@schematics/angular": "17.2.3",
+        "@angular-devkit/architect": "0.1701.0",
+        "@angular-devkit/core": "17.1.0",
+        "@angular-devkit/schematics": "17.1.0",
+        "@schematics/angular": "17.1.0",
         "@yarnpkg/lockfile": "1.1.0",
         "ansi-colors": "4.1.3",
         "ini": "4.1.1",
-        "inquirer": "9.2.14",
-        "jsonc-parser": "3.2.1",
+        "inquirer": "9.2.12",
+        "jsonc-parser": "3.2.0",
         "npm-package-arg": "11.0.1",
         "npm-pick-manifest": "9.0.0",
         "open": "8.4.2",
         "ora": "5.4.1",
-        "pacote": "17.0.6",
+        "pacote": "17.0.5",
         "resolve": "1.22.8",
-        "semver": "7.6.0",
+        "semver": "7.5.4",
         "symbol-observable": "4.0.0",
         "yargs": "17.7.2"
       },
@@ -619,12 +852,12 @@
       }
     },
     "node_modules/@angular/cli/node_modules/@angular-devkit/architect": {
-      "version": "0.1702.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1702.3.tgz",
-      "integrity": "sha512-4jeBgtBIZxAeJyiwSdbRE4+rWu34j0UMCKia8s7473rKj0Tn4+dXlHmA/kuFYIp6K/9pE/hBoeUFxLNA/DZuRQ==",
+      "version": "0.1701.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/architect/-/architect-0.1701.0.tgz",
+      "integrity": "sha512-VP6mjptKFn0HO2dn4bH0mFMe4CrexlWlgnTHyAUbL7ZFaV9w4VQuE/vXr60wMlQ+83NIGUeJImjt1QVNlIjJnQ==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
+        "@angular-devkit/core": "17.1.0",
         "rxjs": "7.8.1"
       },
       "engines": {
@@ -634,15 +867,15 @@
       }
     },
     "node_modules/@angular/cli/node_modules/@angular-devkit/core": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.2.3.tgz",
-      "integrity": "sha512-A7WWl1/VsZw6utFFPBib1wSbAB5OeBgAgQmVpVe9wW8u9UZa6CLc7b3InWtRRyBXTo9Sa5GNZDFfwlXhy3iW3w==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-w7HeJjyM6YtjXrwFdmFIsp9lzDPAFJov8hVCD18DZaCwryRixz+o8egfw2SkpI4L8kuGAiGxpaCTRsTQtmR4/w==",
       "dev": true,
       "dependencies": {
         "ajv": "8.12.0",
         "ajv-formats": "2.1.1",
-        "jsonc-parser": "3.2.1",
-        "picomatch": "4.0.1",
+        "jsonc-parser": "3.2.0",
+        "picomatch": "3.0.1",
         "rxjs": "7.8.1",
         "source-map": "0.7.4"
       },
@@ -661,14 +894,14 @@
       }
     },
     "node_modules/@angular/cli/node_modules/@angular-devkit/schematics": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.2.3.tgz",
-      "integrity": "sha512-JZCzHHheotv+iJ4p6qLc3pEi2M8NO12Slo6uiCg2T9B01glAcJB7DA1nwqjwD1cElf24Pt0C+HI0r+Lng48IsQ==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.1.0.tgz",
+      "integrity": "sha512-7q4Bk3+ePBdzrmMWxWBnNdN4kmBe2jJwa3vAofaMqZiIBEor85YcOsrUJvcWM/3+/TusgZr4p/4+oJgiYDrj5A==",
       "dev": true,
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
-        "jsonc-parser": "3.2.1",
-        "magic-string": "0.30.7",
+        "@angular-devkit/core": "17.1.0",
+        "jsonc-parser": "3.2.0",
+        "magic-string": "0.30.5",
         "ora": "5.4.1",
         "rxjs": "7.8.1"
       },
@@ -678,10 +911,186 @@
         "yarn": ">= 1.13.0"
       }
     },
+    "node_modules/@angular/cli/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/chalk": {
+      "version": "5.3.0",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
+      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
+      "dev": true,
+      "engines": {
+        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/cli-width": {
+      "version": "4.1.0",
+      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
+      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
+      "dev": true,
+      "engines": {
+        "node": ">= 12"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/@angular/cli/node_modules/escape-string-regexp": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
+      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/figures": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/figures/-/figures-5.0.0.tgz",
+      "integrity": "sha512-ej8ksPF4x6e5wvK9yevct0UCXh8TTFlWGVLlgjZuoBH1HwjIfKE/IdL5mq89sFA7zELi1VhKpmtDnrs7zWyeyg==",
+      "dev": true,
+      "dependencies": {
+        "escape-string-regexp": "^5.0.0",
+        "is-unicode-supported": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=14"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/inquirer": {
+      "version": "9.2.12",
+      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-9.2.12.tgz",
+      "integrity": "sha512-mg3Fh9g2zfuVWJn6lhST0O7x4n03k7G8Tx5nvikJkbq8/CK47WDVm+UznF0G6s5Zi0KcyUisr6DU8T67N5U+1Q==",
+      "dev": true,
+      "dependencies": {
+        "@ljharb/through": "^2.3.11",
+        "ansi-escapes": "^4.3.2",
+        "chalk": "^5.3.0",
+        "cli-cursor": "^3.1.0",
+        "cli-width": "^4.1.0",
+        "external-editor": "^3.1.0",
+        "figures": "^5.0.0",
+        "lodash": "^4.17.21",
+        "mute-stream": "1.0.0",
+        "ora": "^5.4.1",
+        "run-async": "^3.0.0",
+        "rxjs": "^7.8.1",
+        "string-width": "^4.2.3",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^6.2.0"
+      },
+      "engines": {
+        "node": ">=14.18.0"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/is-unicode-supported": {
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
+      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=12"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/magic-string": {
+      "version": "0.30.5",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.5.tgz",
+      "integrity": "sha512-7xlpfBaQaP/T6Vh8MO/EqXSW5En6INHEvEXQiuff7Gku0PWjU3uf6w/j9o7O+SpB5fOAkrI5HeoNgwjEO0pFsA==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.4.15"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/mute-stream": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
+      "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
+      "dev": true,
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/picomatch": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-3.0.1.tgz",
+      "integrity": "sha512-I3EurrIQMlRc9IaAZnqRR044Phh2DXY+55o7uJ0V+hYZAcQYSuFWsc9q5PvyDHUSCe1Qxn/iBz+78s86zWnGag==",
+      "dev": true,
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/run-async": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz",
+      "integrity": "sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.12.0"
+      }
+    },
+    "node_modules/@angular/cli/node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/@angular/common": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/common/-/common-17.2.4.tgz",
-      "integrity": "sha512-ymzDHZPQWpBKVQ7lPZucU+vBSb70Re6y5TKzkOX7oYE8Z1+tiNGLvfmzGsO2/N0lvwyZWXjkdXYEDON2hIlZ1Q==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/common/-/common-17.1.0.tgz",
+      "integrity": "sha512-0Zg62iSynyRr2QslC8dVwSo46mkKrVENnwcBvsgTJ8rfGiuRdKMX8nWm5EUEm3ohKmYLfHvyEjsKDRn//UefVw==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -689,14 +1098,14 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/core": "17.2.4",
+        "@angular/core": "17.1.0",
         "rxjs": "^6.5.3 || ^7.4.0"
       }
     },
     "node_modules/@angular/compiler": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/compiler/-/compiler-17.2.4.tgz",
-      "integrity": "sha512-McSsBcoHhMkaQpHM5/wTosAKTzJY5uE6ji3z+ec5GrIJhV7jrVfa67+RUoUzHe+rlD/7oQbX1L/OaHKDP8+/mA==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/compiler/-/compiler-17.1.0.tgz",
+      "integrity": "sha512-gF4i/WtPSiSvT4YNasTNnckOxdxuSNwi0EsncrtewwveBcCatjqaXNssUCiF5TgxlC2sKTmsPcMqDJrfX2LMpw==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -704,7 +1113,7 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/core": "17.2.4"
+        "@angular/core": "17.1.0"
       },
       "peerDependenciesMeta": {
         "@angular/core": {
@@ -713,16 +1122,16 @@
       }
     },
     "node_modules/@angular/compiler-cli": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/compiler-cli/-/compiler-cli-17.2.4.tgz",
-      "integrity": "sha512-VGQx1YoYuifQZNj2/nGMEyYVYvXSWrt1ZXK43dgxPDH3jCWNncOBUYtmyCmYvxKvDz0aDO3KL8cro8c4+N0pPw==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/compiler-cli/-/compiler-cli-17.1.0.tgz",
+      "integrity": "sha512-WDpO4WvC5ItjaRexnpFpKPpT+cu+5GYkWF8h74iHhfxOgU+gaQiMWERHylWCqF25AzmhKu0iI3ZZtaIJ6qqwog==",
       "dev": true,
       "dependencies": {
-        "@babel/core": "7.23.9",
+        "@babel/core": "7.23.2",
         "@jridgewell/sourcemap-codec": "^1.4.14",
         "chokidar": "^3.0.0",
         "convert-source-map": "^1.5.1",
-        "reflect-metadata": "^0.2.0",
+        "reflect-metadata": "^0.1.2",
         "semver": "^7.0.0",
         "tslib": "^2.3.0",
         "yargs": "^17.2.1"
@@ -736,14 +1145,14 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/compiler": "17.2.4",
+        "@angular/compiler": "17.1.0",
         "typescript": ">=5.2 <5.4"
       }
     },
     "node_modules/@angular/core": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/core/-/core-17.2.4.tgz",
-      "integrity": "sha512-5Bko+vk7H1Ce57MHuRcpZtq2Srq5euufSvwg0piPozp0yYmCqNoYN7c128kgi6PbiPQeAnKRzRbEuYd1YCU4Tw==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-9OvRRZq+46S+ICZLRYIGVU2pknuPz23B+5V3jz7cDA5V43GVcMnfmAbMClPQxm7kRGnqtQ+yzBjn+HubCerE6g==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -755,10 +1164,111 @@
         "zone.js": "~0.14.0"
       }
     },
+    "node_modules/@angular/fire": {
+      "version": "17.0.1",
+      "resolved": "https://registry.npmjs.org/@angular/fire/-/fire-17.0.1.tgz",
+      "integrity": "sha512-bhbogL4m50AKzSVn4kdZX3/2XrYTMvpsgP/4xnTPuMoTFgOrjV24CDc+1lOL+Z0QXRIupj84/Pg4KNFD4lXXzQ==",
+      "dependencies": {
+        "@angular-devkit/schematics": "^17.0.0",
+        "@schematics/angular": "^17.0.0",
+        "firebase": "^10.7.0",
+        "fs-extra": "^8.0.1",
+        "fuzzy": "^0.1.3",
+        "inquirer": "^8.1.1",
+        "inquirer-autocomplete-prompt": "^1.0.1",
+        "jsonc-parser": "^3.0.0",
+        "node-fetch": "^2.6.1",
+        "open": "^8.0.0",
+        "ora": "^5.3.0",
+        "rxfire": "^6.0.5",
+        "semver": "^7.1.3",
+        "triple-beam": "^1.3.0",
+        "tslib": "^2.3.0",
+        "winston": "^3.0.0"
+      },
+      "peerDependencies": {
+        "@angular/common": "^17.0.0",
+        "@angular/core": "^17.0.0",
+        "@angular/platform-browser": "^17.0.0",
+        "@angular/platform-browser-dynamic": "^17.0.0",
+        "firebase-tools": "^13.0.0",
+        "rxjs": "~7.8.0"
+      },
+      "peerDependenciesMeta": {
+        "firebase-tools": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@angular/fire/node_modules/@angular-devkit/core": {
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-w7HeJjyM6YtjXrwFdmFIsp9lzDPAFJov8hVCD18DZaCwryRixz+o8egfw2SkpI4L8kuGAiGxpaCTRsTQtmR4/w==",
+      "dependencies": {
+        "ajv": "8.12.0",
+        "ajv-formats": "2.1.1",
+        "jsonc-parser": "3.2.0",
+        "picomatch": "3.0.1",
+        "rxjs": "7.8.1",
+        "source-map": "0.7.4"
+      },
+      "engines": {
+        "node": "^18.13.0 || >=20.9.0",
+        "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
+        "yarn": ">= 1.13.0"
+      },
+      "peerDependencies": {
+        "chokidar": "^3.5.2"
+      },
+      "peerDependenciesMeta": {
+        "chokidar": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@angular/fire/node_modules/@angular-devkit/schematics": {
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.1.0.tgz",
+      "integrity": "sha512-7q4Bk3+ePBdzrmMWxWBnNdN4kmBe2jJwa3vAofaMqZiIBEor85YcOsrUJvcWM/3+/TusgZr4p/4+oJgiYDrj5A==",
+      "dependencies": {
+        "@angular-devkit/core": "17.1.0",
+        "jsonc-parser": "3.2.0",
+        "magic-string": "0.30.5",
+        "ora": "5.4.1",
+        "rxjs": "7.8.1"
+      },
+      "engines": {
+        "node": "^18.13.0 || >=20.9.0",
+        "npm": "^6.11.0 || ^7.5.6 || >=8.0.0",
+        "yarn": ">= 1.13.0"
+      }
+    },
+    "node_modules/@angular/fire/node_modules/magic-string": {
+      "version": "0.30.5",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.5.tgz",
+      "integrity": "sha512-7xlpfBaQaP/T6Vh8MO/EqXSW5En6INHEvEXQiuff7Gku0PWjU3uf6w/j9o7O+SpB5fOAkrI5HeoNgwjEO0pFsA==",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.4.15"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@angular/fire/node_modules/picomatch": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-3.0.1.tgz",
+      "integrity": "sha512-I3EurrIQMlRc9IaAZnqRR044Phh2DXY+55o7uJ0V+hYZAcQYSuFWsc9q5PvyDHUSCe1Qxn/iBz+78s86zWnGag==",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/@angular/forms": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/forms/-/forms-17.2.4.tgz",
-      "integrity": "sha512-flubCxK6Rc1YmAu23+o+NwqaIWbJ4MIYij05b1GlpRKB5GRX6M0fOl7uRHZmA6dC4xZGt/MUklRqb71T7dJ5JQ==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/forms/-/forms-17.1.0.tgz",
+      "integrity": "sha512-JD9IAxa5gQnjzxYJXm3H+lBuyv/dCnPHl6fpvb/JGrxY6xi4gfndyI8AkAb/wOAQgZDsIPaq5s4eWDjhr7CpyA==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -766,21 +1276,21 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/common": "17.2.4",
-        "@angular/core": "17.2.4",
-        "@angular/platform-browser": "17.2.4",
+        "@angular/common": "17.1.0",
+        "@angular/core": "17.1.0",
+        "@angular/platform-browser": "17.1.0",
         "rxjs": "^6.5.3 || ^7.4.0"
       }
     },
     "node_modules/@angular/localize": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/localize/-/localize-17.2.4.tgz",
-      "integrity": "sha512-l6qZzP7f0fH6bCufyrhlUD6n7ggfTEaerIZW/jw0mnXFqVsHVfXX2jWHKljaZJWT3vhDp312i8xAukoAPM0uSQ==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/localize/-/localize-17.1.0.tgz",
+      "integrity": "sha512-GW+1F72lRnCwppu2GzGP04d3UhtdhqMHlCbBdZzQUbv8XQfU+22MOGZx/Ry8sXnanZDgH+u+2A4bvrKZPsVgZg==",
       "dev": true,
       "dependencies": {
-        "@babel/core": "7.23.9",
-        "@types/babel__core": "7.20.5",
-        "fast-glob": "3.3.2",
+        "@babel/core": "7.23.2",
+        "@types/babel__core": "7.20.2",
+        "fast-glob": "3.3.1",
         "yargs": "^17.2.1"
       },
       "bin": {
@@ -792,14 +1302,14 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/compiler": "17.2.4",
-        "@angular/compiler-cli": "17.2.4"
+        "@angular/compiler": "17.1.0",
+        "@angular/compiler-cli": "17.1.0"
       }
     },
     "node_modules/@angular/platform-browser": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/platform-browser/-/platform-browser-17.2.4.tgz",
-      "integrity": "sha512-A1jkx4ApIx76VDxm8UZLKEq+gwpKZb4qjzCTBDfjOpXB0MJQ5IaYdCrV0E/vPCKZhIfjbEHK+9H1vHRYDCcXtA==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/platform-browser/-/platform-browser-17.1.0.tgz",
+      "integrity": "sha512-Klq92ZUX0+ZsxLvbYtIEP3GtVEfMLYPxmBP0pWNZyYIeJCg/YxPS76QSvEhBaMqFelk4RzkDQEIfixC16UIgOA==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -807,9 +1317,9 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/animations": "17.2.4",
-        "@angular/common": "17.2.4",
-        "@angular/core": "17.2.4"
+        "@angular/animations": "17.1.0",
+        "@angular/common": "17.1.0",
+        "@angular/core": "17.1.0"
       },
       "peerDependenciesMeta": {
         "@angular/animations": {
@@ -818,9 +1328,9 @@
       }
     },
     "node_modules/@angular/platform-browser-dynamic": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/platform-browser-dynamic/-/platform-browser-dynamic-17.2.4.tgz",
-      "integrity": "sha512-tNS6WexBbdks4uiB0JfPjUG2/rJ/5wuWr9C11CIgsMo+Onbw49imwDQQTxsx1A3misVb72mUufRza9DcxfSBxg==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/platform-browser-dynamic/-/platform-browser-dynamic-17.1.0.tgz",
+      "integrity": "sha512-rqPRZZx6VcSx81HIQr1XMBgb7fYSj6pOZNTJGZkn2KNxrz6hyU3A3qaom1VSVRK5vvNb1cFn35mg/zyOIliTIg==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -828,16 +1338,16 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/common": "17.2.4",
-        "@angular/compiler": "17.2.4",
-        "@angular/core": "17.2.4",
-        "@angular/platform-browser": "17.2.4"
+        "@angular/common": "17.1.0",
+        "@angular/compiler": "17.1.0",
+        "@angular/core": "17.1.0",
+        "@angular/platform-browser": "17.1.0"
       }
     },
     "node_modules/@angular/router": {
-      "version": "17.2.4",
-      "resolved": "https://registry.npmjs.org/@angular/router/-/router-17.2.4.tgz",
-      "integrity": "sha512-HnEq6OtyXVJx24Vps0N2GsdvynQ8Mv6twjGmhBlo3x/19ay0WEHdHdsayOSKFvxXg9LCLPnSDYlmpk074IsgqA==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular/router/-/router-17.1.0.tgz",
+      "integrity": "sha512-VDeVLiiS4iEwqwgsLyL9hqA1djFW3yveMnhZIwviJlnp9vG2r/ggMKhNmdP1Hb2iaNgflyhyhwafJ0gi9SLi5A==",
       "dependencies": {
         "tslib": "^2.3.0"
       },
@@ -845,9 +1355,9 @@
         "node": "^18.13.0 || >=20.9.0"
       },
       "peerDependencies": {
-        "@angular/common": "17.2.4",
-        "@angular/core": "17.2.4",
-        "@angular/platform-browser": "17.2.4",
+        "@angular/common": "17.1.0",
+        "@angular/core": "17.1.0",
+        "@angular/platform-browser": "17.1.0",
         "rxjs": "^6.5.3 || ^7.4.0"
       }
     },
@@ -878,6 +1388,12 @@
         "js-yaml": "bin/js-yaml.js"
       }
     },
+    "node_modules/@assemblyscript/loader": {
+      "version": "0.10.1",
+      "resolved": "https://registry.npmjs.org/@assemblyscript/loader/-/loader-0.10.1.tgz",
+      "integrity": "sha512-H71nDOOL8Y7kWRLqf6Sums+01Q5msqBW2KhDUTemh1tvY04eSkSXrK0uj/4mmY0Xr16/3zyZmsrxN7CKuRbNRg==",
+      "dev": true
+    },
     "node_modules/@babel/code-frame": {
       "version": "7.23.5",
       "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.23.5.tgz",
@@ -901,21 +1417,21 @@
       }
     },
     "node_modules/@babel/core": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.23.9.tgz",
-      "integrity": "sha512-5q0175NOjddqpvvzU+kDiSOAk4PfdO6FvwCWoQ6RO7rTzEe8vlo+4HVfcnAREhD4npMs0e9uZypjTwzZPCf/cw==",
+      "version": "7.23.2",
+      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.23.2.tgz",
+      "integrity": "sha512-n7s51eWdaWZ3vGT2tD4T7J6eJs3QoBXydv7vkUM06Bf1cbVD2Kc2UrkzhiQwobfV7NwOnQXYL7UBJ5VPU+RGoQ==",
       "dev": true,
       "dependencies": {
         "@ampproject/remapping": "^2.2.0",
-        "@babel/code-frame": "^7.23.5",
-        "@babel/generator": "^7.23.6",
-        "@babel/helper-compilation-targets": "^7.23.6",
-        "@babel/helper-module-transforms": "^7.23.3",
-        "@babel/helpers": "^7.23.9",
-        "@babel/parser": "^7.23.9",
-        "@babel/template": "^7.23.9",
-        "@babel/traverse": "^7.23.9",
-        "@babel/types": "^7.23.9",
+        "@babel/code-frame": "^7.22.13",
+        "@babel/generator": "^7.23.0",
+        "@babel/helper-compilation-targets": "^7.22.15",
+        "@babel/helper-module-transforms": "^7.23.0",
+        "@babel/helpers": "^7.23.2",
+        "@babel/parser": "^7.23.0",
+        "@babel/template": "^7.22.15",
+        "@babel/traverse": "^7.23.2",
+        "@babel/types": "^7.23.0",
         "convert-source-map": "^2.0.0",
         "debug": "^4.1.0",
         "gensync": "^1.0.0-beta.2",
@@ -1010,9 +1526,9 @@
       }
     },
     "node_modules/@babel/helper-create-class-features-plugin": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.24.0.tgz",
-      "integrity": "sha512-QAH+vfvts51BCsNZ2PhY6HAggnlS6omLLFTsIpeqZk/MmJ6cW7tgz5yRv0fMJThcr6FmbMrENh1RgrWPTYA76g==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.23.7.tgz",
+      "integrity": "sha512-xCoqR/8+BoNnXOY7RVSgv6X+o7pmT5q1d+gGcRlXYkI+9B31glE4jeejhKVpA04O1AtzOt7OSQ6VYKP5FcRl9g==",
       "dev": true,
       "dependencies": {
         "@babel/helper-annotate-as-pure": "^7.22.5",
@@ -1068,9 +1584,9 @@
       }
     },
     "node_modules/@babel/helper-define-polyfill-provider": {
-      "version": "0.6.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.6.0.tgz",
-      "integrity": "sha512-efwOM90nCG6YeT8o3PCyBVSxRfmILxCNL+TNI8CGQl7a62M0Wd9VkV+XHwIlkOz1r4b+lxu6gBjdWiOMdUCrCQ==",
+      "version": "0.5.0",
+      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.5.0.tgz",
+      "integrity": "sha512-NovQquuQLAQ5HuyjCz7WQP9MjRj7dx++yspwiyUiGl9ZyadHRSql1HZh5ogRd8W8w6YM6EQ/NTB8rgjLt5W65Q==",
       "dev": true,
       "dependencies": {
         "@babel/helper-compilation-targets": "^7.22.6",
@@ -1173,9 +1689,9 @@
       }
     },
     "node_modules/@babel/helper-plugin-utils": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.24.0.tgz",
-      "integrity": "sha512-9cUznXMG0+FxRuJfvL82QlTqIzhVW9sL0KjMPHhAOOvpQGL8QtdxnBKILjBqxlHyliz0yCa1G903ZXI/FuHy2w==",
+      "version": "7.22.5",
+      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.22.5.tgz",
+      "integrity": "sha512-uLls06UVKgFG9QD4OeFYLEGteMIAa5kpTPcFL28yuCIIzsf6ZyKZMllKVOCZFhiZ5ptnwX4mtKdWCBE/uT4amg==",
       "dev": true,
       "engines": {
         "node": ">=6.9.0"
@@ -1293,14 +1809,14 @@
       }
     },
     "node_modules/@babel/helpers": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.24.0.tgz",
-      "integrity": "sha512-ulDZdc0Aj5uLc5nETsa7EPx2L7rM0YJM8r7ck7U73AXi7qOV44IHHRAYZHY6iU1rr3C5N4NtTmMRUJP6kwCWeA==",
+      "version": "7.23.8",
+      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.23.8.tgz",
+      "integrity": "sha512-KDqYz4PiOWvDFrdHLPhKtCThtIcKVy6avWD2oG4GEvyQ+XDZwHD4YQd+H2vNMnq2rkdxsDkU82T+Vk8U/WXHRQ==",
       "dev": true,
       "dependencies": {
-        "@babel/template": "^7.24.0",
-        "@babel/traverse": "^7.24.0",
-        "@babel/types": "^7.24.0"
+        "@babel/template": "^7.22.15",
+        "@babel/traverse": "^7.23.7",
+        "@babel/types": "^7.23.6"
       },
       "engines": {
         "node": ">=6.9.0"
@@ -1321,9 +1837,9 @@
       }
     },
     "node_modules/@babel/parser": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.24.0.tgz",
-      "integrity": "sha512-QuP/FxEAzMSjXygs8v4N9dvdXzEHN4W1oF3PxuWAtPo08UdM17u89RDMgjLn/mlc56iM0HlLmVkO/wgR+rDgHg==",
+      "version": "7.23.6",
+      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.23.6.tgz",
+      "integrity": "sha512-Z2uID7YJ7oNvAI20O9X0bblw7Qqs8Q2hFy0R9tAfnfLkp5MW0UH9eUvnDSnFwKZ0AvgS1ucqR4KzvVHgnke1VQ==",
       "bin": {
         "parser": "bin/babel-parser.js"
       },
@@ -1642,9 +2158,9 @@
       }
     },
     "node_modules/@babel/plugin-transform-async-generator-functions": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.23.9.tgz",
-      "integrity": "sha512-8Q3veQEDGe14dTYuwagbRtwxQDnytyg1JFu4/HwEMETeofocrB0U0ejBJIXoeG/t2oXZ8kzCyI0ZZfbT80VFNQ==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-async-generator-functions/-/plugin-transform-async-generator-functions-7.23.7.tgz",
+      "integrity": "sha512-PdxEpL71bJp1byMG0va5gwQcXHxuEYC/BgI/e88mGTtohbZN28O5Yit0Plkkm/dBzCF/BxmbNcses1RH1T+urA==",
       "dev": true,
       "dependencies": {
         "@babel/helper-environment-visitor": "^7.22.20",
@@ -2000,9 +2516,9 @@
       }
     },
     "node_modules/@babel/plugin-transform-modules-systemjs": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.23.9.tgz",
-      "integrity": "sha512-KDlPRM6sLo4o1FkiSlXoAa8edLXFsKKIda779fbLrvmeuc3itnjCtaO6RrtoaANsIJANj+Vk1zqbZIMhkCAHVw==",
+      "version": "7.23.3",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-modules-systemjs/-/plugin-transform-modules-systemjs-7.23.3.tgz",
+      "integrity": "sha512-ZxyKGTkF9xT9YJuKQRo19ewf3pXpopuYQd8cDXqNzc3mUNbOME0RKMoZxviQk74hwzfQsEe66dE92MaZbdHKNQ==",
       "dev": true,
       "dependencies": {
         "@babel/helper-hoist-variables": "^7.22.5",
@@ -2097,14 +2613,14 @@
       }
     },
     "node_modules/@babel/plugin-transform-object-rest-spread": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.24.0.tgz",
-      "integrity": "sha512-y/yKMm7buHpFFXfxVFS4Vk1ToRJDilIa6fKRioB9Vjichv58TDGXTvqV0dN7plobAmTW5eSEGXDngE+Mm+uO+w==",
+      "version": "7.23.4",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-object-rest-spread/-/plugin-transform-object-rest-spread-7.23.4.tgz",
+      "integrity": "sha512-9x9K1YyeQVw0iOXJlIzwm8ltobIIv7j2iLyP2jIhEbqPRQ7ScNgwQufU2I0Gq11VjyG4gI4yMXt2VFags+1N3g==",
       "dev": true,
       "dependencies": {
-        "@babel/compat-data": "^7.23.5",
-        "@babel/helper-compilation-targets": "^7.23.6",
-        "@babel/helper-plugin-utils": "^7.24.0",
+        "@babel/compat-data": "^7.23.3",
+        "@babel/helper-compilation-targets": "^7.22.15",
+        "@babel/helper-plugin-utils": "^7.22.5",
         "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
         "@babel/plugin-transform-parameters": "^7.23.3"
       },
@@ -2260,16 +2776,16 @@
       }
     },
     "node_modules/@babel/plugin-transform-runtime": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.23.9.tgz",
-      "integrity": "sha512-A7clW3a0aSjm3ONU9o2HAILSegJCYlEZmOhmBRReVtIpY/Z/p7yIZ+wR41Z+UipwdGuqwtID/V/dOdZXjwi9gQ==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-runtime/-/plugin-transform-runtime-7.23.7.tgz",
+      "integrity": "sha512-fa0hnfmiXc9fq/weK34MUV0drz2pOL/vfKWvN7Qw127hiUPabFCUMgAbYWcchRzMJit4o5ARsK/s+5h0249pLw==",
       "dev": true,
       "dependencies": {
         "@babel/helper-module-imports": "^7.22.15",
         "@babel/helper-plugin-utils": "^7.22.5",
-        "babel-plugin-polyfill-corejs2": "^0.4.8",
-        "babel-plugin-polyfill-corejs3": "^0.9.0",
-        "babel-plugin-polyfill-regenerator": "^0.5.5",
+        "babel-plugin-polyfill-corejs2": "^0.4.7",
+        "babel-plugin-polyfill-corejs3": "^0.8.7",
+        "babel-plugin-polyfill-regenerator": "^0.5.4",
         "semver": "^6.3.1"
       },
       "engines": {
@@ -2428,9 +2944,9 @@
       }
     },
     "node_modules/@babel/preset-env": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.23.9.tgz",
-      "integrity": "sha512-3kBGTNBBk9DQiPoXYS0g0BYlwTQYUTifqgKTjxUwEUkduRT2QOa0FPGBJ+NROQhGyYO5BuTJwGvBnqKDykac6A==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/preset-env/-/preset-env-7.23.7.tgz",
+      "integrity": "sha512-SY27X/GtTz/L4UryMNJ6p4fH4nsgWbz84y9FE0bQeWJP6O5BhgVCt53CotQKHCOeXJel8VyhlhujhlltKms/CA==",
       "dev": true,
       "dependencies": {
         "@babel/compat-data": "^7.23.5",
@@ -2460,13 +2976,13 @@
         "@babel/plugin-syntax-top-level-await": "^7.14.5",
         "@babel/plugin-syntax-unicode-sets-regex": "^7.18.6",
         "@babel/plugin-transform-arrow-functions": "^7.23.3",
-        "@babel/plugin-transform-async-generator-functions": "^7.23.9",
+        "@babel/plugin-transform-async-generator-functions": "^7.23.7",
         "@babel/plugin-transform-async-to-generator": "^7.23.3",
         "@babel/plugin-transform-block-scoped-functions": "^7.23.3",
         "@babel/plugin-transform-block-scoping": "^7.23.4",
         "@babel/plugin-transform-class-properties": "^7.23.3",
         "@babel/plugin-transform-class-static-block": "^7.23.4",
-        "@babel/plugin-transform-classes": "^7.23.8",
+        "@babel/plugin-transform-classes": "^7.23.5",
         "@babel/plugin-transform-computed-properties": "^7.23.3",
         "@babel/plugin-transform-destructuring": "^7.23.3",
         "@babel/plugin-transform-dotall-regex": "^7.23.3",
@@ -2482,7 +2998,7 @@
         "@babel/plugin-transform-member-expression-literals": "^7.23.3",
         "@babel/plugin-transform-modules-amd": "^7.23.3",
         "@babel/plugin-transform-modules-commonjs": "^7.23.3",
-        "@babel/plugin-transform-modules-systemjs": "^7.23.9",
+        "@babel/plugin-transform-modules-systemjs": "^7.23.3",
         "@babel/plugin-transform-modules-umd": "^7.23.3",
         "@babel/plugin-transform-named-capturing-groups-regex": "^7.22.5",
         "@babel/plugin-transform-new-target": "^7.23.3",
@@ -2508,9 +3024,9 @@
         "@babel/plugin-transform-unicode-regex": "^7.23.3",
         "@babel/plugin-transform-unicode-sets-regex": "^7.23.3",
         "@babel/preset-modules": "0.1.6-no-external-plugins",
-        "babel-plugin-polyfill-corejs2": "^0.4.8",
-        "babel-plugin-polyfill-corejs3": "^0.9.0",
-        "babel-plugin-polyfill-regenerator": "^0.5.5",
+        "babel-plugin-polyfill-corejs2": "^0.4.7",
+        "babel-plugin-polyfill-corejs3": "^0.8.7",
+        "babel-plugin-polyfill-regenerator": "^0.5.4",
         "core-js-compat": "^3.31.0",
         "semver": "^6.3.1"
       },
@@ -2551,9 +3067,9 @@
       "dev": true
     },
     "node_modules/@babel/runtime": {
-      "version": "7.23.9",
-      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.9.tgz",
-      "integrity": "sha512-0CX6F+BI2s9dkUqr08KFrAIZgNFj75rdBU/DjCyYLIaV/quFjkk6T+EJ2LkZHyZTbEV4L5p97mNkUsHl2wLFAw==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/runtime/-/runtime-7.23.7.tgz",
+      "integrity": "sha512-w06OXVOFso7LcbzMiDGt+3X7Rh7Ho8MmgPoWU3rarH+8upf+wSU/grlGbWzQyr3DkdN6ZeuMFjpdwW0Q+HxobA==",
       "dev": true,
       "dependencies": {
         "regenerator-runtime": "^0.14.0"
@@ -2563,23 +3079,23 @@
       }
     },
     "node_modules/@babel/template": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.24.0.tgz",
-      "integrity": "sha512-Bkf2q8lMB0AFpX0NFEqSbx1OkTHf0f+0j82mkw+ZpzBnkk7e9Ql0891vlfgi+kHwOk8tQjiQHpqh4LaSa0fKEA==",
+      "version": "7.22.15",
+      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.22.15.tgz",
+      "integrity": "sha512-QPErUVm4uyJa60rkI73qneDacvdvzxshT3kksGqlGWYdOTIUOwJ7RDUL8sGqslY1uXWSL6xMFKEXDS3ox2uF0w==",
       "dev": true,
       "dependencies": {
-        "@babel/code-frame": "^7.23.5",
-        "@babel/parser": "^7.24.0",
-        "@babel/types": "^7.24.0"
+        "@babel/code-frame": "^7.22.13",
+        "@babel/parser": "^7.22.15",
+        "@babel/types": "^7.22.15"
       },
       "engines": {
         "node": ">=6.9.0"
       }
     },
     "node_modules/@babel/traverse": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.24.0.tgz",
-      "integrity": "sha512-HfuJlI8qq3dEDmNU5ChzzpZRWq+oxCZQyMzIMEqLho+AQnhMnKQUzH6ydo3RBl/YjPCuk68Y6s0Gx0AeyULiWw==",
+      "version": "7.23.7",
+      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.23.7.tgz",
+      "integrity": "sha512-tY3mM8rH9jM0YHFGyfC0/xf+SB5eKUu7HPj7/k3fpi9dAlsMc5YbQvDi0Sh2QTPXqMhyaAtzAr807TIyfQrmyg==",
       "dev": true,
       "dependencies": {
         "@babel/code-frame": "^7.23.5",
@@ -2588,8 +3104,8 @@
         "@babel/helper-function-name": "^7.23.0",
         "@babel/helper-hoist-variables": "^7.22.5",
         "@babel/helper-split-export-declaration": "^7.22.6",
-        "@babel/parser": "^7.24.0",
-        "@babel/types": "^7.24.0",
+        "@babel/parser": "^7.23.6",
+        "@babel/types": "^7.23.6",
         "debug": "^4.3.1",
         "globals": "^11.1.0"
       },
@@ -2598,9 +3114,9 @@
       }
     },
     "node_modules/@babel/types": {
-      "version": "7.24.0",
-      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.24.0.tgz",
-      "integrity": "sha512-+j7a5c253RfKh8iABBhywc8NSfP5LURe7Uh4qpsh6jc+aLJguvmIUBdjSdEMQv2bENrCR5MfRdjGo7vzS/ob7w==",
+      "version": "7.23.6",
+      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.23.6.tgz",
+      "integrity": "sha512-+uarb83brBzPKN38NX1MkB6vb6+mwvR6amUulqAE7ccQw1pEl+bCia9TbdG1lsnFP7lZySvUn37CHyXQdfTwzg==",
       "dev": true,
       "dependencies": {
         "@babel/helper-string-parser": "^7.23.4",
@@ -2625,6 +3141,28 @@
       "resolved": "https://registry.npmjs.org/@creativebulma/bulma-tooltip/-/bulma-tooltip-1.2.0.tgz",
       "integrity": "sha512-ooImbeXEBxf77cttbzA7X5rC5aAWm9UsXIGViFOnsqB+6M944GkB28S5R4UWRqjFd2iW4zGEkEifAU+q43pt2w=="
     },
+    "node_modules/@cspotcode/source-map-support": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/@cspotcode/source-map-support/-/source-map-support-0.8.1.tgz",
+      "integrity": "sha512-IchNf6dN4tHoMFIn/7OE8LWZ19Y6q/67Bmf6vnGREv8RSbBVb9LPJxEcnwrcwX6ixSvaiGoomAUvu4YSxXrVgw==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/trace-mapping": "0.3.9"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@cspotcode/source-map-support/node_modules/@jridgewell/trace-mapping": {
+      "version": "0.3.9",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.9.tgz",
+      "integrity": "sha512-3Belt6tdc8bPgAtbcmdtNJlirVoTmEb5e2gC94PnkwEW9jI6CAHUeoG85tjWP5WquqfavoMtMwiG4P926ZKKuQ==",
+      "dev": true,
+      "dependencies": {
+        "@jridgewell/resolve-uri": "^3.0.3",
+        "@jridgewell/sourcemap-codec": "^1.4.10"
+      }
+    },
     "node_modules/@dabh/diagnostics": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/@dabh/diagnostics/-/diagnostics-2.0.3.tgz",
@@ -2645,9 +3183,9 @@
       }
     },
     "node_modules/@esbuild/aix-ppc64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.20.0.tgz",
-      "integrity": "sha512-fGFDEctNh0CcSwsiRPxiaqX0P5rq+AqE0SRhYGZ4PX46Lg1FNR6oCxJghf8YgY0WQEgQuh3lErUFE4KxLeRmmw==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.19.11.tgz",
+      "integrity": "sha512-FnzU0LyE3ySQk7UntJO4+qIiQgI7KoODnZg5xzXIrFJlKd2P2gwHsHY4927xj9y5PJmJSzULiUCWmv7iWnNa7g==",
       "cpu": [
         "ppc64"
       ],
@@ -2661,9 +3199,9 @@
       }
     },
     "node_modules/@esbuild/android-arm": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.20.0.tgz",
-      "integrity": "sha512-3bMAfInvByLHfJwYPJRlpTeaQA75n8C/QKpEaiS4HrFWFiJlNI0vzq/zCjBrhAYcPyVPG7Eo9dMrcQXuqmNk5g==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.19.11.tgz",
+      "integrity": "sha512-5OVapq0ClabvKvQ58Bws8+wkLCV+Rxg7tUVbo9xu034Nm536QTII4YzhaFriQ7rMrorfnFKUsArD2lqKbFY4vw==",
       "cpu": [
         "arm"
       ],
@@ -2677,9 +3215,9 @@
       }
     },
     "node_modules/@esbuild/android-arm64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.20.0.tgz",
-      "integrity": "sha512-aVpnM4lURNkp0D3qPoAzSG92VXStYmoVPOgXveAUoQBWRSuQzt51yvSju29J6AHPmwY1BjH49uR29oyfH1ra8Q==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.19.11.tgz",
+      "integrity": "sha512-aiu7K/5JnLj//KOnOfEZ0D90obUkRzDMyqd/wNAUQ34m4YUPVhRZpnqKV9uqDGxT7cToSDnIHsGooyIczu9T+Q==",
       "cpu": [
         "arm64"
       ],
@@ -2693,9 +3231,9 @@
       }
     },
     "node_modules/@esbuild/android-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.20.0.tgz",
-      "integrity": "sha512-uK7wAnlRvjkCPzh8jJ+QejFyrP8ObKuR5cBIsQZ+qbMunwR8sbd8krmMbxTLSrDhiPZaJYKQAU5Y3iMDcZPhyQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.19.11.tgz",
+      "integrity": "sha512-eccxjlfGw43WYoY9QgB82SgGgDbibcqyDTlk3l3C0jOVHKxrjdc9CTwDUQd0vkvYg5um0OH+GpxYvp39r+IPOg==",
       "cpu": [
         "x64"
       ],
@@ -2709,9 +3247,9 @@
       }
     },
     "node_modules/@esbuild/darwin-arm64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.20.0.tgz",
-      "integrity": "sha512-AjEcivGAlPs3UAcJedMa9qYg9eSfU6FnGHJjT8s346HSKkrcWlYezGE8VaO2xKfvvlZkgAhyvl06OJOxiMgOYQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.19.11.tgz",
+      "integrity": "sha512-ETp87DRWuSt9KdDVkqSoKoLFHYTrkyz2+65fj9nfXsaV3bMhTCjtQfw3y+um88vGRKRiF7erPrh/ZuIdLUIVxQ==",
       "cpu": [
         "arm64"
       ],
@@ -2725,9 +3263,9 @@
       }
     },
     "node_modules/@esbuild/darwin-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.20.0.tgz",
-      "integrity": "sha512-bsgTPoyYDnPv8ER0HqnJggXK6RyFy4PH4rtsId0V7Efa90u2+EifxytE9pZnsDgExgkARy24WUQGv9irVbTvIw==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.19.11.tgz",
+      "integrity": "sha512-fkFUiS6IUK9WYUO/+22omwetaSNl5/A8giXvQlcinLIjVkxwTLSktbF5f/kJMftM2MJp9+fXqZ5ezS7+SALp4g==",
       "cpu": [
         "x64"
       ],
@@ -2741,9 +3279,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-arm64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.20.0.tgz",
-      "integrity": "sha512-kQ7jYdlKS335mpGbMW5tEe3IrQFIok9r84EM3PXB8qBFJPSc6dpWfrtsC/y1pyrz82xfUIn5ZrnSHQQsd6jebQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.11.tgz",
+      "integrity": "sha512-lhoSp5K6bxKRNdXUtHoNc5HhbXVCS8V0iZmDvyWvYq9S5WSfTIHU2UGjcGt7UeS6iEYp9eeymIl5mJBn0yiuxA==",
       "cpu": [
         "arm64"
       ],
@@ -2757,9 +3295,9 @@
       }
     },
     "node_modules/@esbuild/freebsd-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.20.0.tgz",
-      "integrity": "sha512-uG8B0WSepMRsBNVXAQcHf9+Ko/Tr+XqmK7Ptel9HVmnykupXdS4J7ovSQUIi0tQGIndhbqWLaIL/qO/cWhXKyQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.19.11.tgz",
+      "integrity": "sha512-JkUqn44AffGXitVI6/AbQdoYAq0TEullFdqcMY/PCUZ36xJ9ZJRtQabzMA+Vi7r78+25ZIBosLTOKnUXBSi1Kw==",
       "cpu": [
         "x64"
       ],
@@ -2773,9 +3311,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.20.0.tgz",
-      "integrity": "sha512-2ezuhdiZw8vuHf1HKSf4TIk80naTbP9At7sOqZmdVwvvMyuoDiZB49YZKLsLOfKIr77+I40dWpHVeY5JHpIEIg==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.19.11.tgz",
+      "integrity": "sha512-3CRkr9+vCV2XJbjwgzjPtO8T0SZUmRZla+UL1jw+XqHZPkPgZiyWvbDvl9rqAN8Zl7qJF0O/9ycMtjU67HN9/Q==",
       "cpu": [
         "arm"
       ],
@@ -2789,9 +3327,9 @@
       }
     },
     "node_modules/@esbuild/linux-arm64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.20.0.tgz",
-      "integrity": "sha512-uTtyYAP5veqi2z9b6Gr0NUoNv9F/rOzI8tOD5jKcCvRUn7T60Bb+42NDBCWNhMjkQzI0qqwXkQGo1SY41G52nw==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.19.11.tgz",
+      "integrity": "sha512-LneLg3ypEeveBSMuoa0kwMpCGmpu8XQUh+mL8XXwoYZ6Be2qBnVtcDI5azSvh7vioMDhoJFZzp9GWp9IWpYoUg==",
       "cpu": [
         "arm64"
       ],
@@ -2805,9 +3343,9 @@
       }
     },
     "node_modules/@esbuild/linux-ia32": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.20.0.tgz",
-      "integrity": "sha512-c88wwtfs8tTffPaoJ+SQn3y+lKtgTzyjkD8NgsyCtCmtoIC8RDL7PrJU05an/e9VuAke6eJqGkoMhJK1RY6z4w==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.19.11.tgz",
+      "integrity": "sha512-caHy++CsD8Bgq2V5CodbJjFPEiDPq8JJmBdeyZ8GWVQMjRD0sU548nNdwPNvKjVpamYYVL40AORekgfIubwHoA==",
       "cpu": [
         "ia32"
       ],
@@ -2821,9 +3359,9 @@
       }
     },
     "node_modules/@esbuild/linux-loong64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.20.0.tgz",
-      "integrity": "sha512-lR2rr/128/6svngnVta6JN4gxSXle/yZEZL3o4XZ6esOqhyR4wsKyfu6qXAL04S4S5CgGfG+GYZnjFd4YiG3Aw==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.19.11.tgz",
+      "integrity": "sha512-ppZSSLVpPrwHccvC6nQVZaSHlFsvCQyjnvirnVjbKSHuE5N24Yl8F3UwYUUR1UEPaFObGD2tSvVKbvR+uT1Nrg==",
       "cpu": [
         "loong64"
       ],
@@ -2837,9 +3375,9 @@
       }
     },
     "node_modules/@esbuild/linux-mips64el": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.20.0.tgz",
-      "integrity": "sha512-9Sycc+1uUsDnJCelDf6ZNqgZQoK1mJvFtqf2MUz4ujTxGhvCWw+4chYfDLPepMEvVL9PDwn6HrXad5yOrNzIsQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.19.11.tgz",
+      "integrity": "sha512-B5x9j0OgjG+v1dF2DkH34lr+7Gmv0kzX6/V0afF41FkPMMqaQ77pH7CrhWeR22aEeHKaeZVtZ6yFwlxOKPVFyg==",
       "cpu": [
         "mips64el"
       ],
@@ -2853,9 +3391,9 @@
       }
     },
     "node_modules/@esbuild/linux-ppc64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.20.0.tgz",
-      "integrity": "sha512-CoWSaaAXOZd+CjbUTdXIJE/t7Oz+4g90A3VBCHLbfuc5yUQU/nFDLOzQsN0cdxgXd97lYW/psIIBdjzQIwTBGw==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.19.11.tgz",
+      "integrity": "sha512-MHrZYLeCG8vXblMetWyttkdVRjQlQUb/oMgBNurVEnhj4YWOr4G5lmBfZjHYQHHN0g6yDmCAQRR8MUHldvvRDA==",
       "cpu": [
         "ppc64"
       ],
@@ -2869,9 +3407,9 @@
       }
     },
     "node_modules/@esbuild/linux-riscv64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.20.0.tgz",
-      "integrity": "sha512-mlb1hg/eYRJUpv8h/x+4ShgoNLL8wgZ64SUr26KwglTYnwAWjkhR2GpoKftDbPOCnodA9t4Y/b68H4J9XmmPzA==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.19.11.tgz",
+      "integrity": "sha512-f3DY++t94uVg141dozDu4CCUkYW+09rWtaWfnb3bqe4w5NqmZd6nPVBm+qbz7WaHZCoqXqHz5p6CM6qv3qnSSQ==",
       "cpu": [
         "riscv64"
       ],
@@ -2885,9 +3423,9 @@
       }
     },
     "node_modules/@esbuild/linux-s390x": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.20.0.tgz",
-      "integrity": "sha512-fgf9ubb53xSnOBqyvWEY6ukBNRl1mVX1srPNu06B6mNsNK20JfH6xV6jECzrQ69/VMiTLvHMicQR/PgTOgqJUQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.19.11.tgz",
+      "integrity": "sha512-A5xdUoyWJHMMlcSMcPGVLzYzpcY8QP1RtYzX5/bS4dvjBGVxdhuiYyFwp7z74ocV7WDc0n1harxmpq2ePOjI0Q==",
       "cpu": [
         "s390x"
       ],
@@ -2901,9 +3439,9 @@
       }
     },
     "node_modules/@esbuild/linux-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.20.0.tgz",
-      "integrity": "sha512-H9Eu6MGse++204XZcYsse1yFHmRXEWgadk2N58O/xd50P9EvFMLJTQLg+lB4E1cF2xhLZU5luSWtGTb0l9UeSg==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.19.11.tgz",
+      "integrity": "sha512-grbyMlVCvJSfxFQUndw5mCtWs5LO1gUlwP4CDi4iJBbVpZcqLVT29FxgGuBJGSzyOxotFG4LoO5X+M1350zmPA==",
       "cpu": [
         "x64"
       ],
@@ -2917,9 +3455,9 @@
       }
     },
     "node_modules/@esbuild/netbsd-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.20.0.tgz",
-      "integrity": "sha512-lCT675rTN1v8Fo+RGrE5KjSnfY0x9Og4RN7t7lVrN3vMSjy34/+3na0q7RIfWDAj0e0rCh0OL+P88lu3Rt21MQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.19.11.tgz",
+      "integrity": "sha512-13jvrQZJc3P230OhU8xgwUnDeuC/9egsjTkXN49b3GcS5BKvJqZn86aGM8W9pd14Kd+u7HuFBMVtrNGhh6fHEQ==",
       "cpu": [
         "x64"
       ],
@@ -2933,9 +3471,9 @@
       }
     },
     "node_modules/@esbuild/openbsd-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.20.0.tgz",
-      "integrity": "sha512-HKoUGXz/TOVXKQ+67NhxyHv+aDSZf44QpWLa3I1lLvAwGq8x1k0T+e2HHSRvxWhfJrFxaaqre1+YyzQ99KixoA==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.19.11.tgz",
+      "integrity": "sha512-ysyOGZuTp6SNKPE11INDUeFVVQFrhcNDVUgSQVDzqsqX38DjhPEPATpid04LCoUr2WXhQTEZ8ct/EgJCUDpyNw==",
       "cpu": [
         "x64"
       ],
@@ -2949,9 +3487,9 @@
       }
     },
     "node_modules/@esbuild/sunos-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.20.0.tgz",
-      "integrity": "sha512-GDwAqgHQm1mVoPppGsoq4WJwT3vhnz/2N62CzhvApFD1eJyTroob30FPpOZabN+FgCjhG+AgcZyOPIkR8dfD7g==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.19.11.tgz",
+      "integrity": "sha512-Hf+Sad9nVwvtxy4DXCZQqLpgmRTQqyFyhT3bZ4F2XlJCjxGmRFF0Shwn9rzhOYRB61w9VMXUkxlBy56dk9JJiQ==",
       "cpu": [
         "x64"
       ],
@@ -2965,9 +3503,9 @@
       }
     },
     "node_modules/@esbuild/win32-arm64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.20.0.tgz",
-      "integrity": "sha512-0vYsP8aC4TvMlOQYozoksiaxjlvUcQrac+muDqj1Fxy6jh9l9CZJzj7zmh8JGfiV49cYLTorFLxg7593pGldwQ==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.19.11.tgz",
+      "integrity": "sha512-0P58Sbi0LctOMOQbpEOvOL44Ne0sqbS0XWHMvvrg6NE5jQ1xguCSSw9jQeUk2lfrXYsKDdOe6K+oZiwKPilYPQ==",
       "cpu": [
         "arm64"
       ],
@@ -2981,9 +3519,9 @@
       }
     },
     "node_modules/@esbuild/win32-ia32": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.20.0.tgz",
-      "integrity": "sha512-p98u4rIgfh4gdpV00IqknBD5pC84LCub+4a3MO+zjqvU5MVXOc3hqR2UgT2jI2nh3h8s9EQxmOsVI3tyzv1iFg==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.19.11.tgz",
+      "integrity": "sha512-6YOrWS+sDJDmshdBIQU+Uoyh7pQKrdykdefC1avn76ss5c+RN6gut3LZA4E2cH5xUEp5/cA0+YxRaVtRAb0xBg==",
       "cpu": [
         "ia32"
       ],
@@ -2997,9 +3535,9 @@
       }
     },
     "node_modules/@esbuild/win32-x64": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.20.0.tgz",
-      "integrity": "sha512-NgJnesu1RtWihtTtXGFMU5YSE6JyyHPMxCwBZK7a6/8d31GuSo9l0Ss7w1Jw5QnKUawG6UEehs883kcXf5fYwg==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.19.11.tgz",
+      "integrity": "sha512-vfkhltrjCAb603XaFhqhAF4LGDi2M4OrCRrFusyQ+iTLQ/o60QQXxc9cZC/FFpihBI9N1Grn6SMKVJ4KP7Fuiw==",
       "cpu": [
         "x64"
       ],
@@ -3081,16 +3619,6 @@
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
       "dev": true
     },
-    "node_modules/@eslint/eslintrc/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/@eslint/eslintrc/node_modules/globals": {
       "version": "13.24.0",
       "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
@@ -3125,15 +3653,15 @@
       "dev": true
     },
     "node_modules/@eslint/eslintrc/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/@eslint/eslintrc/node_modules/type-fest": {
@@ -3149,31 +3677,35 @@
       }
     },
     "node_modules/@eslint/js": {
-      "version": "8.57.0",
-      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.57.0.tgz",
-      "integrity": "sha512-Ys+3g2TaW7gADOJzPt83SJtCDhMjndcDMFVQ/Tj9iA1BfJzFKD9mAUXT3OenpuPHbI6P/myECxRJrofUsDx/5g==",
+      "version": "8.56.0",
+      "resolved": "https://registry.npmjs.org/@eslint/js/-/js-8.56.0.tgz",
+      "integrity": "sha512-gMsVel9D7f2HLkBma9VbtzZRehRogVRfbr++f06nL2vnCGCNlzOD+/MUov/F4p8myyAHspEhVobgjpX64q5m6A==",
       "dev": true,
       "engines": {
         "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       }
     },
+    "node_modules/@everyboard/lib": {
+      "resolved": "lib",
+      "link": true
+    },
     "node_modules/@fastify/busboy": {
-      "version": "2.1.1",
-      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-2.1.1.tgz",
-      "integrity": "sha512-vBZP4NlzfOlerQTnba4aqZoMhE/a9HY7HRqoOPaETQcSQuWEIyZMHGfVu6w9wGtGK5fED5qRs2DteVCjOH60sA==",
+      "version": "2.1.0",
+      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-2.1.0.tgz",
+      "integrity": "sha512-+KpH+QxZU7O4675t3mnkQKcZZg56u+K/Ct2K+N2AZYNVK8kyeo/bI18tI8aPm3tvNNRyTWfj6s5tnGNlcbQRsA==",
       "engines": {
         "node": ">=14"
       }
     },
     "node_modules/@firebase/analytics": {
-      "version": "0.10.1",
-      "resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.1.tgz",
-      "integrity": "sha512-5mnH1aQa99J5lZMJwTNzIoRc4yGXHf+fOn+EoEWhCDA3XGPweGHcylCbqq+G1wVJmfILL57fohDMa8ftMZ+44g==",
+      "version": "0.10.0",
+      "resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.0.tgz",
+      "integrity": "sha512-Locv8gAqx0e+GX/0SI3dzmBY5e9kjVDtD+3zCFLJ0tH2hJwuCAiL+5WkHuxKj92rqQj/rvkBUCfA1ewlX2hehg==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/installations": "0.6.5",
+        "@firebase/component": "0.6.4",
+        "@firebase/installations": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3181,14 +3713,14 @@
       }
     },
     "node_modules/@firebase/analytics-compat": {
-      "version": "0.2.7",
-      "resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.7.tgz",
-      "integrity": "sha512-17VCly4P0VFBDqaaal7m1nhyYQwsygtaTpSsnc51sFPRrr9XIYtnD8ficon9fneEGEoJQ2g7OtASvhwX9EbK8g==",
+      "version": "0.2.6",
+      "resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.6.tgz",
+      "integrity": "sha512-4MqpVLFkGK7NJf/5wPEEP7ePBJatwYpyjgJ+wQHQGHfzaCDgntOnl9rL2vbVGGKCnRqWtZDIWhctB86UWXaX2Q==",
       "dependencies": {
-        "@firebase/analytics": "0.10.1",
+        "@firebase/analytics": "0.10.0",
         "@firebase/analytics-types": "0.8.0",
-        "@firebase/component": "0.6.5",
-        "@firebase/util": "1.9.4",
+        "@firebase/component": "0.6.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3201,25 +3733,25 @@
       "integrity": "sha512-iRP+QKI2+oz3UAh4nPEq14CsEjrjD6a5+fuypjScisAh9kXKFvdJOZJDwk7kikLvWVLGEs9+kIUS4LPQV7VZVw=="
     },
     "node_modules/@firebase/app": {
-      "version": "0.9.28",
-      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.9.28.tgz",
-      "integrity": "sha512-MS0+EtNixrwJbVDs5Bt/lhUhzeWGUtUoP6X+zYZck5GAZwI5g4F91noVA9oIXlFlpn6Q1xIbiaHA2GwGk7/7Ag==",
+      "version": "0.9.25",
+      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.9.25.tgz",
+      "integrity": "sha512-fX22gL5USXhOK21Hlh3oTeOzQZ6th6S2JrjXNEpBARmwzuUkqmVGVdsOCIFYIsLpK0dQE3o8xZnLrRg5wnzZ/g==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "idb": "7.1.1",
         "tslib": "^2.1.0"
       }
     },
     "node_modules/@firebase/app-check": {
-      "version": "0.8.2",
-      "resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.8.2.tgz",
-      "integrity": "sha512-A2B5+ldOguYAeqW1quFN5qNdruSNRrg4W59ag1Eq6QzxuHNIkrE+TrapfrW/z5NYFjCxAYqr/unVCgmk80Dwcg==",
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.8.1.tgz",
+      "integrity": "sha512-zi3vbM5tb/eGRWyiqf+1DXbxFu9Q07dnm46rweodgUpH9B8svxYkHfNwYWx7F5mjHU70SQDuaojH1We5ws9OKA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3227,15 +3759,15 @@
       }
     },
     "node_modules/@firebase/app-check-compat": {
-      "version": "0.3.9",
-      "resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.3.9.tgz",
-      "integrity": "sha512-7LxyupQ8XeEHRh72mO+tqm69kHT6KbWi2KtFMGedJ6tNbwzFzojcXESMKN8RpADXbYoQgY3loWMJjMx4r2Zt7w==",
+      "version": "0.3.8",
+      "resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.3.8.tgz",
+      "integrity": "sha512-EaETtChR4UgMokJFw+r6jfcIyCTUZSe0a6ivF37D9MxlG9G3wzK1COyXgxoX96GzXmDPc2aubX4PxCrdVHhrnA==",
       "dependencies": {
-        "@firebase/app-check": "0.8.2",
+        "@firebase/app-check": "0.8.1",
         "@firebase/app-check-types": "0.5.0",
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3253,14 +3785,14 @@
       "integrity": "sha512-uwSUj32Mlubybw7tedRzR24RP8M8JUVR3NPiMk3/Z4bCmgEKTlQBwMXrehDAZ2wF+TsBq0SN1c6ema71U/JPyQ=="
     },
     "node_modules/@firebase/app-compat": {
-      "version": "0.2.28",
-      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.2.28.tgz",
-      "integrity": "sha512-Mr2NbeM1Oaayuw5unUAMzt+7/MN+e2uklT1l87D+ZLJl2UvhZAZmMt74GjEI9N3sDYKMeszSbszBqtJ1fGVafQ==",
+      "version": "0.2.25",
+      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.2.25.tgz",
+      "integrity": "sha512-B/JtCp1FsTuzlh1tIGQpYM2AXps21/zlzpFsk5LRsROOTRhBcR2N45AyaONPFD06C0yS0Tw19foxADzHyOSC3A==",
       "dependencies": {
-        "@firebase/app": "0.9.28",
-        "@firebase/component": "0.6.5",
+        "@firebase/app": "0.9.25",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       }
     },
@@ -3270,15 +3802,15 @@
       "integrity": "sha512-AeweANOIo0Mb8GiYm3xhTEBVCmPwTYAu9Hcd2qSkLuga/6+j9b1Jskl5bpiSQWy9eJ/j5pavxj6eYogmnuzm+Q=="
     },
     "node_modules/@firebase/auth": {
-      "version": "1.6.1",
-      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.6.1.tgz",
-      "integrity": "sha512-oOuQVOxtxKr+kTTqEkkI2qXIeGbkNLpA8FzO030LF4KXmMcETqsPaIqw7Aw1Y4Zl82l1qpZtpc4vN4Da2qZdfQ==",
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.5.1.tgz",
+      "integrity": "sha512-sVi7rq2YneLGJFqHa5S6nDfCHix9yuVV3RLhj/pWPlB4a36ofXal4E6PJwpeMc8uLjWEr1aovYN1jkXWNB6Avw==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0",
-        "undici": "5.28.3"
+        "undici": "5.26.5"
       },
       "peerDependencies": {
         "@firebase/app": "0.x",
@@ -3291,25 +3823,25 @@
       }
     },
     "node_modules/@firebase/auth-compat": {
-      "version": "0.5.3",
-      "resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.5.3.tgz",
-      "integrity": "sha512-2pVtVEvu8P7SF6jSPfLPKWUClQFj+StqAZ0fD/uQ6mv8DyWn7AuuANFEu7Pv96JPcaL6Gy9jC5dFqjpptjqSRA==",
+      "version": "0.5.1",
+      "resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.5.1.tgz",
+      "integrity": "sha512-rgDZnrDoekRvtzXVji8Z61wxxkof6pTkjYEkybILrjM8tGP9tx4xa9qGpF4ax3AzF+rKr7mIa9NnoXEK4UNqmQ==",
       "dependencies": {
-        "@firebase/auth": "1.6.1",
+        "@firebase/auth": "1.5.1",
         "@firebase/auth-types": "0.12.0",
-        "@firebase/component": "0.6.5",
-        "@firebase/util": "1.9.4",
+        "@firebase/component": "0.6.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0",
-        "undici": "5.28.3"
+        "undici": "5.26.5"
       },
       "peerDependencies": {
         "@firebase/app-compat": "0.x"
       }
     },
     "node_modules/@firebase/auth-compat/node_modules/undici": {
-      "version": "5.28.3",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-5.28.3.tgz",
-      "integrity": "sha512-3ItfzbrhDlINjaP0duwnNsKpDQk3acHI3gVJ1z4fmwMK31k5G9OVIAMLSIaP6w4FaGkaAkN6zaQO9LUvZ1t7VA==",
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-5.26.5.tgz",
+      "integrity": "sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==",
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
       },
@@ -3332,9 +3864,9 @@
       }
     },
     "node_modules/@firebase/auth/node_modules/undici": {
-      "version": "5.28.3",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-5.28.3.tgz",
-      "integrity": "sha512-3ItfzbrhDlINjaP0duwnNsKpDQk3acHI3gVJ1z4fmwMK31k5G9OVIAMLSIaP6w4FaGkaAkN6zaQO9LUvZ1t7VA==",
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-5.26.5.tgz",
+      "integrity": "sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==",
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
       },
@@ -3343,63 +3875,63 @@
       }
     },
     "node_modules/@firebase/component": {
-      "version": "0.6.5",
-      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.5.tgz",
-      "integrity": "sha512-2tVDk1ixi12sbDmmfITK8lxSjmcb73BMF6Qwc3U44hN/J1Fi1QY/Hnnb6klFlbB9/G16a3J3d4nXykye2EADTw==",
+      "version": "0.6.4",
+      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.4.tgz",
+      "integrity": "sha512-rLMyrXuO9jcAUCaQXCMjCMUsWrba5fzHlNK24xz5j2W6A/SRmK8mZJ/hn7V0fViLbxC0lPMtrK1eYzk6Fg03jA==",
       "dependencies": {
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       }
     },
     "node_modules/@firebase/database": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.3.tgz",
-      "integrity": "sha512-9fjqLt9JzL46gw9+NRqsgQEMjgRwfd8XtzcKqG+UYyhVeFCdVRQ0Wp6Dw/dvYHnbH5vNEKzNv36dcB4p+PIAAA==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.2.tgz",
+      "integrity": "sha512-8X6NBJgUQzDz0xQVaCISoOLINKat594N2eBbMR3Mu/MH/ei4WM+aAMlsNzngF22eljXu1SILP5G3evkyvsG3Ng==",
       "dependencies": {
         "@firebase/app-check-interop-types": "0.3.0",
         "@firebase/auth-interop-types": "0.2.1",
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "faye-websocket": "0.11.4",
         "tslib": "^2.1.0"
       }
     },
     "node_modules/@firebase/database-compat": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.3.tgz",
-      "integrity": "sha512-7tHEOcMbK5jJzHWyphPux4osogH/adWwncxdMxdBpB9g1DNIyY4dcz1oJdlkXGM/i/AjUBesZsd5CuwTRTBNTw==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.2.tgz",
+      "integrity": "sha512-09ryJnXDvuycsxn8aXBzLhBTuCos3HEnCOBWY6hosxfYlNCGnLvG8YMlbSAt5eNhf7/00B095AEfDsdrrLjxqA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/database": "1.0.3",
-        "@firebase/database-types": "1.0.1",
+        "@firebase/component": "0.6.4",
+        "@firebase/database": "1.0.2",
+        "@firebase/database-types": "1.0.0",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       }
     },
     "node_modules/@firebase/database-types": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.1.tgz",
-      "integrity": "sha512-Tmcmx5XgiI7UVF/4oGg2P3AOTfq3WKEPsm2yf+uXtN7uG/a4WTWhVMrXGYRY2ZUL1xPxv9V33wQRJ+CcrUhVXw==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.0.tgz",
+      "integrity": "sha512-SjnXStoE0Q56HcFgNQ+9SsmJc0c8TqGARdI/T44KXy+Ets3r6x/ivhQozT66bMnCEjJRywYoxNurRTMlZF8VNg==",
       "dependencies": {
         "@firebase/app-types": "0.9.0",
-        "@firebase/util": "1.9.4"
+        "@firebase/util": "1.9.3"
       }
     },
     "node_modules/@firebase/firestore": {
-      "version": "4.4.3",
-      "resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.4.3.tgz",
-      "integrity": "sha512-Ix61zbeuTsHf0WFbk6+67n89Vzd9M8MMTdnz7c7z+BRE3BS5Vuc3gX5ZcHFjqPkQJ7rpLB1egHsYe4Przp5C2g==",
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.4.0.tgz",
+      "integrity": "sha512-VeDXD9PUjvcWY1tInBOMTIu2pijR3YYy+QAe5cxCo1Q1vW+aA/mpQHhebPM1J6b4Zd1MuUh8xpBRvH9ujKR56A==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "@firebase/webchannel-wrapper": "0.10.5",
         "@grpc/grpc-js": "~1.9.0",
         "@grpc/proto-loader": "^0.7.8",
         "tslib": "^2.1.0",
-        "undici": "5.28.3"
+        "undici": "5.26.5"
       },
       "engines": {
         "node": ">=10.10.0"
@@ -3409,14 +3941,14 @@
       }
     },
     "node_modules/@firebase/firestore-compat": {
-      "version": "0.3.26",
-      "resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.3.26.tgz",
-      "integrity": "sha512-dNrKiH5Cn6ItANV9nJI2Y0msKBj/skO7skDlRo/BUSQE1DKbNzumxpJEz+PK/PV1nTegnRgVvs47gpQeVWXtYQ==",
+      "version": "0.3.23",
+      "resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.3.23.tgz",
+      "integrity": "sha512-uUTBiP0GLVBETaOCfB11d33OWB8x1r2G1Xrl0sRK3Va0N5LJ/GRvKVSGfM7VScj+ypeHe8RpdwKoCqLpN1e+uA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/firestore": "4.4.3",
+        "@firebase/component": "0.6.4",
+        "@firebase/firestore": "4.4.0",
         "@firebase/firestore-types": "3.0.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3433,9 +3965,9 @@
       }
     },
     "node_modules/@firebase/firestore/node_modules/undici": {
-      "version": "5.28.3",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-5.28.3.tgz",
-      "integrity": "sha512-3ItfzbrhDlINjaP0duwnNsKpDQk3acHI3gVJ1z4fmwMK31k5G9OVIAMLSIaP6w4FaGkaAkN6zaQO9LUvZ1t7VA==",
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-5.26.5.tgz",
+      "integrity": "sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==",
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
       },
@@ -3444,31 +3976,31 @@
       }
     },
     "node_modules/@firebase/functions": {
-      "version": "0.11.2",
-      "resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.11.2.tgz",
-      "integrity": "sha512-2NULTYOZbu0rXczwfYdqQH0w1FmmYrKjTy1YPQSHLCAkMBdfewoKmVm4Lyo2vRn0H9ZndciLY7NszKDFt9MKCQ==",
+      "version": "0.11.0",
+      "resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.11.0.tgz",
+      "integrity": "sha512-n1PZxKnJ++k73Q8khTPwihlbeKo6emnGzE0hX6QVQJsMq82y/XKmNpw2t/q30VJgwaia3ZXU1fd1C5wHncL+Zg==",
       "dependencies": {
         "@firebase/app-check-interop-types": "0.3.0",
         "@firebase/auth-interop-types": "0.2.1",
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/messaging-interop-types": "0.2.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0",
-        "undici": "5.28.3"
+        "undici": "5.26.5"
       },
       "peerDependencies": {
         "@firebase/app": "0.x"
       }
     },
     "node_modules/@firebase/functions-compat": {
-      "version": "0.3.8",
-      "resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.3.8.tgz",
-      "integrity": "sha512-VDHSw6UOu8RxfgAY/q8e+Jn+9Fh60Fc28yck0yfMsi2e0BiWgonIMWkFspFGGLgOJebTHl+hc+9v91rhzU6xlg==",
+      "version": "0.3.6",
+      "resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.3.6.tgz",
+      "integrity": "sha512-RQpO3yuHtnkqLqExuAT2d0u3zh8SDbeBYK5EwSCBKI9mjrFeJRXBnd3pEG+x5SxGJLy56/5pQf73mwt0OuH5yg==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/functions": "0.11.2",
+        "@firebase/component": "0.6.4",
+        "@firebase/functions": "0.11.0",
         "@firebase/functions-types": "0.6.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3481,9 +4013,9 @@
       "integrity": "sha512-hfEw5VJtgWXIRf92ImLkgENqpL6IWpYaXVYiRkFY1jJ9+6tIhWM7IzzwbevwIIud/jaxKVdRzD7QBWfPmkwCYw=="
     },
     "node_modules/@firebase/functions/node_modules/undici": {
-      "version": "5.28.3",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-5.28.3.tgz",
-      "integrity": "sha512-3ItfzbrhDlINjaP0duwnNsKpDQk3acHI3gVJ1z4fmwMK31k5G9OVIAMLSIaP6w4FaGkaAkN6zaQO9LUvZ1t7VA==",
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-5.26.5.tgz",
+      "integrity": "sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==",
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
       },
@@ -3492,13 +4024,13 @@
       }
     },
     "node_modules/@firebase/installations": {
-      "version": "0.6.5",
-      "resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.5.tgz",
-      "integrity": "sha512-0xxnQWw8rSRzu0ZOCkZaO+MJ0LkDAfwwTB2Z1SxRK6FAz5xkxD1ZUwM0WbCRni49PKubCrZYOJ6yg7tSjU7AKA==",
+      "version": "0.6.4",
+      "resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.4.tgz",
+      "integrity": "sha512-u5y88rtsp7NYkCHC3ElbFBrPtieUybZluXyzl7+4BsIz4sqb4vSAuwHEUgCgCeaQhvsnxDEU6icly8U9zsJigA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/util": "1.9.4",
-        "idb": "7.1.1",
+        "@firebase/component": "0.6.4",
+        "@firebase/util": "1.9.3",
+        "idb": "7.0.1",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3506,14 +4038,14 @@
       }
     },
     "node_modules/@firebase/installations-compat": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.5.tgz",
-      "integrity": "sha512-usvoIaog5CHEw082HXLrKAZ1qd4hIC3N/LDe2NqBgI3pkGE/7auLVM4Gn5gvyryp0x8z/IP1+d9fkGUj2OaGLQ==",
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.4.tgz",
+      "integrity": "sha512-LI9dYjp0aT9Njkn9U4JRrDqQ6KXeAmFbRC0E7jI7+hxl5YmRWysq5qgQl22hcWpTk+cm3es66d/apoDU/A9n6Q==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/installations": "0.6.5",
+        "@firebase/component": "0.6.4",
+        "@firebase/installations": "0.6.4",
         "@firebase/installations-types": "0.5.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3528,6 +4060,11 @@
         "@firebase/app-types": "0.x"
       }
     },
+    "node_modules/@firebase/installations/node_modules/idb": {
+      "version": "7.0.1",
+      "resolved": "https://registry.npmjs.org/idb/-/idb-7.0.1.tgz",
+      "integrity": "sha512-UUxlE7vGWK5RfB/fDwEGgRf84DY/ieqNha6msMV99UsEMQhJ1RwbCd8AYBj3QMgnE3VZnfQvm4oKVCJTYlqIgg=="
+    },
     "node_modules/@firebase/logger": {
       "version": "0.4.0",
       "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.0.tgz",
@@ -3537,14 +4074,14 @@
       }
     },
     "node_modules/@firebase/messaging": {
-      "version": "0.12.6",
-      "resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.6.tgz",
-      "integrity": "sha512-IORsPp9IPWq4j4yEhTOZ6GAGi3gQwGc+4yexmTAlya+qeBRSdRnJg2iIU/aj+tcKDQYr9RQuQPgHHOdFIx//vA==",
+      "version": "0.12.5",
+      "resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.5.tgz",
+      "integrity": "sha512-i/rrEI2k9ueFhdIr8KQsptWGskrsnkC5TkohCTrJKz9P0C/PbNv14IAMkwhMJTqIur5VwuOnrUkc9Kdz7awekw==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/installations": "0.6.5",
+        "@firebase/component": "0.6.4",
+        "@firebase/installations": "0.6.4",
         "@firebase/messaging-interop-types": "0.2.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "idb": "7.1.1",
         "tslib": "^2.1.0"
       },
@@ -3553,13 +4090,13 @@
       }
     },
     "node_modules/@firebase/messaging-compat": {
-      "version": "0.2.6",
-      "resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.6.tgz",
-      "integrity": "sha512-Q2xC1s4L7Vpss7P7Gy6GuIS+xmJrf/vm9+gX76IK1Bo1TjoKwleCLHt1LHkPz5Rvqg5pTgzzI8qqPhBpZosFCg==",
+      "version": "0.2.5",
+      "resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.5.tgz",
+      "integrity": "sha512-qHQZxm4hEG8/HFU/ls5/bU+rpnlPDoZoqi3ATMeb6s4hovYV9+PfV5I7ZrKV5eFFv47Hx1PWLe5uPnS4e7gMwQ==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/messaging": "0.12.6",
-        "@firebase/util": "1.9.4",
+        "@firebase/component": "0.6.4",
+        "@firebase/messaging": "0.12.5",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3572,14 +4109,14 @@
       "integrity": "sha512-ujA8dcRuVeBixGR9CtegfpU4YmZf3Lt7QYkcj693FFannwNuZgfAYaTmbJ40dtjB81SAu6tbFPL9YLNT15KmOQ=="
     },
     "node_modules/@firebase/performance": {
-      "version": "0.6.5",
-      "resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.6.5.tgz",
-      "integrity": "sha512-OzAGcWhOqEFH9GdwUuY0oC5FSlnMejcnmSAhR+EjpI7exdDvixyLyCR4txjSHYNTbumrFBG+EP8GO11CNXRaJA==",
+      "version": "0.6.4",
+      "resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.6.4.tgz",
+      "integrity": "sha512-HfTn/bd8mfy/61vEqaBelNiNnvAbUtME2S25A67Nb34zVuCSCRIX4SseXY6zBnOFj3oLisaEqhVcJmVPAej67g==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/installations": "0.6.5",
+        "@firebase/component": "0.6.4",
+        "@firebase/installations": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3587,15 +4124,15 @@
       }
     },
     "node_modules/@firebase/performance-compat": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.5.tgz",
-      "integrity": "sha512-jJwJkVyDcIMBaVGrZ6CRGs4m5FCZsWB5QCWYI3FdsHyIa9/TfteNDilxj9wGciF2naFIHDW7TgE69U5dAH9Ktg==",
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.4.tgz",
+      "integrity": "sha512-nnHUb8uP9G8islzcld/k6Bg5RhX62VpbAb/Anj7IXs/hp32Eb2LqFPZK4sy3pKkBUO5wcrlRWQa6wKOxqlUqsg==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/performance": "0.6.5",
+        "@firebase/performance": "0.6.4",
         "@firebase/performance-types": "0.2.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3608,14 +4145,14 @@
       "integrity": "sha512-kYrbr8e/CYr1KLrLYZZt2noNnf+pRwDq2KK9Au9jHrBMnb0/C9X9yWSXmZkFt4UIdsQknBq8uBB7fsybZdOBTA=="
     },
     "node_modules/@firebase/remote-config": {
-      "version": "0.4.5",
-      "resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.4.5.tgz",
-      "integrity": "sha512-rGLqc/4OmxrS39RA9kgwa6JmgWytQuMo+B8pFhmGp3d++x2Hf9j+MLQfhOLyyUo64fNw20J19mLXhrXvKHsjZQ==",
+      "version": "0.4.4",
+      "resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.4.4.tgz",
+      "integrity": "sha512-x1ioTHGX8ZwDSTOVp8PBLv2/wfwKzb4pxi0gFezS5GCJwbLlloUH4YYZHHS83IPxnua8b6l0IXUaWd0RgbWwzQ==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/installations": "0.6.5",
+        "@firebase/component": "0.6.4",
+        "@firebase/installations": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3623,15 +4160,15 @@
       }
     },
     "node_modules/@firebase/remote-config-compat": {
-      "version": "0.2.5",
-      "resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.5.tgz",
-      "integrity": "sha512-ImkNnLuGrD/bylBHDJigSY6LMwRrwt37wQbsGZhWG4QQ6KLzHzSf0nnFRRFvkOZodEUE57Ib8l74d6Yn/6TDUQ==",
+      "version": "0.2.4",
+      "resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.4.tgz",
+      "integrity": "sha512-FKiki53jZirrDFkBHglB3C07j5wBpitAaj8kLME6g8Mx+aq7u9P7qfmuSRytiOItADhWUj7O1JIv7n9q87SuwA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
+        "@firebase/component": "0.6.4",
         "@firebase/logger": "0.4.0",
-        "@firebase/remote-config": "0.4.5",
+        "@firebase/remote-config": "0.4.4",
         "@firebase/remote-config-types": "0.3.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3644,28 +4181,28 @@
       "integrity": "sha512-RtEH4vdcbXZuZWRZbIRmQVBNsE7VDQpet2qFvq6vwKLBIQRQR5Kh58M4ok3A3US8Sr3rubYnaGqZSurCwI8uMA=="
     },
     "node_modules/@firebase/storage": {
-      "version": "0.12.2",
-      "resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.12.2.tgz",
-      "integrity": "sha512-MzanOBcxDx9oOwDaDPMuiYxd6CxcN1xZm+os5uNE3C1itbRKLhM9rzpODDKWzcbnHHFtXk3Q3lsK/d3Xa1WYYw==",
+      "version": "0.12.0",
+      "resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.12.0.tgz",
+      "integrity": "sha512-SGs02Y/mmWBRsqZiYLpv4Sf7uZYZzMWVNN+aKiDqPsFBCzD6hLvGkXz+u98KAl8FqcjgB8BtSu01wm4pm76KHA==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/util": "1.9.4",
+        "@firebase/component": "0.6.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0",
-        "undici": "5.28.3"
+        "undici": "5.26.5"
       },
       "peerDependencies": {
         "@firebase/app": "0.x"
       }
     },
     "node_modules/@firebase/storage-compat": {
-      "version": "0.3.5",
-      "resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.3.5.tgz",
-      "integrity": "sha512-5dJXfY5NxCF5NAk4dLvJqC+m6cgcf0Fr29nrMHwhwI34pBheQq2PdRZqALsqZCES9dnHTuFNlqGQDpLr+Ph4rw==",
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.3.3.tgz",
+      "integrity": "sha512-WNtjYPhpOA1nKcRu5lIodX0wZtP8pI0VxDJnk6lr+av7QZNS1s6zvr+ERDTve+Qu4Hq/ZnNaf3kBEQR2ccXn6A==",
       "dependencies": {
-        "@firebase/component": "0.6.5",
-        "@firebase/storage": "0.12.2",
+        "@firebase/component": "0.6.4",
+        "@firebase/storage": "0.12.0",
         "@firebase/storage-types": "0.8.0",
-        "@firebase/util": "1.9.4",
+        "@firebase/util": "1.9.3",
         "tslib": "^2.1.0"
       },
       "peerDependencies": {
@@ -3682,9 +4219,9 @@
       }
     },
     "node_modules/@firebase/storage/node_modules/undici": {
-      "version": "5.28.3",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-5.28.3.tgz",
-      "integrity": "sha512-3ItfzbrhDlINjaP0duwnNsKpDQk3acHI3gVJ1z4fmwMK31k5G9OVIAMLSIaP6w4FaGkaAkN6zaQO9LUvZ1t7VA==",
+      "version": "5.26.5",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-5.26.5.tgz",
+      "integrity": "sha512-cSb4bPFd5qgR7qr2jYAi0hlX9n5YKK2ONKkLFkxl+v/9BvC0sOpZjBHDBSXc5lWAf5ty9oZdRXytBIHzgUcerw==",
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
       },
@@ -3693,9 +4230,9 @@
       }
     },
     "node_modules/@firebase/util": {
-      "version": "1.9.4",
-      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.9.4.tgz",
-      "integrity": "sha512-WLonYmS1FGHT97TsUmRN3qnTh5TeeoJp1Gg5fithzuAgdZOUtsYECfy7/noQ3llaguios8r5BuXSEiK82+UrxQ==",
+      "version": "1.9.3",
+      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.9.3.tgz",
+      "integrity": "sha512-DY02CRhOZwpzO36fHpuVysz6JZrscPiBXD0fXp6qSrL9oNOx5KWICKdR95C0lSITzxp0TZosVyHqzatE8JbcjA==",
       "dependencies": {
         "tslib": "^2.1.0"
       }
@@ -3978,26 +4515,16 @@
         "node": ">=10.10.0"
       }
     },
-    "node_modules/@humanwhocodes/config-array/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/@humanwhocodes/config-array/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/@humanwhocodes/module-importer": {
@@ -4153,57 +4680,56 @@
       }
     },
     "node_modules/@jridgewell/gen-mapping": {
-      "version": "0.3.5",
-      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.5.tgz",
-      "integrity": "sha512-IzL8ZoEDIBRWEzlCcRhOaCupYyN5gdIK+Q6fbFdPDg6HqX6jpkItn7DFIpW9LQzXG6Df9sA7+OKnq0qlz/GaQg==",
+      "version": "0.3.3",
+      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.3.tgz",
+      "integrity": "sha512-HLhSWOLRi875zjjMG/r+Nv0oCW8umGb0BgEhyX3dDX3egwZtB8PqLnjz3yedt8R5StBrzcg4aBpnh8UA9D1BoQ==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/set-array": "^1.2.1",
+        "@jridgewell/set-array": "^1.0.1",
         "@jridgewell/sourcemap-codec": "^1.4.10",
-        "@jridgewell/trace-mapping": "^0.3.24"
+        "@jridgewell/trace-mapping": "^0.3.9"
       },
       "engines": {
         "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/resolve-uri": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
-      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.1.tgz",
+      "integrity": "sha512-dSYZh7HhCDtCKm4QakX0xFpsRDqjjtZf/kjI/v3T3Nwt5r8/qz/M19F9ySyOqU94SXBmeG9ttTul+YnR4LOxFA==",
       "dev": true,
       "engines": {
         "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/set-array": {
-      "version": "1.2.1",
-      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.2.1.tgz",
-      "integrity": "sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==",
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
+      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
       "dev": true,
       "engines": {
         "node": ">=6.0.0"
       }
     },
     "node_modules/@jridgewell/source-map": {
-      "version": "0.3.6",
-      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.6.tgz",
-      "integrity": "sha512-1ZJTZebgqllO79ue2bm3rIGud/bOe0pP5BjSRCRxxYkEZS8STV7zN84UBbiYu7jy+eCKSnVIUgoWWE/tt+shMQ==",
+      "version": "0.3.5",
+      "resolved": "https://registry.npmjs.org/@jridgewell/source-map/-/source-map-0.3.5.tgz",
+      "integrity": "sha512-UTYAUj/wviwdsMfzoSJspJxbkH5o1snzwX0//0ENX1u/55kkZZkcTZP6u9bwKGkv+dkk9at4m1Cpt0uY80kcpQ==",
       "dev": true,
       "dependencies": {
-        "@jridgewell/gen-mapping": "^0.3.5",
-        "@jridgewell/trace-mapping": "^0.3.25"
+        "@jridgewell/gen-mapping": "^0.3.0",
+        "@jridgewell/trace-mapping": "^0.3.9"
       }
     },
     "node_modules/@jridgewell/sourcemap-codec": {
       "version": "1.4.15",
       "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.15.tgz",
-      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg==",
-      "dev": true
+      "integrity": "sha512-eF2rxCRulEKXHTRiDrDy6erMYWqNw4LPdQ8UQA4huuxaQsVeRPFl2oM8oDGxMFhJUWZf9McpLtJasDDZb/Bpeg=="
     },
     "node_modules/@jridgewell/trace-mapping": {
-      "version": "0.3.25",
-      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.25.tgz",
-      "integrity": "sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==",
+      "version": "0.3.21",
+      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.21.tgz",
+      "integrity": "sha512-SRfKmRe1KvYnxjEMtxEr+J4HIeMX5YBg/qhRHpxEIGjhX1rshcHlnFUE9K0GazhVKWM7B+nARSkV8LuvJdJ5/g==",
       "dev": true,
       "dependencies": {
         "@jridgewell/resolve-uri": "^3.1.0",
@@ -4233,21 +4759,21 @@
       "dev": true
     },
     "node_modules/@ljharb/through": {
-      "version": "2.3.13",
-      "resolved": "https://registry.npmjs.org/@ljharb/through/-/through-2.3.13.tgz",
-      "integrity": "sha512-/gKJun8NNiWGZJkGzI/Ragc53cOdcLNdzjLaIa+GEjguQs0ulsurx8WN0jijdK9yPqDvziX995sMRLyLt1uZMQ==",
+      "version": "2.3.11",
+      "resolved": "https://registry.npmjs.org/@ljharb/through/-/through-2.3.11.tgz",
+      "integrity": "sha512-ccfcIDlogiXNq5KcbAwbaO7lMh3Tm1i3khMPYpxlK8hH/W53zN81KM9coerRLOnTGu3nfXIniAmQbRI9OxbC0w==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7"
+        "call-bind": "^1.0.2"
       },
       "engines": {
         "node": ">= 0.4"
       }
     },
     "node_modules/@ngtools/webpack": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@ngtools/webpack/-/webpack-17.2.3.tgz",
-      "integrity": "sha512-+d5Q7/ctDHePYZXcg0GFwL/AbyEkPMHoCiT7pmLI0B0n87D/mYKK/qmVN1VANBrFLTuIe8RtcL0aJ9pw8HAxWA==",
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@ngtools/webpack/-/webpack-17.1.0.tgz",
+      "integrity": "sha512-FAp5Vh4Y4DFDnrxEitggEkeDwHCml7m6hZUgohvA6n6mwrMT0ZZXnk3MIrKRnT6A9cr1wcnxMW+jIXx/cJZGlw==",
       "dev": true,
       "engines": {
         "node": "^18.13.0 || >=20.9.0",
@@ -4296,9 +4822,9 @@
       }
     },
     "node_modules/@npmcli/agent": {
-      "version": "2.2.1",
-      "resolved": "https://registry.npmjs.org/@npmcli/agent/-/agent-2.2.1.tgz",
-      "integrity": "sha512-H4FrOVtNyWC8MUwL3UfjOsAihHvT1Pe8POj3JvjXhSTJipsZMtgUALCT4mGyYZNxymkUfOw3PUj6dE4QPp6osQ==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/@npmcli/agent/-/agent-2.2.0.tgz",
+      "integrity": "sha512-2yThA1Es98orMkpSLVqlDZAMPK3jHJhifP2gnNUdk1754uZ8yI5c+ulCoVG+WlntQA6MzhrURMXjSd9Z7dJ2/Q==",
       "devOptional": true,
       "dependencies": {
         "agent-base": "^7.1.0",
@@ -4312,9 +4838,9 @@
       }
     },
     "node_modules/@npmcli/agent/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
-      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
       "devOptional": true,
       "engines": {
         "node": "14 || >=16.14"
@@ -4361,9 +4887,9 @@
       }
     },
     "node_modules/@npmcli/git/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
-      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
       "dev": true,
       "engines": {
         "node": "14 || >=16.14"
@@ -4409,46 +4935,6 @@
         "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
-    "node_modules/@npmcli/package-json": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/@npmcli/package-json/-/package-json-5.0.0.tgz",
-      "integrity": "sha512-OI2zdYBLhQ7kpNPaJxiflofYIpkNLi+lnGdzqUOfRmCF3r2l1nadcjtCYMJKv/Utm/ZtlffaUuTiAktPHbc17g==",
-      "dev": true,
-      "dependencies": {
-        "@npmcli/git": "^5.0.0",
-        "glob": "^10.2.2",
-        "hosted-git-info": "^7.0.0",
-        "json-parse-even-better-errors": "^3.0.0",
-        "normalize-package-data": "^6.0.0",
-        "proc-log": "^3.0.0",
-        "semver": "^7.5.3"
-      },
-      "engines": {
-        "node": "^16.14.0 || >=18.0.0"
-      }
-    },
-    "node_modules/@npmcli/package-json/node_modules/glob": {
-      "version": "10.3.10",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.10.tgz",
-      "integrity": "sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==",
-      "dev": true,
-      "dependencies": {
-        "foreground-child": "^3.1.0",
-        "jackspeak": "^2.3.5",
-        "minimatch": "^9.0.1",
-        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0",
-        "path-scurry": "^1.10.1"
-      },
-      "bin": {
-        "glob": "dist/esm/bin.mjs"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/@npmcli/promise-spawn": {
       "version": "7.0.1",
       "resolved": "https://registry.npmjs.org/@npmcli/promise-spawn/-/promise-spawn-7.0.1.tgz",
@@ -4486,15 +4972,15 @@
       }
     },
     "node_modules/@npmcli/run-script": {
-      "version": "7.0.4",
-      "resolved": "https://registry.npmjs.org/@npmcli/run-script/-/run-script-7.0.4.tgz",
-      "integrity": "sha512-9ApYM/3+rBt9V80aYg6tZfzj3UWdiYyCt7gJUD1VJKvWF5nwKDSICXbYIQbspFTq6TOpbsEtIC0LArB8d9PFmg==",
+      "version": "7.0.3",
+      "resolved": "https://registry.npmjs.org/@npmcli/run-script/-/run-script-7.0.3.tgz",
+      "integrity": "sha512-ZMWGLHpzMq3rBGIwPyeaoaleaLMvrBrH8nugHxTi5ACkJZXTxXPtVuEH91ifgtss5hUwJQ2VDnzDBWPmz78rvg==",
       "dev": true,
       "dependencies": {
         "@npmcli/node-gyp": "^3.0.0",
-        "@npmcli/package-json": "^5.0.0",
         "@npmcli/promise-spawn": "^7.0.0",
         "node-gyp": "^10.0.0",
+        "read-package-json-fast": "^3.0.0",
         "which": "^4.0.0"
       },
       "engines": {
@@ -4759,9 +5245,9 @@
       }
     },
     "node_modules/@opentelemetry/api": {
-      "version": "1.8.0",
-      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.8.0.tgz",
-      "integrity": "sha512-I/s6F7yKUDdtMsoBWXJe8Qz40Tui5vsuKCWJEWVL+5q9sSWRzzx6v2KeNsOBEwd94j0eWkpWCH4yB6rZg9Mf0w==",
+      "version": "1.7.0",
+      "resolved": "https://registry.npmjs.org/@opentelemetry/api/-/api-1.7.0.tgz",
+      "integrity": "sha512-AdY5wvN0P2vXBi3b29hxZgSFvdhdxPB9+f0B6s//P9Q8nibRWeA3cHm8UmLpio9ABigkVHJ5NMPk+Mz8VCCyrw==",
       "engines": {
         "node": ">=8.0.0"
       }
@@ -4876,9 +5362,9 @@
       "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw=="
     },
     "node_modules/@rollup/rollup-android-arm-eabi": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.13.0.tgz",
-      "integrity": "sha512-5ZYPOuaAqEH/W3gYsRkxQATBW3Ii1MfaT4EQstTnLKViLi2gLSQmlmtTpGucNP3sXEpOiI5tdGhjdE111ekyEg==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm-eabi/-/rollup-android-arm-eabi-4.9.5.tgz",
+      "integrity": "sha512-idWaG8xeSRCfRq9KpRysDHJ/rEHBEXcHuJ82XY0yYFIWnLMjZv9vF/7DOq8djQ2n3Lk6+3qfSH8AqlmHlmi1MA==",
       "cpu": [
         "arm"
       ],
@@ -4889,9 +5375,9 @@
       ]
     },
     "node_modules/@rollup/rollup-android-arm64": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.13.0.tgz",
-      "integrity": "sha512-BSbaCmn8ZadK3UAQdlauSvtaJjhlDEjS5hEVVIN3A4bbl3X+otyf/kOJV08bYiRxfejP3DXFzO2jz3G20107+Q==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-android-arm64/-/rollup-android-arm64-4.9.5.tgz",
+      "integrity": "sha512-f14d7uhAMtsCGjAYwZGv6TwuS3IFaM4ZnGMUn3aCBgkcHAYErhV1Ad97WzBvS2o0aaDv4mVz+syiN0ElMyfBPg==",
       "cpu": [
         "arm64"
       ],
@@ -4902,9 +5388,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-arm64": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.13.0.tgz",
-      "integrity": "sha512-Ovf2evVaP6sW5Ut0GHyUSOqA6tVKfrTHddtmxGQc1CTQa1Cw3/KMCDEEICZBbyppcwnhMwcDce9ZRxdWRpVd6g==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-arm64/-/rollup-darwin-arm64-4.9.5.tgz",
+      "integrity": "sha512-ndoXeLx455FffL68OIUrVr89Xu1WLzAG4n65R8roDlCoYiQcGGg6MALvs2Ap9zs7AHg8mpHtMpwC8jBBjZrT/w==",
       "cpu": [
         "arm64"
       ],
@@ -4915,9 +5401,9 @@
       ]
     },
     "node_modules/@rollup/rollup-darwin-x64": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.13.0.tgz",
-      "integrity": "sha512-U+Jcxm89UTK592vZ2J9st9ajRv/hrwHdnvyuJpa5A2ngGSVHypigidkQJP+YiGL6JODiUeMzkqQzbCG3At81Gg==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-darwin-x64/-/rollup-darwin-x64-4.9.5.tgz",
+      "integrity": "sha512-UmElV1OY2m/1KEEqTlIjieKfVwRg0Zwg4PLgNf0s3glAHXBN99KLpw5A5lrSYCa1Kp63czTpVll2MAqbZYIHoA==",
       "cpu": [
         "x64"
       ],
@@ -4928,9 +5414,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm-gnueabihf": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.13.0.tgz",
-      "integrity": "sha512-8wZidaUJUTIR5T4vRS22VkSMOVooG0F4N+JSwQXWSRiC6yfEsFMLTYRFHvby5mFFuExHa/yAp9juSphQQJAijQ==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm-gnueabihf/-/rollup-linux-arm-gnueabihf-4.9.5.tgz",
+      "integrity": "sha512-Q0LcU61v92tQB6ae+udZvOyZ0wfpGojtAKrrpAaIqmJ7+psq4cMIhT/9lfV6UQIpeItnq/2QDROhNLo00lOD1g==",
       "cpu": [
         "arm"
       ],
@@ -4941,9 +5427,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-gnu": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.13.0.tgz",
-      "integrity": "sha512-Iu0Kno1vrD7zHQDxOmvweqLkAzjxEVqNhUIXBsZ8hu8Oak7/5VTPrxOEZXYC1nmrBVJp0ZcL2E7lSuuOVaE3+w==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-gnu/-/rollup-linux-arm64-gnu-4.9.5.tgz",
+      "integrity": "sha512-dkRscpM+RrR2Ee3eOQmRWFjmV/payHEOrjyq1VZegRUa5OrZJ2MAxBNs05bZuY0YCtpqETDy1Ix4i/hRqX98cA==",
       "cpu": [
         "arm64"
       ],
@@ -4954,9 +5440,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-arm64-musl": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.13.0.tgz",
-      "integrity": "sha512-C31QrW47llgVyrRjIwiOwsHFcaIwmkKi3PCroQY5aVq4H0A5v/vVVAtFsI1nfBngtoRpeREvZOkIhmRwUKkAdw==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-arm64-musl/-/rollup-linux-arm64-musl-4.9.5.tgz",
+      "integrity": "sha512-QaKFVOzzST2xzY4MAmiDmURagWLFh+zZtttuEnuNn19AiZ0T3fhPyjPPGwLNdiDT82ZE91hnfJsUiDwF9DClIQ==",
       "cpu": [
         "arm64"
       ],
@@ -4967,9 +5453,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-riscv64-gnu": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.13.0.tgz",
-      "integrity": "sha512-Oq90dtMHvthFOPMl7pt7KmxzX7E71AfyIhh+cPhLY9oko97Zf2C9tt/XJD4RgxhaGeAraAXDtqxvKE1y/j35lA==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-riscv64-gnu/-/rollup-linux-riscv64-gnu-4.9.5.tgz",
+      "integrity": "sha512-HeGqmRJuyVg6/X6MpE2ur7GbymBPS8Np0S/vQFHDmocfORT+Zt76qu+69NUoxXzGqVP1pzaY6QIi0FJWLC3OPA==",
       "cpu": [
         "riscv64"
       ],
@@ -4980,9 +5466,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-gnu": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.13.0.tgz",
-      "integrity": "sha512-yUD/8wMffnTKuiIsl6xU+4IA8UNhQ/f1sAnQebmE/lyQ8abjsVyDkyRkWop0kdMhKMprpNIhPmYlCxgHrPoXoA==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-gnu/-/rollup-linux-x64-gnu-4.9.5.tgz",
+      "integrity": "sha512-Dq1bqBdLaZ1Gb/l2e5/+o3B18+8TI9ANlA1SkejZqDgdU/jK/ThYaMPMJpVMMXy2uRHvGKbkz9vheVGdq3cJfA==",
       "cpu": [
         "x64"
       ],
@@ -4993,9 +5479,9 @@
       ]
     },
     "node_modules/@rollup/rollup-linux-x64-musl": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.13.0.tgz",
-      "integrity": "sha512-9RyNqoFNdF0vu/qqX63fKotBh43fJQeYC98hCaf89DYQpv+xu0D8QFSOS0biA7cGuqJFOc1bJ+m2rhhsKcw1hw==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-linux-x64-musl/-/rollup-linux-x64-musl-4.9.5.tgz",
+      "integrity": "sha512-ezyFUOwldYpj7AbkwyW9AJ203peub81CaAIVvckdkyH8EvhEIoKzaMFJj0G4qYJ5sw3BpqhFrsCc30t54HV8vg==",
       "cpu": [
         "x64"
       ],
@@ -5006,9 +5492,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-arm64-msvc": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.13.0.tgz",
-      "integrity": "sha512-46ue8ymtm/5PUU6pCvjlic0z82qWkxv54GTJZgHrQUuZnVH+tvvSP0LsozIDsCBFO4VjJ13N68wqrKSeScUKdA==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-arm64-msvc/-/rollup-win32-arm64-msvc-4.9.5.tgz",
+      "integrity": "sha512-aHSsMnUw+0UETB0Hlv7B/ZHOGY5bQdwMKJSzGfDfvyhnpmVxLMGnQPGNE9wgqkLUs3+gbG1Qx02S2LLfJ5GaRQ==",
       "cpu": [
         "arm64"
       ],
@@ -5019,9 +5505,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-ia32-msvc": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.13.0.tgz",
-      "integrity": "sha512-P5/MqLdLSlqxbeuJ3YDeX37srC8mCflSyTrUsgbU1c/U9j6l2g2GiIdYaGD9QjdMQPMSgYm7hgg0551wHyIluw==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-ia32-msvc/-/rollup-win32-ia32-msvc-4.9.5.tgz",
+      "integrity": "sha512-AiqiLkb9KSf7Lj/o1U3SEP9Zn+5NuVKgFdRIZkvd4N0+bYrTOovVd0+LmYCPQGbocT4kvFyK+LXCDiXPBF3fyA==",
       "cpu": [
         "ia32"
       ],
@@ -5032,9 +5518,9 @@
       ]
     },
     "node_modules/@rollup/rollup-win32-x64-msvc": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.13.0.tgz",
-      "integrity": "sha512-UKXUQNbO3DOhzLRwHSpa0HnhhCgNODvfoPWv2FCXme8N/ANFfhIPMGuOT+QuKd16+B5yxZ0HdpNlqPvTMS1qfw==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/@rollup/rollup-win32-x64-msvc/-/rollup-win32-x64-msvc-4.9.5.tgz",
+      "integrity": "sha512-1q+mykKE3Vot1kaFJIDoUFv5TuW+QQVaf2FmTT9krg86pQrGStOSJJ0Zil7CFagyxDuouTepzt5Y5TVzyajOdQ==",
       "cpu": [
         "x64"
       ],
@@ -5045,14 +5531,13 @@
       ]
     },
     "node_modules/@schematics/angular": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@schematics/angular/-/angular-17.2.3.tgz",
-      "integrity": "sha512-rXsYmWC1a8uvGTC6RwICwg1GLLQlTw8jOSqHf6T2AFMzP4p1FV3/GFSGyPIMl9yPwn6JqbmfQy3Bvj0stQNM0Q==",
-      "dev": true,
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@schematics/angular/-/angular-17.1.0.tgz",
+      "integrity": "sha512-u9pCesRWb6mVtLnFLSfZ8R21TDz8YCebAxViefWsJlb0+p0yknesVL1nG/Oi9tgfhczS991HGIVsLT41bZthUw==",
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
-        "@angular-devkit/schematics": "17.2.3",
-        "jsonc-parser": "3.2.1"
+        "@angular-devkit/core": "17.1.0",
+        "@angular-devkit/schematics": "17.1.0",
+        "jsonc-parser": "3.2.0"
       },
       "engines": {
         "node": "^18.13.0 || >=20.9.0",
@@ -5061,15 +5546,14 @@
       }
     },
     "node_modules/@schematics/angular/node_modules/@angular-devkit/core": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.2.3.tgz",
-      "integrity": "sha512-A7WWl1/VsZw6utFFPBib1wSbAB5OeBgAgQmVpVe9wW8u9UZa6CLc7b3InWtRRyBXTo9Sa5GNZDFfwlXhy3iW3w==",
-      "dev": true,
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/core/-/core-17.1.0.tgz",
+      "integrity": "sha512-w7HeJjyM6YtjXrwFdmFIsp9lzDPAFJov8hVCD18DZaCwryRixz+o8egfw2SkpI4L8kuGAiGxpaCTRsTQtmR4/w==",
       "dependencies": {
         "ajv": "8.12.0",
         "ajv-formats": "2.1.1",
-        "jsonc-parser": "3.2.1",
-        "picomatch": "4.0.1",
+        "jsonc-parser": "3.2.0",
+        "picomatch": "3.0.1",
         "rxjs": "7.8.1",
         "source-map": "0.7.4"
       },
@@ -5088,14 +5572,13 @@
       }
     },
     "node_modules/@schematics/angular/node_modules/@angular-devkit/schematics": {
-      "version": "17.2.3",
-      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.2.3.tgz",
-      "integrity": "sha512-JZCzHHheotv+iJ4p6qLc3pEi2M8NO12Slo6uiCg2T9B01glAcJB7DA1nwqjwD1cElf24Pt0C+HI0r+Lng48IsQ==",
-      "dev": true,
+      "version": "17.1.0",
+      "resolved": "https://registry.npmjs.org/@angular-devkit/schematics/-/schematics-17.1.0.tgz",
+      "integrity": "sha512-7q4Bk3+ePBdzrmMWxWBnNdN4kmBe2jJwa3vAofaMqZiIBEor85YcOsrUJvcWM/3+/TusgZr4p/4+oJgiYDrj5A==",
       "dependencies": {
-        "@angular-devkit/core": "17.2.3",
-        "jsonc-parser": "3.2.1",
-        "magic-string": "0.30.7",
+        "@angular-devkit/core": "17.1.0",
+        "jsonc-parser": "3.2.0",
+        "magic-string": "0.30.5",
         "ora": "5.4.1",
         "rxjs": "7.8.1"
       },
@@ -5105,45 +5588,67 @@
         "yarn": ">= 1.13.0"
       }
     },
+    "node_modules/@schematics/angular/node_modules/magic-string": {
+      "version": "0.30.5",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.5.tgz",
+      "integrity": "sha512-7xlpfBaQaP/T6Vh8MO/EqXSW5En6INHEvEXQiuff7Gku0PWjU3uf6w/j9o7O+SpB5fOAkrI5HeoNgwjEO0pFsA==",
+      "dependencies": {
+        "@jridgewell/sourcemap-codec": "^1.4.15"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/@schematics/angular/node_modules/picomatch": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-3.0.1.tgz",
+      "integrity": "sha512-I3EurrIQMlRc9IaAZnqRR044Phh2DXY+55o7uJ0V+hYZAcQYSuFWsc9q5PvyDHUSCe1Qxn/iBz+78s86zWnGag==",
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/jonschlinkert"
+      }
+    },
     "node_modules/@sigstore/bundle": {
-      "version": "2.2.0",
-      "resolved": "https://registry.npmjs.org/@sigstore/bundle/-/bundle-2.2.0.tgz",
-      "integrity": "sha512-5VI58qgNs76RDrwXNhpmyN/jKpq9evV/7f1XrcqcAfvxDl5SeVY/I5Rmfe96ULAV7/FK5dge9RBKGBJPhL1WsQ==",
+      "version": "2.1.1",
+      "resolved": "https://registry.npmjs.org/@sigstore/bundle/-/bundle-2.1.1.tgz",
+      "integrity": "sha512-v3/iS+1nufZdKQ5iAlQKcCsoh0jffQyABvYIxKsZQFWc4ubuGjwZklFHpDgV6O6T7vvV78SW5NHI91HFKEcxKg==",
       "dev": true,
       "dependencies": {
-        "@sigstore/protobuf-specs": "^0.3.0"
+        "@sigstore/protobuf-specs": "^0.2.1"
       },
       "engines": {
         "node": "^16.14.0 || >=18.0.0"
       }
     },
     "node_modules/@sigstore/core": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/@sigstore/core/-/core-1.0.0.tgz",
-      "integrity": "sha512-dW2qjbWLRKGu6MIDUTBuJwXCnR8zivcSpf5inUzk7y84zqy/dji0/uahppoIgMoKeR+6pUZucrwHfkQQtiG9Rw==",
+      "version": "0.2.0",
+      "resolved": "https://registry.npmjs.org/@sigstore/core/-/core-0.2.0.tgz",
+      "integrity": "sha512-THobAPPZR9pDH2CAvDLpkrYedt7BlZnsyxDe+Isq4ZmGfPy5juOFZq487vCU2EgKD7aHSiTfE/i7sN7aEdzQnA==",
       "dev": true,
       "engines": {
         "node": "^16.14.0 || >=18.0.0"
       }
     },
     "node_modules/@sigstore/protobuf-specs": {
-      "version": "0.3.0",
-      "resolved": "https://registry.npmjs.org/@sigstore/protobuf-specs/-/protobuf-specs-0.3.0.tgz",
-      "integrity": "sha512-zxiQ66JFOjVvP9hbhGj/F/qNdsZfkGb/dVXSanNRNuAzMlr4MC95voPUBX8//ZNnmv3uSYzdfR/JSkrgvZTGxA==",
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/@sigstore/protobuf-specs/-/protobuf-specs-0.2.1.tgz",
+      "integrity": "sha512-XTWVxnWJu+c1oCshMLwnKvz8ZQJJDVOlciMfgpJBQbThVjKTCG8dwyhgLngBD2KN0ap9F/gOV8rFDEx8uh7R2A==",
       "dev": true,
       "engines": {
         "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
     "node_modules/@sigstore/sign": {
-      "version": "2.2.3",
-      "resolved": "https://registry.npmjs.org/@sigstore/sign/-/sign-2.2.3.tgz",
-      "integrity": "sha512-LqlA+ffyN02yC7RKszCdMTS6bldZnIodiox+IkT8B2f8oRYXCB3LQ9roXeiEL21m64CVH1wyveYAORfD65WoSw==",
+      "version": "2.2.1",
+      "resolved": "https://registry.npmjs.org/@sigstore/sign/-/sign-2.2.1.tgz",
+      "integrity": "sha512-U5sKQEj+faE1MsnLou1f4DQQHeFZay+V9s9768lw48J4pKykPj34rWyI1lsMOGJ3Mae47Ye6q3HAJvgXO21rkQ==",
       "dev": true,
       "dependencies": {
-        "@sigstore/bundle": "^2.2.0",
-        "@sigstore/core": "^1.0.0",
-        "@sigstore/protobuf-specs": "^0.3.0",
+        "@sigstore/bundle": "^2.1.1",
+        "@sigstore/core": "^0.2.0",
+        "@sigstore/protobuf-specs": "^0.2.1",
         "make-fetch-happen": "^13.0.0"
       },
       "engines": {
@@ -5151,12 +5656,12 @@
       }
     },
     "node_modules/@sigstore/tuf": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/@sigstore/tuf/-/tuf-2.3.1.tgz",
-      "integrity": "sha512-9Iv40z652td/QbV0o5n/x25H9w6IYRt2pIGbTX55yFDYlApDQn/6YZomjz6+KBx69rXHLzHcbtTS586mDdFD+Q==",
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/@sigstore/tuf/-/tuf-2.3.0.tgz",
+      "integrity": "sha512-S98jo9cpJwO1mtQ+2zY7bOdcYyfVYCUaofCG6wWRzk3pxKHVAkSfshkfecto2+LKsx7Ovtqbgb2LS8zTRhxJ9Q==",
       "dev": true,
       "dependencies": {
-        "@sigstore/protobuf-specs": "^0.3.0",
+        "@sigstore/protobuf-specs": "^0.2.1",
         "tuf-js": "^2.2.0"
       },
       "engines": {
@@ -5164,14 +5669,14 @@
       }
     },
     "node_modules/@sigstore/verify": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@sigstore/verify/-/verify-1.1.0.tgz",
-      "integrity": "sha512-1fTqnqyTBWvV7cftUUFtDcHPdSox0N3Ub7C0lRyReYx4zZUlNTZjCV+HPy4Lre+r45dV7Qx5JLKvqqsgxuyYfg==",
+      "version": "0.1.0",
+      "resolved": "https://registry.npmjs.org/@sigstore/verify/-/verify-0.1.0.tgz",
+      "integrity": "sha512-2UzMNYAa/uaz11NhvgRnIQf4gpLTJ59bhb8ESXaoSS5sxedfS+eLak8bsdMc+qpNQfITUTFoSKFx5h8umlRRiA==",
       "dev": true,
       "dependencies": {
-        "@sigstore/bundle": "^2.2.0",
-        "@sigstore/core": "^1.0.0",
-        "@sigstore/protobuf-specs": "^0.3.0"
+        "@sigstore/bundle": "^2.1.1",
+        "@sigstore/core": "^0.2.0",
+        "@sigstore/protobuf-specs": "^0.2.1"
       },
       "engines": {
         "node": "^16.14.0 || >=18.0.0"
@@ -5194,6 +5699,30 @@
       "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
       "integrity": "sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA=="
     },
+    "node_modules/@tsconfig/node10": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node10/-/node10-1.0.9.tgz",
+      "integrity": "sha512-jNsYVVxU8v5g43Erja32laIDHXeoNvFEpX33OK4d6hljo3jDhCBDhx5dhCCTMWUojscpAagGiRkBKxpdl9fxqA==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node12": {
+      "version": "1.0.11",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node12/-/node12-1.0.11.tgz",
+      "integrity": "sha512-cqefuRsh12pWyGsIoBKJA9luFu3mRxCA+ORZvA4ktLSzIuCUtWVxGIuXigEwO5/ywWFMZ2QEGKWvkZG1zDMTag==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node14": {
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node14/-/node14-1.0.3.tgz",
+      "integrity": "sha512-ysT8mhdixWK6Hw3i1V2AeRqZ5WfXg1G43mqoYlM2nc6388Fq5jcXyr5mRsqViLx/GJYdoL0bfXD8nmF+Zn/Iow==",
+      "dev": true
+    },
+    "node_modules/@tsconfig/node16": {
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/@tsconfig/node16/-/node16-1.0.4.tgz",
+      "integrity": "sha512-vxhUy4J8lyeyinH7Azl1pdd43GJhZH/tP2weN8TntQblOY+A0XbT8DJk1/oCPuOOyg/Ja757rG0CgHcWC8OfMA==",
+      "dev": true
+    },
     "node_modules/@tufjs/canonical-json": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/@tufjs/canonical-json/-/canonical-json-2.0.0.tgz",
@@ -5216,10 +5745,22 @@
         "node": "^16.14.0 || >=18.0.0"
       }
     },
+    "node_modules/@tufjs/models/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/@types/babel__core": {
-      "version": "7.20.5",
-      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
-      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
+      "version": "7.20.2",
+      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.2.tgz",
+      "integrity": "sha512-pNpr1T1xLUc2l3xJKuPtsEky3ybxN3m4fJkknfIpTCTfIZCDW57oAg+EfCgIIp2rvCe0Wn++/FfodDS4YXxBwA==",
       "dev": true,
       "dependencies": {
         "@babel/parser": "^7.20.7",
@@ -5319,9 +5860,9 @@
       }
     },
     "node_modules/@types/eslint": {
-      "version": "8.56.5",
-      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.56.5.tgz",
-      "integrity": "sha512-u5/YPJHo1tvkSF2CE0USEkxon82Z5DBy2xR+qfyYNszpX9qcs4sT6uq2kBbj4BXY1+DBGDPnrhMZV3pKWGNukw==",
+      "version": "8.56.2",
+      "resolved": "https://registry.npmjs.org/@types/eslint/-/eslint-8.56.2.tgz",
+      "integrity": "sha512-uQDwm1wFHmbBbCZCqAlq6Do9LYwByNZHWzXppSnay9SuwJ+VRbjkbLABer54kcPnMSlG6Fdiy2yaFXm/z9Z5gw==",
       "dev": true,
       "dependencies": {
         "@types/estree": "*",
@@ -5357,9 +5898,9 @@
       }
     },
     "node_modules/@types/express-serve-static-core": {
-      "version": "4.17.43",
-      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.43.tgz",
-      "integrity": "sha512-oaYtiBirUOPQGSWNGPWnzyAFJ0BP3cwvN4oWZQY+zUBwpVIGsKUkpBpSztp74drYcjavs7SKFZ4DX1V2QeN8rg==",
+      "version": "4.17.41",
+      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.41.tgz",
+      "integrity": "sha512-OaJ7XLaelTgrvlZD8/aa0vvvxZdUmlCn6MtWeB7TkiKW70BQLc9XEPpDLPdbo52ZhXUCrznlWdCHWxJWtdyajA==",
       "dev": true,
       "dependencies": {
         "@types/node": "*",
@@ -5445,9 +5986,9 @@
       "integrity": "sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA=="
     },
     "node_modules/@types/node": {
-      "version": "20.11.26",
-      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.11.26.tgz",
-      "integrity": "sha512-YwOMmyhNnAWijOBQweOJnQPl068Oqd4K3OFbTc6AHJwzweUwwWG3GIFY74OKks2PJUDkQPeddOQES9mLn1CTEQ==",
+      "version": "20.11.5",
+      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.11.5.tgz",
+      "integrity": "sha512-g557vgQjUUfN76MZAN/dt1z3dzcUsimuysco0KeluHgrPdJXkP/XdAURgyO2W9fZWHRtRBiVKzKn8vyOAwlG+w==",
       "dependencies": {
         "undici-types": "~5.26.4"
       }
@@ -5468,9 +6009,9 @@
       "dev": true
     },
     "node_modules/@types/qs": {
-      "version": "6.9.12",
-      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.12.tgz",
-      "integrity": "sha512-bZcOkJ6uWrL0Qb2NAWKa7TBU+mJHPzhx9jjLL1KHF+XpzEcR7EXHvjbHlGtR/IsP1vyPrehuS6XqkmaePy//mg==",
+      "version": "6.9.11",
+      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.11.tgz",
+      "integrity": "sha512-oGk0gmhnEJK4Yyk+oI7EfXsLayXatCWPHary1MtcmbAifkobT9cM9yutG/hZKIseOU0MqbIwQ/u2nn/Gb+ltuQ==",
       "dev": true
     },
     "node_modules/@types/range-parser": {
@@ -5501,9 +6042,9 @@
       "dev": true
     },
     "node_modules/@types/semver": {
-      "version": "7.5.8",
-      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.5.8.tgz",
-      "integrity": "sha512-I8EUhyrgfLrcTkzV3TSsGyl1tSuPrEDzr0yd5m90UgNxQkyDXULk3b6MlQqTCpZpNtWe1K0hzclnZkTcLBe2UQ==",
+      "version": "7.5.6",
+      "resolved": "https://registry.npmjs.org/@types/semver/-/semver-7.5.6.tgz",
+      "integrity": "sha512-dn1l8LaMea/IjDoHNd9J52uBbInB796CDffS6VdIxvqYCPSG0V0DzHp76GpaWnlhg88uYyPbXCDIowa86ybd5A==",
       "dev": true
     },
     "node_modules/@types/send": {
@@ -5560,16 +6101,16 @@
       }
     },
     "node_modules/@typescript-eslint/eslint-plugin": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-7.2.0.tgz",
-      "integrity": "sha512-mdekAHOqS9UjlmyF/LSs6AIEvfceV749GFxoBAjwAv0nkevfKHWQFDMcBZWUiIC5ft6ePWivXoS36aKQ0Cy3sw==",
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-6.19.0.tgz",
+      "integrity": "sha512-DUCUkQNklCQYnrBSSikjVChdc84/vMPDQSgJTHBZ64G9bA9w0Crc0rd2diujKbTdp6w2J47qkeHQLoi0rpLCdg==",
       "dev": true,
       "dependencies": {
         "@eslint-community/regexpp": "^4.5.1",
-        "@typescript-eslint/scope-manager": "7.2.0",
-        "@typescript-eslint/type-utils": "7.2.0",
-        "@typescript-eslint/utils": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0",
+        "@typescript-eslint/scope-manager": "6.19.0",
+        "@typescript-eslint/type-utils": "6.19.0",
+        "@typescript-eslint/utils": "6.19.0",
+        "@typescript-eslint/visitor-keys": "6.19.0",
         "debug": "^4.3.4",
         "graphemer": "^1.4.0",
         "ignore": "^5.2.4",
@@ -5585,8 +6126,8 @@
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "@typescript-eslint/parser": "^7.0.0",
-        "eslint": "^8.56.0"
+        "@typescript-eslint/parser": "^6.0.0 || ^6.0.0-alpha",
+        "eslint": "^7.0.0 || ^8.0.0"
       },
       "peerDependenciesMeta": {
         "typescript": {
@@ -5594,31 +6135,14 @@
         }
       }
     },
-    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/scope-manager": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-7.2.0.tgz",
-      "integrity": "sha512-Qh976RbQM/fYtjx9hs4XkayYujB/aPwglw2choHmf3zBjB4qOywWSdt9+KLRdHubGcoSwBnXUH2sR3hkyaERRg==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0"
-      },
-      "engines": {
-        "node": "^16.0.0 || >=18.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      }
-    },
     "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/type-utils": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-7.2.0.tgz",
-      "integrity": "sha512-xHi51adBHo9O9330J8GQYQwrKBqbIPJGZZVQTHHmy200hvkLZFWJIFtAG/7IYTWUyun6DE6w5InDReePJYJlJA==",
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.19.0.tgz",
+      "integrity": "sha512-mcvS6WSWbjiSxKCwBcXtOM5pRkPQ6kcDds/juxcy/727IQr3xMEcwr/YLHW2A2+Fp5ql6khjbKBzOyjuPqGi/w==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/typescript-estree": "7.2.0",
-        "@typescript-eslint/utils": "7.2.0",
+        "@typescript-eslint/typescript-estree": "6.19.0",
+        "@typescript-eslint/utils": "6.19.0",
         "debug": "^4.3.4",
         "ts-api-utils": "^1.0.1"
       },
@@ -5630,7 +6154,7 @@
         "url": "https://opencollective.com/typescript-eslint"
       },
       "peerDependencies": {
-        "eslint": "^8.56.0"
+        "eslint": "^7.0.0 || ^8.0.0"
       },
       "peerDependenciesMeta": {
         "typescript": {
@@ -5638,33 +6162,42 @@
         }
       }
     },
-    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/types": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-7.2.0.tgz",
-      "integrity": "sha512-XFtUHPI/abFhm4cbCDc5Ykc8npOKBSJePY3a3s+lwumt7XWJuzP5cZcfZ610MIPHjQjNsOLlYK8ASPaNG8UiyA==",
+    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/utils": {
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.19.0.tgz",
+      "integrity": "sha512-QR41YXySiuN++/dC9UArYOg4X86OAYP83OWTewpVx5ct1IZhjjgTLocj7QNxGhWoTqknsgpl7L+hGygCO+sdYw==",
       "dev": true,
+      "dependencies": {
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@types/json-schema": "^7.0.12",
+        "@types/semver": "^7.5.0",
+        "@typescript-eslint/scope-manager": "6.19.0",
+        "@typescript-eslint/types": "6.19.0",
+        "@typescript-eslint/typescript-estree": "6.19.0",
+        "semver": "^7.5.4"
+      },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
       }
     },
-    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/typescript-estree": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-7.2.0.tgz",
-      "integrity": "sha512-cyxS5WQQCoBwSakpMrvMXuMDEbhOo9bNHHrNcEWis6XHx6KF518tkF1wBvKIn/tpq5ZpUYK7Bdklu8qY0MsFIA==",
+    "node_modules/@typescript-eslint/parser": {
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-6.19.0.tgz",
+      "integrity": "sha512-1DyBLG5SH7PYCd00QlroiW60YJ4rWMuUGa/JBV0iZuqi4l4IK3twKPq5ZkEebmGqRjXWVgsUzfd3+nZveewgow==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0",
-        "debug": "^4.3.4",
-        "globby": "^11.1.0",
-        "is-glob": "^4.0.3",
-        "minimatch": "9.0.3",
-        "semver": "^7.5.4",
-        "ts-api-utils": "^1.0.1"
+        "@typescript-eslint/scope-manager": "6.19.0",
+        "@typescript-eslint/types": "6.19.0",
+        "@typescript-eslint/typescript-estree": "6.19.0",
+        "@typescript-eslint/visitor-keys": "6.19.0",
+        "debug": "^4.3.4"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5673,25 +6206,23 @@
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
       },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
+      },
       "peerDependenciesMeta": {
         "typescript": {
           "optional": true
         }
       }
     },
-    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/utils": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-7.2.0.tgz",
-      "integrity": "sha512-YfHpnMAGb1Eekpm3XRK8hcMwGLGsnT6L+7b2XyRv6ouDuJU1tZir1GS2i0+VXRatMwSI1/UfcyPe53ADkU+IuA==",
+    "node_modules/@typescript-eslint/scope-manager": {
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.19.0.tgz",
+      "integrity": "sha512-dO1XMhV2ehBI6QN8Ufi7I10wmUovmLU0Oru3n5LVlM2JuzB4M+dVphCPLkVpKvGij2j/pHBWuJ9piuXx+BhzxQ==",
       "dev": true,
       "dependencies": {
-        "@eslint-community/eslint-utils": "^4.4.0",
-        "@types/json-schema": "^7.0.12",
-        "@types/semver": "^7.5.0",
-        "@typescript-eslint/scope-manager": "7.2.0",
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/typescript-estree": "7.2.0",
-        "semver": "^7.5.4"
+        "@typescript-eslint/types": "6.19.0",
+        "@typescript-eslint/visitor-keys": "6.19.0"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5699,20 +6230,40 @@
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^8.56.0"
       }
     },
-    "node_modules/@typescript-eslint/eslint-plugin/node_modules/@typescript-eslint/visitor-keys": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-7.2.0.tgz",
-      "integrity": "sha512-c6EIQRHhcpl6+tO8EMR+kjkkV+ugUNXOmeASA1rlzkd8EPIriavpWoiEz1HR/VLhbVIdhqnV6E7JZm00cBDx2A==",
+    "node_modules/@typescript-eslint/type-utils": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.18.0.tgz",
+      "integrity": "sha512-ZeMtrXnGmTcHciJN1+u2CigWEEXgy1ufoxtWcHORt5kGvpjjIlK9MUhzHm4RM8iVy6dqSaZA/6PVkX6+r+ChjQ==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "eslint-visitor-keys": "^3.4.1"
+        "@typescript-eslint/typescript-estree": "6.18.0",
+        "@typescript-eslint/utils": "6.18.0",
+        "debug": "^4.3.4",
+        "ts-api-utils": "^1.0.1"
+      },
+      "engines": {
+        "node": "^16.0.0 || >=18.0.0"
       },
+      "funding": {
+        "type": "opencollective",
+        "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
+      },
+      "peerDependenciesMeta": {
+        "typescript": {
+          "optional": true
+        }
+      }
+    },
+    "node_modules/@typescript-eslint/type-utils/node_modules/@typescript-eslint/types": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.18.0.tgz",
+      "integrity": "sha512-/RFVIccwkwSdW/1zeMx3hADShWbgBxBnV/qSrex6607isYjj05t36P6LyONgqdUrNLl5TYU8NIKdHUYpFvExkA==",
+      "dev": true,
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
       },
@@ -5721,17 +6272,20 @@
         "url": "https://opencollective.com/typescript-eslint"
       }
     },
-    "node_modules/@typescript-eslint/parser": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-7.2.0.tgz",
-      "integrity": "sha512-5FKsVcHTk6TafQKQbuIVkXq58Fnbkd2wDL4LB7AURN7RUOu1utVP+G8+6u3ZhEroW3DF6hyo3ZEXxgKgp4KeCg==",
+    "node_modules/@typescript-eslint/type-utils/node_modules/@typescript-eslint/typescript-estree": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.18.0.tgz",
+      "integrity": "sha512-klNvl+Ql4NsBNGB4W9TZ2Od03lm7aGvTbs0wYaFYsplVPhr+oeXjlPZCDI4U9jgJIDK38W1FKhacCFzCC+nbIg==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/scope-manager": "7.2.0",
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/typescript-estree": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0",
-        "debug": "^4.3.4"
+        "@typescript-eslint/types": "6.18.0",
+        "@typescript-eslint/visitor-keys": "6.18.0",
+        "debug": "^4.3.4",
+        "globby": "^11.1.0",
+        "is-glob": "^4.0.3",
+        "minimatch": "9.0.3",
+        "semver": "^7.5.4",
+        "ts-api-utils": "^1.0.1"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5740,23 +6294,20 @@
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
       },
-      "peerDependencies": {
-        "eslint": "^8.56.0"
-      },
       "peerDependenciesMeta": {
         "typescript": {
           "optional": true
         }
       }
     },
-    "node_modules/@typescript-eslint/parser/node_modules/@typescript-eslint/scope-manager": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-7.2.0.tgz",
-      "integrity": "sha512-Qh976RbQM/fYtjx9hs4XkayYujB/aPwglw2choHmf3zBjB4qOywWSdt9+KLRdHubGcoSwBnXUH2sR3hkyaERRg==",
+    "node_modules/@typescript-eslint/type-utils/node_modules/@typescript-eslint/visitor-keys": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-6.18.0.tgz",
+      "integrity": "sha512-1wetAlSZpewRDb2h9p/Q8kRjdGuqdTAQbkJIOUMLug2LBLG+QOjiWoSj6/3B/hA9/tVTFFdtiKvAYoYnSRW/RA==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0"
+        "@typescript-eslint/types": "6.18.0",
+        "eslint-visitor-keys": "^3.4.1"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5766,10 +6317,22 @@
         "url": "https://opencollective.com/typescript-eslint"
       }
     },
-    "node_modules/@typescript-eslint/parser/node_modules/@typescript-eslint/types": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-7.2.0.tgz",
-      "integrity": "sha512-XFtUHPI/abFhm4cbCDc5Ykc8npOKBSJePY3a3s+lwumt7XWJuzP5cZcfZ610MIPHjQjNsOLlYK8ASPaNG8UiyA==",
+    "node_modules/@typescript-eslint/type-utils/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
+    "node_modules/@typescript-eslint/types": {
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.19.0.tgz",
+      "integrity": "sha512-lFviGV/vYhOy3m8BJ/nAKoAyNhInTdXpftonhWle66XHAtT1ouBlkjL496b5H5hb8dWXHwtypTqgtb/DEa+j5A==",
       "dev": true,
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5779,14 +6342,14 @@
         "url": "https://opencollective.com/typescript-eslint"
       }
     },
-    "node_modules/@typescript-eslint/parser/node_modules/@typescript-eslint/typescript-estree": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-7.2.0.tgz",
-      "integrity": "sha512-cyxS5WQQCoBwSakpMrvMXuMDEbhOo9bNHHrNcEWis6XHx6KF518tkF1wBvKIn/tpq5ZpUYK7Bdklu8qY0MsFIA==",
+    "node_modules/@typescript-eslint/typescript-estree": {
+      "version": "6.19.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.19.0.tgz",
+      "integrity": "sha512-o/zefXIbbLBZ8YJ51NlkSAt2BamrK6XOmuxSR3hynMIzzyMY33KuJ9vuMdFSXW+H0tVvdF9qBPTHA91HDb4BIQ==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "@typescript-eslint/visitor-keys": "7.2.0",
+        "@typescript-eslint/types": "6.19.0",
+        "@typescript-eslint/visitor-keys": "6.19.0",
         "debug": "^4.3.4",
         "globby": "^11.1.0",
         "is-glob": "^4.0.3",
@@ -5807,31 +6370,31 @@
         }
       }
     },
-    "node_modules/@typescript-eslint/parser/node_modules/@typescript-eslint/visitor-keys": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-7.2.0.tgz",
-      "integrity": "sha512-c6EIQRHhcpl6+tO8EMR+kjkkV+ugUNXOmeASA1rlzkd8EPIriavpWoiEz1HR/VLhbVIdhqnV6E7JZm00cBDx2A==",
+    "node_modules/@typescript-eslint/typescript-estree/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "7.2.0",
-        "eslint-visitor-keys": "^3.4.1"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "^16.0.0 || >=18.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
+        "node": ">=10"
       }
     },
-    "node_modules/@typescript-eslint/scope-manager": {
-      "version": "6.19.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.19.0.tgz",
-      "integrity": "sha512-dO1XMhV2ehBI6QN8Ufi7I10wmUovmLU0Oru3n5LVlM2JuzB4M+dVphCPLkVpKvGij2j/pHBWuJ9piuXx+BhzxQ==",
+    "node_modules/@typescript-eslint/utils": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.18.0.tgz",
+      "integrity": "sha512-wiKKCbUeDPGaYEYQh1S580dGxJ/V9HI7K5sbGAVklyf+o5g3O+adnS4UNJajplF4e7z2q0uVBaTdT/yLb4XAVA==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "6.19.0",
-        "@typescript-eslint/visitor-keys": "6.19.0"
+        "@eslint-community/eslint-utils": "^4.4.0",
+        "@types/json-schema": "^7.0.12",
+        "@types/semver": "^7.5.0",
+        "@typescript-eslint/scope-manager": "6.18.0",
+        "@typescript-eslint/types": "6.18.0",
+        "@typescript-eslint/typescript-estree": "6.18.0",
+        "semver": "^7.5.4"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5839,18 +6402,19 @@
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
+      },
+      "peerDependencies": {
+        "eslint": "^7.0.0 || ^8.0.0"
       }
     },
-    "node_modules/@typescript-eslint/type-utils": {
-      "version": "6.19.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/type-utils/-/type-utils-6.19.0.tgz",
-      "integrity": "sha512-mcvS6WSWbjiSxKCwBcXtOM5pRkPQ6kcDds/juxcy/727IQr3xMEcwr/YLHW2A2+Fp5ql6khjbKBzOyjuPqGi/w==",
+    "node_modules/@typescript-eslint/utils/node_modules/@typescript-eslint/scope-manager": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/scope-manager/-/scope-manager-6.18.0.tgz",
+      "integrity": "sha512-o/UoDT2NgOJ2VfHpfr+KBY2ErWvCySNUIX/X7O9g8Zzt/tXdpfEU43qbNk8LVuWUT2E0ptzTWXh79i74PP0twA==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/typescript-estree": "6.19.0",
-        "@typescript-eslint/utils": "6.19.0",
-        "debug": "^4.3.4",
-        "ts-api-utils": "^1.0.1"
+        "@typescript-eslint/types": "6.18.0",
+        "@typescript-eslint/visitor-keys": "6.18.0"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5858,20 +6422,12 @@
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^7.0.0 || ^8.0.0"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
       }
     },
-    "node_modules/@typescript-eslint/types": {
-      "version": "6.19.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.19.0.tgz",
-      "integrity": "sha512-lFviGV/vYhOy3m8BJ/nAKoAyNhInTdXpftonhWle66XHAtT1ouBlkjL496b5H5hb8dWXHwtypTqgtb/DEa+j5A==",
+    "node_modules/@typescript-eslint/utils/node_modules/@typescript-eslint/types": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/types/-/types-6.18.0.tgz",
+      "integrity": "sha512-/RFVIccwkwSdW/1zeMx3hADShWbgBxBnV/qSrex6607isYjj05t36P6LyONgqdUrNLl5TYU8NIKdHUYpFvExkA==",
       "dev": true,
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5881,14 +6437,14 @@
         "url": "https://opencollective.com/typescript-eslint"
       }
     },
-    "node_modules/@typescript-eslint/typescript-estree": {
-      "version": "6.19.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.19.0.tgz",
-      "integrity": "sha512-o/zefXIbbLBZ8YJ51NlkSAt2BamrK6XOmuxSR3hynMIzzyMY33KuJ9vuMdFSXW+H0tVvdF9qBPTHA91HDb4BIQ==",
+    "node_modules/@typescript-eslint/utils/node_modules/@typescript-eslint/typescript-estree": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-6.18.0.tgz",
+      "integrity": "sha512-klNvl+Ql4NsBNGB4W9TZ2Od03lm7aGvTbs0wYaFYsplVPhr+oeXjlPZCDI4U9jgJIDK38W1FKhacCFzCC+nbIg==",
       "dev": true,
       "dependencies": {
-        "@typescript-eslint/types": "6.19.0",
-        "@typescript-eslint/visitor-keys": "6.19.0",
+        "@typescript-eslint/types": "6.18.0",
+        "@typescript-eslint/visitor-keys": "6.18.0",
         "debug": "^4.3.4",
         "globby": "^11.1.0",
         "is-glob": "^4.0.3",
@@ -5909,19 +6465,14 @@
         }
       }
     },
-    "node_modules/@typescript-eslint/utils": {
-      "version": "6.19.0",
-      "resolved": "https://registry.npmjs.org/@typescript-eslint/utils/-/utils-6.19.0.tgz",
-      "integrity": "sha512-QR41YXySiuN++/dC9UArYOg4X86OAYP83OWTewpVx5ct1IZhjjgTLocj7QNxGhWoTqknsgpl7L+hGygCO+sdYw==",
+    "node_modules/@typescript-eslint/utils/node_modules/@typescript-eslint/visitor-keys": {
+      "version": "6.18.0",
+      "resolved": "https://registry.npmjs.org/@typescript-eslint/visitor-keys/-/visitor-keys-6.18.0.tgz",
+      "integrity": "sha512-1wetAlSZpewRDb2h9p/Q8kRjdGuqdTAQbkJIOUMLug2LBLG+QOjiWoSj6/3B/hA9/tVTFFdtiKvAYoYnSRW/RA==",
       "dev": true,
       "dependencies": {
-        "@eslint-community/eslint-utils": "^4.4.0",
-        "@types/json-schema": "^7.0.12",
-        "@types/semver": "^7.5.0",
-        "@typescript-eslint/scope-manager": "6.19.0",
-        "@typescript-eslint/types": "6.19.0",
-        "@typescript-eslint/typescript-estree": "6.19.0",
-        "semver": "^7.5.4"
+        "@typescript-eslint/types": "6.18.0",
+        "eslint-visitor-keys": "^3.4.1"
       },
       "engines": {
         "node": "^16.0.0 || >=18.0.0"
@@ -5929,9 +6480,18 @@
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/typescript-eslint"
+      }
+    },
+    "node_modules/@typescript-eslint/utils/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
       },
-      "peerDependencies": {
-        "eslint": "^7.0.0 || ^8.0.0"
+      "engines": {
+        "node": ">=10"
       }
     },
     "node_modules/@typescript-eslint/visitor-keys": {
@@ -5958,9 +6518,9 @@
       "dev": true
     },
     "node_modules/@vitejs/plugin-basic-ssl": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/@vitejs/plugin-basic-ssl/-/plugin-basic-ssl-1.1.0.tgz",
-      "integrity": "sha512-wO4Dk/rm8u7RNhOf95ZzcEmC9rYOncYgvq4z3duaJrCgjN8BxAnDVyndanfcJZ0O6XZzHz6Q0hTimxTg8Y9g/A==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/@vitejs/plugin-basic-ssl/-/plugin-basic-ssl-1.0.2.tgz",
+      "integrity": "sha512-DKHKVtpI+eA5fvObVgQ3QtTGU70CcCnedalzqmGSR050AzKZMdUzgC8KmlOneHWH8dF2hJ3wkC9+8FDVAaDRCw==",
       "dev": true,
       "engines": {
         "node": ">=14.6.0"
@@ -6224,6 +6784,15 @@
         "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
       }
     },
+    "node_modules/acorn-walk": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.3.2.tgz",
+      "integrity": "sha512-cjkyv4OtNCIeqhHrfS81QWXoCBPExR/J62oyEqepVw8WaQeSqpW2uhuLPh1m9eWhDuOo/jUXVTlifvesOWp/4A==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.4.0"
+      }
+    },
     "node_modules/adjust-sourcemap-loader": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/adjust-sourcemap-loader/-/adjust-sourcemap-loader-4.0.0.tgz",
@@ -6362,6 +6931,27 @@
         "node": ">=10"
       }
     },
+    "node_modules/angular-cli-ghpages/node_modules/jsonfile": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
+      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
+      "dev": true,
+      "dependencies": {
+        "universalify": "^2.0.0"
+      },
+      "optionalDependencies": {
+        "graceful-fs": "^4.1.6"
+      }
+    },
+    "node_modules/angular-cli-ghpages/node_modules/universalify": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
+      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
+      "dev": true,
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
     "node_modules/angular-eslint": {
       "version": "0.0.1-alpha.0",
       "resolved": "https://registry.npmjs.org/angular-eslint/-/angular-eslint-0.0.1-alpha.0.tgz",
@@ -6448,15 +7038,16 @@
         "node": ">= 8"
       }
     },
-    "node_modules/anymatch/node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "engines": {
-        "node": ">=8.6"
+    "node_modules/append-transform": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/append-transform/-/append-transform-2.0.0.tgz",
+      "integrity": "sha512-7yeyCEurROLQJFv5Xj4lEGTy0borxepjFv1g22oAdqFu//SrAlDl1O1Nxx15SH1RoliUml6p8dwJW9jvZughhg==",
+      "dev": true,
+      "dependencies": {
+        "default-require-extensions": "^3.0.0"
       },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
+      "engines": {
+        "node": ">=8"
       }
     },
     "node_modules/archiver": {
@@ -6528,6 +7119,18 @@
         "safe-buffer": "~5.1.0"
       }
     },
+    "node_modules/archy": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/archy/-/archy-1.0.0.tgz",
+      "integrity": "sha512-Xg+9RwCg/0p32teKdGMPTPnVXKD0w3DfHnFTficozsAgsvq2XenPJq/MYpzzQ/v8zrOyJn6Ds39VA4JIDwFfqw==",
+      "dev": true
+    },
+    "node_modules/arg": {
+      "version": "4.1.3",
+      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
+      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA==",
+      "dev": true
+    },
     "node_modules/argparse": {
       "version": "1.0.10",
       "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
@@ -6546,16 +7149,13 @@
       }
     },
     "node_modules/array-buffer-byte-length": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.1.tgz",
-      "integrity": "sha512-ahC5W1xgou+KTXix4sAO8Ki12Q+jf4i0+tmk3sC+zgcynshkHxzpXdImBehiUYKKKDwvfFiJl1tZt6ewscS1Mg==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/array-buffer-byte-length/-/array-buffer-byte-length-1.0.0.tgz",
+      "integrity": "sha512-LPuwb2P+NrQw3XhxGc36+XSvuBPopovXYTR9Ew++Du9Yb/bx5AzBfrIsBoj0EZUifjQU+sHL21sseZ3jerWO/A==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.5",
-        "is-array-buffer": "^3.0.4"
-      },
-      "engines": {
-        "node": ">= 0.4"
+        "call-bind": "^1.0.2",
+        "is-array-buffer": "^3.0.1"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -6603,36 +7203,17 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/array.prototype.filter": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/array.prototype.filter/-/array.prototype.filter-1.0.3.tgz",
-      "integrity": "sha512-VizNcj/RGJiUyQBgzwxzE5oHdeuXY5hSbbmKMlphj1cy1Vl7Pn2asCGbSrru6hSQjmCzqTBPVWAF/whmEOVHbw==",
+    "node_modules/array.prototype.findlastindex": {
+      "version": "1.2.3",
+      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.3.tgz",
+      "integrity": "sha512-LzLoiOMAxvy+Gd3BAq3B7VeIgPdo+Q8hthvKtXybMvRV0jrXfJM/t8mw7nNlpEcVlVUnCnM2KSX4XU5HmpodOA==",
       "dev": true,
       "dependencies": {
         "call-bind": "^1.0.2",
         "define-properties": "^1.2.0",
         "es-abstract": "^1.22.1",
-        "es-array-method-boxes-properly": "^1.0.0",
-        "is-string": "^1.0.7"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
-      }
-    },
-    "node_modules/array.prototype.findlastindex": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/array.prototype.findlastindex/-/array.prototype.findlastindex-1.2.4.tgz",
-      "integrity": "sha512-hzvSHUshSpCflDR1QMUBLHGHP1VIEBegT4pix9H/Z92Xw3ySoy6c2qh7lJWTJnRJ8JCZ9bJNCgTyYaJGcJu6xQ==",
-      "dev": true,
-      "dependencies": {
-        "call-bind": "^1.0.5",
-        "define-properties": "^1.2.1",
-        "es-abstract": "^1.22.3",
-        "es-errors": "^1.3.0",
-        "es-shim-unscopables": "^1.0.2"
+        "es-shim-unscopables": "^1.0.0",
+        "get-intrinsic": "^1.2.1"
       },
       "engines": {
         "node": ">= 0.4"
@@ -6678,18 +7259,17 @@
       }
     },
     "node_modules/arraybuffer.prototype.slice": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.3.tgz",
-      "integrity": "sha512-bMxMKAjg13EBSVscxTaYA4mRc5t1UAXa2kXiGTNfZ079HIWXEkKmkgFrh/nJqamaLSrXO5H4WFFkPEaLJWbs3A==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/arraybuffer.prototype.slice/-/arraybuffer.prototype.slice-1.0.2.tgz",
+      "integrity": "sha512-yMBKppFur/fbHu9/6USUe03bZ4knMYiwFBcyiaXB8Go0qNehwX6inYPzK9U0NeQvGxKthcmHcaR8P5MStSRBAw==",
       "dev": true,
       "dependencies": {
-        "array-buffer-byte-length": "^1.0.1",
-        "call-bind": "^1.0.5",
-        "define-properties": "^1.2.1",
-        "es-abstract": "^1.22.3",
-        "es-errors": "^1.2.1",
-        "get-intrinsic": "^1.2.3",
-        "is-array-buffer": "^3.0.4",
+        "array-buffer-byte-length": "^1.0.0",
+        "call-bind": "^1.0.2",
+        "define-properties": "^1.2.0",
+        "es-abstract": "^1.22.1",
+        "get-intrinsic": "^1.2.1",
+        "is-array-buffer": "^3.0.2",
         "is-shared-array-buffer": "^1.0.2"
       },
       "engines": {
@@ -6774,9 +7354,9 @@
       }
     },
     "node_modules/autoprefixer": {
-      "version": "10.4.17",
-      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.17.tgz",
-      "integrity": "sha512-/cpVNRLSfhOtcGflT13P2794gVSgmPgTR+erw5ifnMLZb0UnSlkK4tquLmkd3BhA+nLo5tX8Cu0upUsGKvKbmg==",
+      "version": "10.4.16",
+      "resolved": "https://registry.npmjs.org/autoprefixer/-/autoprefixer-10.4.16.tgz",
+      "integrity": "sha512-7vd3UC6xKp0HLfua5IjZlcXvGAGy7cBAXTg2lyQ/8WpNhd6SiZ8Be+xm3FyBSYJx5GKcpRCzBh7RH4/0dnY+uQ==",
       "dev": true,
       "funding": [
         {
@@ -6793,9 +7373,9 @@
         }
       ],
       "dependencies": {
-        "browserslist": "^4.22.2",
-        "caniuse-lite": "^1.0.30001578",
-        "fraction.js": "^4.3.7",
+        "browserslist": "^4.21.10",
+        "caniuse-lite": "^1.0.30001538",
+        "fraction.js": "^4.3.6",
         "normalize-range": "^0.1.2",
         "picocolors": "^1.0.0",
         "postcss-value-parser": "^4.2.0"
@@ -6811,13 +7391,10 @@
       }
     },
     "node_modules/available-typed-arrays": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.7.tgz",
-      "integrity": "sha512-wvUjBtSGN7+7SjNpq/9M2Tg350UZD3q62IFZLbRAR1bSMlCo1ZaeW+BJ+D090e4hIIZLBcTDWe4Mh4jvUDajzQ==",
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/available-typed-arrays/-/available-typed-arrays-1.0.5.tgz",
+      "integrity": "sha512-DMD0KiN46eipeziST1LPP/STfDU0sufISXmjSgvVsoU2tqxctQeASejWcfNtxYKqETM1UxQ8sp2OrSBWpHY6sw==",
       "dev": true,
-      "dependencies": {
-        "possible-typed-array-names": "^1.0.0"
-      },
       "engines": {
         "node": ">= 0.4"
       },
@@ -6841,9 +7418,9 @@
       "dev": true
     },
     "node_modules/axios": {
-      "version": "1.6.7",
-      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.7.tgz",
-      "integrity": "sha512-/hDJGff6/c7u0hDkvkGxR/oy6CbCs8ziCsC7SqmhjfozqiJGc8Z11wrv9z9lYfY4K8l+H9TpjcMDX0xOZmx+RA==",
+      "version": "1.6.5",
+      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.5.tgz",
+      "integrity": "sha512-Ii012v05KEVuUoFWmMW/UQv9aRIc3ZwkWDcM+h5Il8izZCtRVpDUfwpoFf7eOtajT3QiGR4yDUx7lPqHJULgbg==",
       "dev": true,
       "dependencies": {
         "follow-redirects": "^1.15.4",
@@ -6894,13 +7471,13 @@
       }
     },
     "node_modules/babel-plugin-polyfill-corejs2": {
-      "version": "0.4.9",
-      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.9.tgz",
-      "integrity": "sha512-BXIWIaO3MewbXWdJdIGDWZurv5OGJlFNo7oy20DpB3kWDVJLcY2NRypRsRUbRe5KMqSNLuOGnWTFQQtY5MAsRw==",
+      "version": "0.4.8",
+      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs2/-/babel-plugin-polyfill-corejs2-0.4.8.tgz",
+      "integrity": "sha512-OtIuQfafSzpo/LhnJaykc0R/MMnuLSSVjVYy9mHArIZ9qTCSZ6TpWCuEKZYVoN//t8HqBNScHrOtCrIK5IaGLg==",
       "dev": true,
       "dependencies": {
         "@babel/compat-data": "^7.22.6",
-        "@babel/helper-define-polyfill-provider": "^0.6.0",
+        "@babel/helper-define-polyfill-provider": "^0.5.0",
         "semver": "^6.3.1"
       },
       "peerDependencies": {
@@ -6917,22 +7494,22 @@
       }
     },
     "node_modules/babel-plugin-polyfill-corejs3": {
-      "version": "0.9.0",
-      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.9.0.tgz",
-      "integrity": "sha512-7nZPG1uzK2Ymhy/NbaOWTg3uibM2BmGASS4vHS4szRZAIR8R6GwA/xAujpdrXU5iyklrimWnLWU+BLF9suPTqg==",
+      "version": "0.8.7",
+      "resolved": "https://registry.npmjs.org/babel-plugin-polyfill-corejs3/-/babel-plugin-polyfill-corejs3-0.8.7.tgz",
+      "integrity": "sha512-KyDvZYxAzkC0Aj2dAPyDzi2Ym15e5JKZSK+maI7NAwSqofvuFglbSsxE7wUOvTg9oFVnHMzVzBKcqEb4PJgtOA==",
       "dev": true,
       "dependencies": {
-        "@babel/helper-define-polyfill-provider": "^0.5.0",
-        "core-js-compat": "^3.34.0"
+        "@babel/helper-define-polyfill-provider": "^0.4.4",
+        "core-js-compat": "^3.33.1"
       },
       "peerDependencies": {
         "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
       }
     },
     "node_modules/babel-plugin-polyfill-corejs3/node_modules/@babel/helper-define-polyfill-provider": {
-      "version": "0.5.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.5.0.tgz",
-      "integrity": "sha512-NovQquuQLAQ5HuyjCz7WQP9MjRj7dx++yspwiyUiGl9ZyadHRSql1HZh5ogRd8W8w6YM6EQ/NTB8rgjLt5W65Q==",
+      "version": "0.4.4",
+      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.4.4.tgz",
+      "integrity": "sha512-QcJMILQCu2jm5TFPGA3lCpJJTeEP+mqeXooG/NZbg/h5FTFi6V0+99ahlRsW8/kRLyb24LZVCCiclDedhLKcBA==",
       "dev": true,
       "dependencies": {
         "@babel/helper-compilation-targets": "^7.22.6",
@@ -6957,22 +7534,6 @@
         "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
       }
     },
-    "node_modules/babel-plugin-polyfill-regenerator/node_modules/@babel/helper-define-polyfill-provider": {
-      "version": "0.5.0",
-      "resolved": "https://registry.npmjs.org/@babel/helper-define-polyfill-provider/-/helper-define-polyfill-provider-0.5.0.tgz",
-      "integrity": "sha512-NovQquuQLAQ5HuyjCz7WQP9MjRj7dx++yspwiyUiGl9ZyadHRSql1HZh5ogRd8W8w6YM6EQ/NTB8rgjLt5W65Q==",
-      "dev": true,
-      "dependencies": {
-        "@babel/helper-compilation-targets": "^7.22.6",
-        "@babel/helper-plugin-utils": "^7.22.5",
-        "debug": "^4.1.1",
-        "lodash.debounce": "^4.0.8",
-        "resolve": "^1.14.2"
-      },
-      "peerDependencies": {
-        "@babel/core": "^7.4.0 || ^8.0.0-0 <8.0.0"
-      }
-    },
     "node_modules/balanced-match": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
@@ -7028,9 +7589,9 @@
       "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
     },
     "node_modules/basic-ftp": {
-      "version": "5.0.5",
-      "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz",
-      "integrity": "sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==",
+      "version": "5.0.4",
+      "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.4.tgz",
+      "integrity": "sha512-8PzkB0arJFV4jJWSGOYR+OEic6aeKMu/osRhBULN6RY0ykby6LKhbmuQ5ublvaas5BOwboah5D87nrHyuh8PPA==",
       "engines": {
         "node": ">=10.0.0"
       }
@@ -7264,22 +7825,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/boxen/node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
     "node_modules/brace-expansion": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
@@ -7300,9 +7845,9 @@
       }
     },
     "node_modules/browserslist": {
-      "version": "4.23.0",
-      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.23.0.tgz",
-      "integrity": "sha512-QW8HiM1shhT2GuzkvklfjcKDiWFXHOeFCIA/huJPwHsslwcydgk7X+z2zXpEijP98UCY7HbubZt5J2Zgvf0CaQ==",
+      "version": "4.22.2",
+      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.22.2.tgz",
+      "integrity": "sha512-0UgcrvQmBDvZHFGdYUehrCNIazki7/lUP3kkoi/r3YB2amZbFM9J43ZRkJTXBUZK4gmx56+Sqk9+Vs9mwZx9+A==",
       "dev": true,
       "funding": [
         {
@@ -7319,8 +7864,8 @@
         }
       ],
       "dependencies": {
-        "caniuse-lite": "^1.0.30001587",
-        "electron-to-chromium": "^1.4.668",
+        "caniuse-lite": "^1.0.30001565",
+        "electron-to-chromium": "^1.4.601",
         "node-releases": "^2.0.14",
         "update-browserslist-db": "^1.0.13"
       },
@@ -7444,9 +7989,9 @@
       "integrity": "sha512-86FlT5+1GrsgKbPLRRY7cGDg8fsJiP/jzTqXXVqiUZZ2aZT8uemEOHlU1CDU+TxklPEZ11HZNNWclRBBecP4CQ=="
     },
     "node_modules/bulma-toast": {
-      "version": "2.4.4",
-      "resolved": "https://registry.npmjs.org/bulma-toast/-/bulma-toast-2.4.4.tgz",
-      "integrity": "sha512-frK7CiTE7sW6bgJFnWE4aL3Fga9O2U6O536gj6xox+52kqb5S5WaDUq37cArzjuvnSXY5mPIvzt5xNdBeOnShA=="
+      "version": "2.4.3",
+      "resolved": "https://registry.npmjs.org/bulma-toast/-/bulma-toast-2.4.3.tgz",
+      "integrity": "sha512-OpNn3MUD27ne8RkQns3yS7HaltU5/s67ivbdxAb/gXjxmfZhIdoeUFPYkopEXwCpzc+VasYy1OAglGIFvjEvUQ=="
     },
     "node_modules/bulmaswatch": {
       "version": "0.8.1",
@@ -7507,27 +8052,49 @@
       }
     },
     "node_modules/cacache/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
-      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
       "devOptional": true,
       "engines": {
         "node": "14 || >=16.14"
       }
     },
-    "node_modules/call-bind": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.7.tgz",
-      "integrity": "sha512-GHTSNSYICQ7scH7sZ+M2rFopRoLh8t2bLSW6BbgrtLsahOIB5iyAVJf9GjWK3cYTDaMj4XdBpM1cA6pIS0Kv2w==",
+    "node_modules/cacache/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "devOptional": true,
       "dependencies": {
-        "es-define-property": "^1.0.0",
-        "es-errors": "^1.3.0",
-        "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
-        "set-function-length": "^1.2.1"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": ">= 0.4"
+        "node": ">=10"
+      }
+    },
+    "node_modules/caching-transform": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/caching-transform/-/caching-transform-4.0.0.tgz",
+      "integrity": "sha512-kpqOvwXnjjN44D89K5ccQC+RUrsy7jB/XLlRrx0D7/2HNcTPqzsb6XgYoErwko6QsV184CA2YgS1fxDiiDZMWA==",
+      "dev": true,
+      "dependencies": {
+        "hasha": "^5.0.0",
+        "make-dir": "^3.0.0",
+        "package-hash": "^4.0.0",
+        "write-file-atomic": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/call-bind": {
+      "version": "1.0.5",
+      "resolved": "https://registry.npmjs.org/call-bind/-/call-bind-1.0.5.tgz",
+      "integrity": "sha512-C3nQxfFZxFRVoJoGKKI8y3MOEo129NQ+FgQ08iye+Mk4zNZZGdjfs06bVTr+DBSlA66Q2VEcMki/cUCP4SercQ==",
+      "dependencies": {
+        "function-bind": "^1.1.2",
+        "get-intrinsic": "^1.2.1",
+        "set-function-length": "^1.1.1"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -7557,9 +8124,9 @@
       }
     },
     "node_modules/caniuse-lite": {
-      "version": "1.0.30001597",
-      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001597.tgz",
-      "integrity": "sha512-7LjJvmQU6Sj7bL0j5b5WY/3n7utXUJvAe1lxhsHDbLmwX9mdL86Yjtr+5SRCyf8qME4M7pU2hswj0FpyBVCv9w==",
+      "version": "1.0.30001578",
+      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001578.tgz",
+      "integrity": "sha512-J/jkFgsQ3NEl4w2lCoM9ZPxrD+FoBNJ7uJUpGVjIg/j0OwJosWM36EPDv+Yyi0V4twBk9pPmlFS+PLykgEvUmg==",
       "dev": true,
       "funding": [
         {
@@ -7625,9 +8192,15 @@
       "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA=="
     },
     "node_modules/chokidar": {
-      "version": "3.6.0",
-      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
-      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
+      "version": "3.5.3",
+      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
+      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
+      "funding": [
+        {
+          "type": "individual",
+          "url": "https://paulmillr.com/funding/"
+        }
+      ],
       "dependencies": {
         "anymatch": "~3.1.2",
         "braces": "~3.0.2",
@@ -7640,9 +8213,6 @@
       "engines": {
         "node": ">= 8.10.0"
       },
-      "funding": {
-        "url": "https://paulmillr.com/funding/"
-      },
       "optionalDependencies": {
         "fsevents": "~2.3.2"
       }
@@ -7748,71 +8318,22 @@
       }
     },
     "node_modules/cli-width": {
-      "version": "4.1.0",
-      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-4.1.0.tgz",
-      "integrity": "sha512-ouuZd4/dm2Sw5Gmqy6bGyNNNe1qt9RpmxveLSO7KcgsTnU7RXfsw+/bukWGo1abgBiMAic068rclZsO4IWmmxQ==",
-      "dev": true,
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz",
+      "integrity": "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==",
       "engines": {
-        "node": ">= 12"
+        "node": ">= 10"
       }
     },
     "node_modules/cliui": {
-      "version": "8.0.1",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
-      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "version": "7.0.4",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
+      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
+      "dev": true,
       "dependencies": {
         "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.1",
+        "strip-ansi": "^6.0.0",
         "wrap-ansi": "^7.0.0"
-      },
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/cliui/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/cliui/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/cliui/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
-    },
-    "node_modules/cliui/node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
     "node_modules/clone": {
@@ -7890,19 +8411,6 @@
         "text-hex": "1.0.x"
       }
     },
-    "node_modules/columnify": {
-      "version": "1.6.0",
-      "resolved": "https://registry.npmjs.org/columnify/-/columnify-1.6.0.tgz",
-      "integrity": "sha512-lomjuFZKfM6MSAnV9aCZC9sc0qGbmZdfygNv+nCpqVkSKdCxCklLtd16O0EILGkImHw9ZpHkAnHaB+8Zxq5W6Q==",
-      "dev": true,
-      "dependencies": {
-        "strip-ansi": "^6.0.1",
-        "wcwidth": "^1.0.0"
-      },
-      "engines": {
-        "node": ">=8.0.0"
-      }
-    },
     "node_modules/combined-stream": {
       "version": "1.0.8",
       "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
@@ -8000,11 +8508,6 @@
       "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
       "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
     },
-    "node_modules/concat-map": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
-      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg=="
-    },
     "node_modules/config-chain": {
       "version": "1.1.13",
       "resolved": "https://registry.npmjs.org/config-chain/-/config-chain-1.1.13.tgz",
@@ -8225,9 +8728,9 @@
       }
     },
     "node_modules/core-js": {
-      "version": "3.36.0",
-      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.36.0.tgz",
-      "integrity": "sha512-mt7+TUBbTFg5+GngsAxeKBTl5/VS0guFeJacYge9OmHb+m058UwwIm41SE9T4Den7ClatV57B6TYTuJ0CX1MAw==",
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/core-js/-/core-js-3.35.0.tgz",
+      "integrity": "sha512-ntakECeqg81KqMueeGJ79Q5ZgQNR+6eaE8sxGCx62zMbAIj65q+uYvatToew3m6eAGdU4gNZwpZ34NMe4GYswg==",
       "hasInstallScript": true,
       "funding": {
         "type": "opencollective",
@@ -8235,12 +8738,12 @@
       }
     },
     "node_modules/core-js-compat": {
-      "version": "3.36.0",
-      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.36.0.tgz",
-      "integrity": "sha512-iV9Pd/PsgjNWBXeq8XRtWVSgz2tKAfhfvBs7qxYty+RlRd+OCksaWmOnc4JKrTc1cToXL1N0s3l/vwlxPtdElw==",
+      "version": "3.35.0",
+      "resolved": "https://registry.npmjs.org/core-js-compat/-/core-js-compat-3.35.0.tgz",
+      "integrity": "sha512-5blwFAddknKeNgsjBzilkdQ0+YK8L1PfqPYq40NOYMYFSS38qj+hpTcLLWwpIwA2A5bje/x5jmVn2tzUMg9IVw==",
       "dev": true,
       "dependencies": {
-        "browserslist": "^4.22.3"
+        "browserslist": "^4.22.2"
       },
       "funding": {
         "type": "opencollective",
@@ -8265,15 +8768,15 @@
       }
     },
     "node_modules/cosmiconfig": {
-      "version": "9.0.0",
-      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz",
-      "integrity": "sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==",
+      "version": "8.3.6",
+      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-8.3.6.tgz",
+      "integrity": "sha512-kcZ6+W5QzcJ3P1Mt+83OUv/oHFqZHIx8DuxG6eZ5RGMERoLqp4BuGjhHLYGK+Kf5XVkQvqBSmAy/nGWN3qDgEA==",
       "dev": true,
       "dependencies": {
-        "env-paths": "^2.2.1",
         "import-fresh": "^3.3.0",
         "js-yaml": "^4.1.0",
-        "parse-json": "^5.2.0"
+        "parse-json": "^5.2.0",
+        "path-type": "^4.0.0"
       },
       "engines": {
         "node": ">=14"
@@ -8331,6 +8834,12 @@
         "node": ">= 10"
       }
     },
+    "node_modules/create-require": {
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/create-require/-/create-require-1.1.1.tgz",
+      "integrity": "sha512-dcKFX3jn0MpIaXjisoRvexIJVEKzaq7z2rZKxf+MSr9TkdmHmsU4m2lcLojrj/FHl8mk5VxMmYA+ftRkP/3oKQ==",
+      "dev": true
+    },
     "node_modules/critters": {
       "version": "0.0.20",
       "resolved": "https://registry.npmjs.org/critters/-/critters-0.0.20.tgz",
@@ -8514,19 +9023,19 @@
       }
     },
     "node_modules/css-loader": {
-      "version": "6.10.0",
-      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.10.0.tgz",
-      "integrity": "sha512-LTSA/jWbwdMlk+rhmElbDR2vbtQoTBPr7fkJE+mxrHj+7ru0hUmHafDRzWIjIHTwpitWVaqY2/UWGRca3yUgRw==",
+      "version": "6.8.1",
+      "resolved": "https://registry.npmjs.org/css-loader/-/css-loader-6.8.1.tgz",
+      "integrity": "sha512-xDAXtEVGlD0gJ07iclwWVkLoZOpEvAWaSyf6W18S2pOC//K8+qUDIx8IIT3D+HjnmkJPQeesOPv5aiUaJsCM2g==",
       "dev": true,
       "dependencies": {
         "icss-utils": "^5.1.0",
-        "postcss": "^8.4.33",
+        "postcss": "^8.4.21",
         "postcss-modules-extract-imports": "^3.0.0",
-        "postcss-modules-local-by-default": "^4.0.4",
-        "postcss-modules-scope": "^3.1.1",
+        "postcss-modules-local-by-default": "^4.0.3",
+        "postcss-modules-scope": "^3.0.0",
         "postcss-modules-values": "^4.0.0",
         "postcss-value-parser": "^4.2.0",
-        "semver": "^7.5.4"
+        "semver": "^7.3.8"
       },
       "engines": {
         "node": ">= 12.13.0"
@@ -8536,16 +9045,7 @@
         "url": "https://opencollective.com/webpack"
       },
       "peerDependencies": {
-        "@rspack/core": "0.x || 1.x",
         "webpack": "^5.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@rspack/core": {
-          "optional": true
-        },
-        "webpack": {
-          "optional": true
-        }
       }
     },
     "node_modules/css-select": {
@@ -8589,9 +9089,9 @@
       }
     },
     "node_modules/csv-parse": {
-      "version": "5.5.5",
-      "resolved": "https://registry.npmjs.org/csv-parse/-/csv-parse-5.5.5.tgz",
-      "integrity": "sha512-erCk7tyU3yLWAhk6wvKxnyPtftuy/6Ak622gOO7BCJ05+TYffnPCJF905wmOQm+BpkX54OdAl8pveJwUdpnCXQ=="
+      "version": "5.5.3",
+      "resolved": "https://registry.npmjs.org/csv-parse/-/csv-parse-5.5.3.tgz",
+      "integrity": "sha512-v0KW6C0qlZzoGjk6u5tLmVfyZxNgPGXZsWTXshpAgKVGmGXzaVWGdlCFxNx5iuzcXT/oJN1HHM9DZKwtAtYa+A=="
     },
     "node_modules/custom-event": {
       "version": "1.0.1",
@@ -8612,9 +9112,9 @@
       }
     },
     "node_modules/data-uri-to-buffer": {
-      "version": "6.0.2",
-      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
-      "integrity": "sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==",
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.1.tgz",
+      "integrity": "sha512-MZd3VlchQkp8rdend6vrx7MmVDJzSNTBvghvKjirLkD+WTChA3KUf0jkE68Q4UyctNqI11zZO9/x2Yx+ub5Cvg==",
       "engines": {
         "node": ">= 14"
       }
@@ -8653,15 +9153,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/deep-equal-in-any-order": {
-      "version": "2.0.6",
-      "resolved": "https://registry.npmjs.org/deep-equal-in-any-order/-/deep-equal-in-any-order-2.0.6.tgz",
-      "integrity": "sha512-RfnWHQzph10YrUjvWwhd15Dne8ciSJcZ3U6OD7owPwiVwsdE5IFSoZGg8rlwJD11ES+9H5y8j3fCofviRHOqLQ==",
-      "dependencies": {
-        "lodash.mapvalues": "^4.6.0",
-        "sort-any": "^2.0.0"
-      }
-    },
     "node_modules/deep-extend": {
       "version": "0.6.0",
       "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
@@ -8692,6 +9183,30 @@
         "node": ">= 10"
       }
     },
+    "node_modules/default-require-extensions": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/default-require-extensions/-/default-require-extensions-3.0.1.tgz",
+      "integrity": "sha512-eXTJmRbm2TIt9MgWTsOH1wEuhew6XGZcMeGKCtLedIg/NCsg1iBePXkceTdK4Fii7pzmN9tGsZhKzZ4h7O/fxw==",
+      "dev": true,
+      "dependencies": {
+        "strip-bom": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/default-require-extensions/node_modules/strip-bom": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
+      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/defaults": {
       "version": "1.0.4",
       "resolved": "https://registry.npmjs.org/defaults/-/defaults-1.0.4.tgz",
@@ -8704,26 +9219,22 @@
       }
     },
     "node_modules/define-data-property": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.4.tgz",
-      "integrity": "sha512-rBMvIzlpA8v6E+SJZoo++HAYqsLrkg7MSfIinMPFhmkorw7X+dOXVJQs+QT69zGkzMyfDnIMN2Wid1+NbL3T+A==",
+      "version": "1.1.1",
+      "resolved": "https://registry.npmjs.org/define-data-property/-/define-data-property-1.1.1.tgz",
+      "integrity": "sha512-E7uGkTzkk1d0ByLeSc6ZsFS79Axg+m1P/VsgYsxHgiuc3tFSj+MjMIwe90FC4lOAZzNBdY7kkO2P2wKdsQ1vgQ==",
       "dependencies": {
-        "es-define-property": "^1.0.0",
-        "es-errors": "^1.3.0",
-        "gopd": "^1.0.1"
+        "get-intrinsic": "^1.2.1",
+        "gopd": "^1.0.1",
+        "has-property-descriptors": "^1.0.0"
       },
       "engines": {
         "node": ">= 0.4"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/define-lazy-prop": {
       "version": "2.0.0",
       "resolved": "https://registry.npmjs.org/define-lazy-prop/-/define-lazy-prop-2.0.0.tgz",
       "integrity": "sha512-Ds09qNh8yw3khSjiJjiUInaGX9xlqZDY7JVryGxdxV7NPeuqQfplOpQ66yJFZut3jLa5zOwkXw1g9EI2uKh4Og==",
-      "dev": true,
       "engines": {
         "node": ">=8"
       }
@@ -8901,6 +9412,15 @@
       "integrity": "sha512-uJaamHkagcZtHPqCIHZxnFrXlunQXgBOsZSUOWwFw31QJCAbyTBoHMW75YOTur5ZNx8pIeAKgf6GWIgaqqiLhA==",
       "dev": true
     },
+    "node_modules/diff": {
+      "version": "4.0.2",
+      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
+      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.3.1"
+      }
+    },
     "node_modules/diff-sequences": {
       "version": "29.6.3",
       "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
@@ -9025,9 +9545,9 @@
       }
     },
     "node_modules/dotenv": {
-      "version": "16.3.2",
-      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.2.tgz",
-      "integrity": "sha512-HTlk5nmhkm8F6JcdXvHIzaorzCoziNQT9mGxLPVXW8wJF1TiGSL60ZGB4gHWabHOaMmWmhvk2/lPHfnBiT78AQ==",
+      "version": "16.3.1",
+      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
+      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
       "dev": true,
       "engines": {
         "node": ">=12"
@@ -9052,14 +9572,14 @@
       "dev": true
     },
     "node_modules/duplexify": {
-      "version": "4.1.3",
-      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.3.tgz",
-      "integrity": "sha512-M3BmBhwJRZsSx38lZyhE53Csddgzl5R7xGJNk7CVddZD6CcmwMCH8J+7AprIrQKH7TonKxaCjcv27Qmf+sQ+oA==",
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.2.tgz",
+      "integrity": "sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==",
       "dependencies": {
         "end-of-stream": "^1.4.1",
         "inherits": "^2.0.3",
         "readable-stream": "^3.1.1",
-        "stream-shift": "^1.0.2"
+        "stream-shift": "^1.0.0"
       }
     },
     "node_modules/eastasianwidth": {
@@ -9078,12 +9598,6 @@
         "safer-buffer": "^2.1.0"
       }
     },
-    "node_modules/ecc-jsbn/node_modules/jsbn": {
-      "version": "0.1.1",
-      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
-      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
-      "dev": true
-    },
     "node_modules/ecdsa-sig-formatter": {
       "version": "1.0.11",
       "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
@@ -9113,9 +9627,9 @@
       }
     },
     "node_modules/electron-to-chromium": {
-      "version": "1.4.701",
-      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.701.tgz",
-      "integrity": "sha512-K3WPQ36bUOtXg/1+69bFlFOvdSm0/0bGqmsfPDLRXLanoKXdA+pIWuf/VbA9b+2CwBFuONgl4NEz4OEm+OJOKA==",
+      "version": "1.4.635",
+      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.635.tgz",
+      "integrity": "sha512-iu/2D0zolKU3iDGXXxdOzNf72Jnokn+K1IN6Kk4iV6l1Tr2g/qy+mvmtfAiBwZe5S3aB5r92vp+zSZ69scYRrg==",
       "dev": true
     },
     "node_modules/email-addresses": {
@@ -9202,9 +9716,9 @@
       }
     },
     "node_modules/engine.io-parser": {
-      "version": "5.2.2",
-      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.2.tgz",
-      "integrity": "sha512-RcyUFKA93/CXH20l4SoVvzZfrSDMOTUS3bWVpTt2FuFP+XYrL8i8oonHP7WInRyVHXh0n/ORtoeiE1os+8qkSw==",
+      "version": "5.2.1",
+      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-5.2.1.tgz",
+      "integrity": "sha512-9JktcM3u18nU9N2Lz3bWeBgxVgOKpw7yhRaoxQA3FUDZzzw+9WlA6p4G4u0RixNkg14fH7EfEc/RhpurtiROTQ==",
       "dev": true,
       "engines": {
         "node": ">=10.0.0"
@@ -9241,9 +9755,9 @@
       }
     },
     "node_modules/enhanced-resolve": {
-      "version": "5.16.0",
-      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.16.0.tgz",
-      "integrity": "sha512-O+QWCviPNSSLAD9Ucn8Awv+poAkqn3T1XY5/N7kR7rQO9yfSGWkYZDwpJ+iKF7B8rxaQKWngSqACpgzeapSyoA==",
+      "version": "5.15.0",
+      "resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-5.15.0.tgz",
+      "integrity": "sha512-LXYT42KJ7lpIKECr2mAXIaMldcNCh/7E0KBKOu4KSfkHmP+mZmSs+8V5gBAqisWBy0OO4W5Oyys0GO1Y8KtdKg==",
       "dev": true,
       "dependencies": {
         "graceful-fs": "^4.2.4",
@@ -9321,52 +9835,50 @@
       }
     },
     "node_modules/es-abstract": {
-      "version": "1.22.5",
-      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.22.5.tgz",
-      "integrity": "sha512-oW69R+4q2wG+Hc3KZePPZxOiisRIqfKBVo/HLx94QcJeWGU/8sZhCvc829rd1kS366vlJbzBfXf9yWwf0+Ko7w==",
-      "dev": true,
-      "dependencies": {
-        "array-buffer-byte-length": "^1.0.1",
-        "arraybuffer.prototype.slice": "^1.0.3",
-        "available-typed-arrays": "^1.0.7",
-        "call-bind": "^1.0.7",
-        "es-define-property": "^1.0.0",
-        "es-errors": "^1.3.0",
-        "es-set-tostringtag": "^2.0.3",
+      "version": "1.22.3",
+      "resolved": "https://registry.npmjs.org/es-abstract/-/es-abstract-1.22.3.tgz",
+      "integrity": "sha512-eiiY8HQeYfYH2Con2berK+To6GrK2RxbPawDkGq4UiCQQfZHb6wX9qQqkbpPqaxQFcl8d9QzZqo0tGE0VcrdwA==",
+      "dev": true,
+      "dependencies": {
+        "array-buffer-byte-length": "^1.0.0",
+        "arraybuffer.prototype.slice": "^1.0.2",
+        "available-typed-arrays": "^1.0.5",
+        "call-bind": "^1.0.5",
+        "es-set-tostringtag": "^2.0.1",
         "es-to-primitive": "^1.2.1",
         "function.prototype.name": "^1.1.6",
-        "get-intrinsic": "^1.2.4",
-        "get-symbol-description": "^1.0.2",
+        "get-intrinsic": "^1.2.2",
+        "get-symbol-description": "^1.0.0",
         "globalthis": "^1.0.3",
         "gopd": "^1.0.1",
-        "has-property-descriptors": "^1.0.2",
-        "has-proto": "^1.0.3",
+        "has-property-descriptors": "^1.0.0",
+        "has-proto": "^1.0.1",
         "has-symbols": "^1.0.3",
-        "hasown": "^2.0.1",
-        "internal-slot": "^1.0.7",
-        "is-array-buffer": "^3.0.4",
+        "hasown": "^2.0.0",
+        "internal-slot": "^1.0.5",
+        "is-array-buffer": "^3.0.2",
         "is-callable": "^1.2.7",
-        "is-negative-zero": "^2.0.3",
+        "is-negative-zero": "^2.0.2",
         "is-regex": "^1.1.4",
-        "is-shared-array-buffer": "^1.0.3",
+        "is-shared-array-buffer": "^1.0.2",
         "is-string": "^1.0.7",
-        "is-typed-array": "^1.1.13",
+        "is-typed-array": "^1.1.12",
         "is-weakref": "^1.0.2",
         "object-inspect": "^1.13.1",
         "object-keys": "^1.1.1",
-        "object.assign": "^4.1.5",
-        "regexp.prototype.flags": "^1.5.2",
-        "safe-array-concat": "^1.1.0",
-        "safe-regex-test": "^1.0.3",
+        "object.assign": "^4.1.4",
+        "regexp.prototype.flags": "^1.5.1",
+        "safe-array-concat": "^1.0.1",
+        "safe-regex-test": "^1.0.0",
         "string.prototype.trim": "^1.2.8",
         "string.prototype.trimend": "^1.0.7",
         "string.prototype.trimstart": "^1.0.7",
-        "typed-array-buffer": "^1.0.2",
-        "typed-array-byte-length": "^1.0.1",
-        "typed-array-byte-offset": "^1.0.2",
-        "typed-array-length": "^1.0.5",
+        "typed-array-buffer": "^1.0.0",
+        "typed-array-byte-length": "^1.0.0",
+        "typed-array-byte-offset": "^1.0.0",
+        "typed-array-length": "^1.0.4",
         "unbox-primitive": "^1.0.2",
-        "which-typed-array": "^1.1.14"
+        "which-typed-array": "^1.1.13"
       },
       "engines": {
         "node": ">= 0.4"
@@ -9375,31 +9887,6 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
-    "node_modules/es-array-method-boxes-properly": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/es-array-method-boxes-properly/-/es-array-method-boxes-properly-1.0.0.tgz",
-      "integrity": "sha512-wd6JXUmyHmt8T5a2xreUwKcGPq6f1f+WwIJkijUqiGcJz1qqnZgP6XIK+QyIWU5lT7imeNxUll48bziG+TSYcA==",
-      "dev": true
-    },
-    "node_modules/es-define-property": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.0.tgz",
-      "integrity": "sha512-jxayLKShrEqqzJ0eumQbVhTYQM27CfT1T35+gCgDFoL82JLsXqTJ76zv6A0YLOgEnLUMvLzsDsGIrl8NFpT2gQ==",
-      "dependencies": {
-        "get-intrinsic": "^1.2.4"
-      },
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
-    "node_modules/es-errors": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
-      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
     "node_modules/es-module-lexer": {
       "version": "1.4.1",
       "resolved": "https://registry.npmjs.org/es-module-lexer/-/es-module-lexer-1.4.1.tgz",
@@ -9407,14 +9894,14 @@
       "dev": true
     },
     "node_modules/es-set-tostringtag": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.3.tgz",
-      "integrity": "sha512-3T8uNMC3OQTHkFUsFq8r/BwAXLHvU/9O9mE0fBc/MY5iq/8H7ncvO947LmYA6ldWw9Uh8Yhf25zu6n7nML5QWQ==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.0.2.tgz",
+      "integrity": "sha512-BuDyupZt65P9D2D2vA/zqcI3G5xRsklm5N3xCwuiy+/vKy8i0ifdsQP1sLgO4tZDSCaQUSnmC48khknGMV3D2Q==",
       "dev": true,
       "dependencies": {
-        "get-intrinsic": "^1.2.4",
-        "has-tostringtag": "^1.0.2",
-        "hasown": "^2.0.1"
+        "get-intrinsic": "^1.2.2",
+        "has-tostringtag": "^1.0.0",
+        "hasown": "^2.0.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -9446,6 +9933,12 @@
         "url": "https://github.com/sponsors/ljharb"
       }
     },
+    "node_modules/es6-error": {
+      "version": "4.1.1",
+      "resolved": "https://registry.npmjs.org/es6-error/-/es6-error-4.1.1.tgz",
+      "integrity": "sha512-Um/+FxMr9CISWh0bi5Zv0iOD+4cFh5qLeks1qhAopKVAJw3drgKbKySikp7wGhDL0HPeaja0P5ULZrxLkniUVg==",
+      "dev": true
+    },
     "node_modules/es6-promise": {
       "version": "4.2.8",
       "resolved": "https://registry.npmjs.org/es6-promise/-/es6-promise-4.2.8.tgz",
@@ -9462,12 +9955,11 @@
       }
     },
     "node_modules/esbuild": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.20.0.tgz",
-      "integrity": "sha512-6iwE3Y2RVYCME1jLpBqq7LQWK3MW6vjV2bZy6gt/WrqkY+WE74Spyc0ThAOYpMtITvnjX09CrC6ym7A/m9mebA==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.19.11.tgz",
+      "integrity": "sha512-HJ96Hev2hX/6i5cDVwcqiJBBtuo9+FeIJOtZ9W1kA5M6AMJRHUZlpYZ1/SbEwtO0ioNAW8rUooVpC/WehY2SfA==",
       "dev": true,
       "hasInstallScript": true,
-      "optional": true,
       "bin": {
         "esbuild": "bin/esbuild"
       },
@@ -9475,35 +9967,35 @@
         "node": ">=12"
       },
       "optionalDependencies": {
-        "@esbuild/aix-ppc64": "0.20.0",
-        "@esbuild/android-arm": "0.20.0",
-        "@esbuild/android-arm64": "0.20.0",
-        "@esbuild/android-x64": "0.20.0",
-        "@esbuild/darwin-arm64": "0.20.0",
-        "@esbuild/darwin-x64": "0.20.0",
-        "@esbuild/freebsd-arm64": "0.20.0",
-        "@esbuild/freebsd-x64": "0.20.0",
-        "@esbuild/linux-arm": "0.20.0",
-        "@esbuild/linux-arm64": "0.20.0",
-        "@esbuild/linux-ia32": "0.20.0",
-        "@esbuild/linux-loong64": "0.20.0",
-        "@esbuild/linux-mips64el": "0.20.0",
-        "@esbuild/linux-ppc64": "0.20.0",
-        "@esbuild/linux-riscv64": "0.20.0",
-        "@esbuild/linux-s390x": "0.20.0",
-        "@esbuild/linux-x64": "0.20.0",
-        "@esbuild/netbsd-x64": "0.20.0",
-        "@esbuild/openbsd-x64": "0.20.0",
-        "@esbuild/sunos-x64": "0.20.0",
-        "@esbuild/win32-arm64": "0.20.0",
-        "@esbuild/win32-ia32": "0.20.0",
-        "@esbuild/win32-x64": "0.20.0"
+        "@esbuild/aix-ppc64": "0.19.11",
+        "@esbuild/android-arm": "0.19.11",
+        "@esbuild/android-arm64": "0.19.11",
+        "@esbuild/android-x64": "0.19.11",
+        "@esbuild/darwin-arm64": "0.19.11",
+        "@esbuild/darwin-x64": "0.19.11",
+        "@esbuild/freebsd-arm64": "0.19.11",
+        "@esbuild/freebsd-x64": "0.19.11",
+        "@esbuild/linux-arm": "0.19.11",
+        "@esbuild/linux-arm64": "0.19.11",
+        "@esbuild/linux-ia32": "0.19.11",
+        "@esbuild/linux-loong64": "0.19.11",
+        "@esbuild/linux-mips64el": "0.19.11",
+        "@esbuild/linux-ppc64": "0.19.11",
+        "@esbuild/linux-riscv64": "0.19.11",
+        "@esbuild/linux-s390x": "0.19.11",
+        "@esbuild/linux-x64": "0.19.11",
+        "@esbuild/netbsd-x64": "0.19.11",
+        "@esbuild/openbsd-x64": "0.19.11",
+        "@esbuild/sunos-x64": "0.19.11",
+        "@esbuild/win32-arm64": "0.19.11",
+        "@esbuild/win32-ia32": "0.19.11",
+        "@esbuild/win32-x64": "0.19.11"
       }
     },
     "node_modules/esbuild-wasm": {
-      "version": "0.20.0",
-      "resolved": "https://registry.npmjs.org/esbuild-wasm/-/esbuild-wasm-0.20.0.tgz",
-      "integrity": "sha512-Lc9KeQCg1Zf8kCtfDXgy29rx0x8dOuhDWbkP76Wc64q7ctOOc1Zv1C39AxiE+y4N6ONyXtJk4HKpM7jlU7/jSA==",
+      "version": "0.19.11",
+      "resolved": "https://registry.npmjs.org/esbuild-wasm/-/esbuild-wasm-0.19.11.tgz",
+      "integrity": "sha512-MIhnpc1TxERUHomteO/ZZHp+kUawGEc03D/8vMHGzffLvbFLeDe6mwxqEZwlqBNY7SLWbyp6bBQAcCen8+wpjQ==",
       "dev": true,
       "bin": {
         "esbuild": "bin/esbuild"
@@ -9513,9 +10005,9 @@
       }
     },
     "node_modules/escalade": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.2.tgz",
-      "integrity": "sha512-ErCHMCae19vR8vQGe50xIsVomy19rg6gFu3+r3jkEO46suLMWBksvVyoGgQV+jOfl84ZSOSlmv6Gxa89PmTGmA==",
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
+      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
       "engines": {
         "node": ">=6"
       }
@@ -9627,16 +10119,16 @@
       }
     },
     "node_modules/eslint": {
-      "version": "8.57.0",
-      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.57.0.tgz",
-      "integrity": "sha512-dZ6+mexnaTIbSBZWgou51U6OmzIhYM2VcNdtiTtI7qPNZm35Akpr0f6vtw3w1Kmn5PYo+tZVfh13WrhpS6oLqQ==",
+      "version": "8.56.0",
+      "resolved": "https://registry.npmjs.org/eslint/-/eslint-8.56.0.tgz",
+      "integrity": "sha512-Go19xM6T9puCOWntie1/P997aXxFsOi37JIHRWI514Hc6ZnaHGKY9xFhrU65RT6CcBEzZoGG1e6Nq+DT04ZtZQ==",
       "dev": true,
       "dependencies": {
         "@eslint-community/eslint-utils": "^4.2.0",
         "@eslint-community/regexpp": "^4.6.1",
         "@eslint/eslintrc": "^2.1.4",
-        "@eslint/js": "8.57.0",
-        "@humanwhocodes/config-array": "^0.11.14",
+        "@eslint/js": "8.56.0",
+        "@humanwhocodes/config-array": "^0.11.13",
         "@humanwhocodes/module-importer": "^1.0.1",
         "@nodelib/fs.walk": "^1.2.8",
         "@ungap/structured-clone": "^1.2.0",
@@ -9756,9 +10248,9 @@
       }
     },
     "node_modules/eslint-module-utils": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.8.1.tgz",
-      "integrity": "sha512-rXDXR3h7cs7dy9RNpUlQf80nX31XWJEyGq1tRMo+6GsO5VmTe4UTwtmonAD4ZkAsrfMVDA2wlGJ3790Ys+D49Q==",
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/eslint-module-utils/-/eslint-module-utils-2.8.0.tgz",
+      "integrity": "sha512-aWajIYfsqCKRDgUfjEXNN/JlrzauMuSEy5sbd7WXbtW3EH6A6MpwEh42c7qD+MqQo9QMJ6fWLAeIJynx0g6OAw==",
       "dev": true,
       "dependencies": {
         "debug": "^3.2.7"
@@ -9852,16 +10344,6 @@
         "eslint": "^2 || ^3 || ^4 || ^5 || ^6 || ^7.2.0 || ^8"
       }
     },
-    "node_modules/eslint-plugin-import/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/eslint-plugin-import/node_modules/debug": {
       "version": "3.2.7",
       "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
@@ -9884,15 +10366,15 @@
       }
     },
     "node_modules/eslint-plugin-import/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/eslint-plugin-import/node_modules/semver": {
@@ -9942,17 +10424,6 @@
         "eslint": ">=7.0.0"
       }
     },
-    "node_modules/eslint-plugin-n/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "peer": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/eslint-plugin-n/node_modules/globals": {
       "version": "13.24.0",
       "resolved": "https://registry.npmjs.org/globals/-/globals-13.24.0.tgz",
@@ -9970,16 +10441,16 @@
       }
     },
     "node_modules/eslint-plugin-n/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "peer": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/eslint-plugin-n/node_modules/type-fest": {
@@ -10015,26 +10486,16 @@
         "eslint": ">=5.16.0"
       }
     },
-    "node_modules/eslint-plugin-node/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/eslint-plugin-node/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/eslint-plugin-node/node_modules/semver": {
@@ -10059,16 +10520,16 @@
       }
     },
     "node_modules/eslint-scope": {
-      "version": "8.0.0",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-8.0.0.tgz",
-      "integrity": "sha512-zj3Byw6jX4TcFCJmxOzLt6iol5FAr9xQyZZSQjEzW2UiCJXLwXdRIKCYVFftnpZckaC9Ps9xlC7jB8tSeWWOaw==",
+      "version": "7.2.2",
+      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
+      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
       "dev": true,
       "dependencies": {
         "esrecurse": "^4.3.0",
         "estraverse": "^5.2.0"
       },
       "engines": {
-        "node": "^18.18.0 || ^20.9.0 || >=21.1.0"
+        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
       },
       "funding": {
         "url": "https://opencollective.com/eslint"
@@ -10146,16 +10607,6 @@
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
       "dev": true
     },
-    "node_modules/eslint/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/eslint/node_modules/chalk": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
@@ -10202,22 +10653,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/eslint/node_modules/eslint-scope": {
-      "version": "7.2.2",
-      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-7.2.2.tgz",
-      "integrity": "sha512-dOt21O7lTMhDM+X9mB4GX+DZrZtCUJPL/wlcTqxyrx5IvO0IYtILdtrQGQp+8n5S0gwSVmOf9NQrjMOgfQZlIg==",
-      "dev": true,
-      "dependencies": {
-        "esrecurse": "^4.3.0",
-        "estraverse": "^5.2.0"
-      },
-      "engines": {
-        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
-      },
-      "funding": {
-        "url": "https://opencollective.com/eslint"
-      }
-    },
     "node_modules/eslint/node_modules/find-up": {
       "version": "5.0.0",
       "resolved": "https://registry.npmjs.org/find-up/-/find-up-5.0.0.tgz",
@@ -10304,15 +10739,15 @@
       }
     },
     "node_modules/eslint/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/eslint/node_modules/p-locate": {
@@ -10537,13 +10972,13 @@
       "devOptional": true
     },
     "node_modules/express": {
-      "version": "4.18.3",
-      "resolved": "https://registry.npmjs.org/express/-/express-4.18.3.tgz",
-      "integrity": "sha512-6VyCijWQ+9O7WuVMTRBTl+cjNNIzD5cY5mQ1WM8r/LEkI2u8EYpOotESNwzNlyCn3g+dmjKYI6BmNneSr/FSRw==",
+      "version": "4.18.2",
+      "resolved": "https://registry.npmjs.org/express/-/express-4.18.2.tgz",
+      "integrity": "sha512-5/PsL6iGPdfQ/lKM1UuielYgv3BUoJfz1aUwU9vHZ+J7gyvwdQXFEBIEIaxeGf0GIcreATNyBExtalisDbuMqQ==",
       "dependencies": {
         "accepts": "~1.3.8",
         "array-flatten": "1.1.1",
-        "body-parser": "1.20.2",
+        "body-parser": "1.20.1",
         "content-disposition": "0.5.4",
         "content-type": "~1.0.4",
         "cookie": "0.5.0",
@@ -10577,6 +11012,29 @@
         "node": ">= 0.10.0"
       }
     },
+    "node_modules/express/node_modules/body-parser": {
+      "version": "1.20.1",
+      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.1.tgz",
+      "integrity": "sha512-jWi7abTbYwajOytWCQc37VulmWiRae5RyTpaCyDcS5/lMdtwSz5lOpDE67srw/HYe35f1z3fDQw+3txg7gNtWw==",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "content-type": "~1.0.4",
+        "debug": "2.6.9",
+        "depd": "2.0.0",
+        "destroy": "1.2.0",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "on-finished": "2.4.1",
+        "qs": "6.11.0",
+        "raw-body": "2.5.1",
+        "type-is": "~1.6.18",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8",
+        "npm": "1.2.8000 || >= 1.4.16"
+      }
+    },
     "node_modules/express/node_modules/debug": {
       "version": "2.6.9",
       "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
@@ -10590,6 +11048,20 @@
       "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
     },
+    "node_modules/express/node_modules/raw-body": {
+      "version": "2.5.1",
+      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.1.tgz",
+      "integrity": "sha512-qqJBtEyVgS0ZmPGdCFPWJ3FreoqvG4MVQln/kCgF7Olq95IbOp0/BWyMwbdtn4VTvkM8Y7khCQ2Xgk/tcrCXig==",
+      "dependencies": {
+        "bytes": "3.1.2",
+        "http-errors": "2.0.0",
+        "iconv-lite": "0.4.24",
+        "unpipe": "1.0.0"
+      },
+      "engines": {
+        "node": ">= 0.8"
+      }
+    },
     "node_modules/extend": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
@@ -10634,9 +11106,9 @@
       "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q=="
     },
     "node_modules/fast-glob": {
-      "version": "3.3.2",
-      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.2.tgz",
-      "integrity": "sha512-oX2ruAFQwf/Orj8m737Y5adxDQO0LAB7/S5MnxCdTNDd4p6BsyIVsv9JQsATbTSq8KHRpLwIHbVlUNatxd+1Ow==",
+      "version": "3.3.1",
+      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.3.1.tgz",
+      "integrity": "sha512-kNFPyjhh5cKjrUltxs+wFx+ZkbRaxxmZ+X0ZU31SOsxCEtP9VPgtq2teZw1DebupL5GmDaNQ6yKMMVcM41iqDg==",
       "dev": true,
       "dependencies": {
         "@nodelib/fs.stat": "^2.0.2",
@@ -10673,9 +11145,9 @@
       }
     },
     "node_modules/fastq": {
-      "version": "1.17.1",
-      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.17.1.tgz",
-      "integrity": "sha512-sRVD3lWVIXWg6By68ZN7vho9a1pQcN/WBFaAAsDDFzlJjvoGx0P8z7V1t72grFJfJhu3YPZBuu25f7Kaw2jN1w==",
+      "version": "1.16.0",
+      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.16.0.tgz",
+      "integrity": "sha512-ifCoaXsDrsdkWTtiNJX5uzHDsrck5TzfKKDcuFFTIrrc/BS076qgEIfoIy1VeZqViznfKiysPYTh/QeHtnIsYA==",
       "dev": true,
       "dependencies": {
         "reusify": "^1.0.4"
@@ -10733,9 +11205,9 @@
       }
     },
     "node_modules/filelist/node_modules/minimatch": {
-      "version": "5.1.6",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
-      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
         "brace-expansion": "^2.0.1"
@@ -10849,42 +11321,42 @@
       }
     },
     "node_modules/firebase": {
-      "version": "10.8.1",
-      "resolved": "https://registry.npmjs.org/firebase/-/firebase-10.8.1.tgz",
-      "integrity": "sha512-4B2jzhU/aumfKL446MG41/T5+t+9d9urf5XGrjC0HRQUm4Ya/amV48HBchnje69ExaJP5f2WxO9OX3wh9ee4wA==",
-      "dependencies": {
-        "@firebase/analytics": "0.10.1",
-        "@firebase/analytics-compat": "0.2.7",
-        "@firebase/app": "0.9.28",
-        "@firebase/app-check": "0.8.2",
-        "@firebase/app-check-compat": "0.3.9",
-        "@firebase/app-compat": "0.2.28",
+      "version": "10.7.1",
+      "resolved": "https://registry.npmjs.org/firebase/-/firebase-10.7.1.tgz",
+      "integrity": "sha512-Mlt7y7zQ43FtKp4SCyYie3tnrOL3UMF2XXiV4ZXMrC0d0wtcOYmABuybhkJpJCKILpdekxr39wjnaai0DZlWFg==",
+      "dependencies": {
+        "@firebase/analytics": "0.10.0",
+        "@firebase/analytics-compat": "0.2.6",
+        "@firebase/app": "0.9.25",
+        "@firebase/app-check": "0.8.1",
+        "@firebase/app-check-compat": "0.3.8",
+        "@firebase/app-compat": "0.2.25",
         "@firebase/app-types": "0.9.0",
-        "@firebase/auth": "1.6.1",
-        "@firebase/auth-compat": "0.5.3",
-        "@firebase/database": "1.0.3",
-        "@firebase/database-compat": "1.0.3",
-        "@firebase/firestore": "4.4.3",
-        "@firebase/firestore-compat": "0.3.26",
-        "@firebase/functions": "0.11.2",
-        "@firebase/functions-compat": "0.3.8",
-        "@firebase/installations": "0.6.5",
-        "@firebase/installations-compat": "0.2.5",
-        "@firebase/messaging": "0.12.6",
-        "@firebase/messaging-compat": "0.2.6",
-        "@firebase/performance": "0.6.5",
-        "@firebase/performance-compat": "0.2.5",
-        "@firebase/remote-config": "0.4.5",
-        "@firebase/remote-config-compat": "0.2.5",
-        "@firebase/storage": "0.12.2",
-        "@firebase/storage-compat": "0.3.5",
-        "@firebase/util": "1.9.4"
+        "@firebase/auth": "1.5.1",
+        "@firebase/auth-compat": "0.5.1",
+        "@firebase/database": "1.0.2",
+        "@firebase/database-compat": "1.0.2",
+        "@firebase/firestore": "4.4.0",
+        "@firebase/firestore-compat": "0.3.23",
+        "@firebase/functions": "0.11.0",
+        "@firebase/functions-compat": "0.3.6",
+        "@firebase/installations": "0.6.4",
+        "@firebase/installations-compat": "0.2.4",
+        "@firebase/messaging": "0.12.5",
+        "@firebase/messaging-compat": "0.2.5",
+        "@firebase/performance": "0.6.4",
+        "@firebase/performance-compat": "0.2.4",
+        "@firebase/remote-config": "0.4.4",
+        "@firebase/remote-config-compat": "0.2.4",
+        "@firebase/storage": "0.12.0",
+        "@firebase/storage-compat": "0.3.3",
+        "@firebase/util": "1.9.3"
       }
     },
     "node_modules/firebase-tools": {
-      "version": "13.4.1",
-      "resolved": "https://registry.npmjs.org/firebase-tools/-/firebase-tools-13.4.1.tgz",
-      "integrity": "sha512-2p/PWAy9BjSN/9VtSPIaBBdrKKx7tmnTvjsI8Wagvgwwk3Qunys24kNYBL4XR+VweIDuFCzY1ZfbULOpURJYBg==",
+      "version": "13.0.3",
+      "resolved": "https://registry.npmjs.org/firebase-tools/-/firebase-tools-13.0.3.tgz",
+      "integrity": "sha512-tGkKQxcN5fH8uFGXtO+6YSHHKT6G7/AAqtOkHQ5bj3jrNi2gGpzUxb7aVzhbr4C7N5gxuifY4R5bcgRriyeNKw==",
       "dependencies": {
         "@google-cloud/pubsub": "^3.0.1",
         "abort-controller": "^3.0.0",
@@ -10902,18 +11374,15 @@
         "cross-env": "^5.1.3",
         "cross-spawn": "^7.0.3",
         "csv-parse": "^5.0.4",
-        "deep-equal-in-any-order": "^2.0.6",
         "exegesis": "^4.1.0",
         "exegesis-express": "^4.0.0",
         "express": "^4.16.4",
         "filesize": "^6.1.0",
         "form-data": "^4.0.0",
         "fs-extra": "^10.1.0",
-        "fuzzy": "^0.1.3",
         "glob": "^7.1.2",
         "google-auth-library": "^7.11.0",
-        "inquirer": "^8.2.6",
-        "inquirer-autocomplete-prompt": "^2.0.1",
+        "inquirer": "^8.2.0",
         "js-yaml": "^3.13.1",
         "jsonwebtoken": "^9.0.0",
         "leven": "^3.1.0",
@@ -10971,68 +11440,6 @@
         "url": "https://github.com/sponsors/epoberezkin"
       }
     },
-    "node_modules/firebase-tools/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/chalk": {
-      "version": "4.1.2",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
-      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
-      "dependencies": {
-        "ansi-styles": "^4.1.0",
-        "supports-color": "^7.1.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/chalk?sponsor=1"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/cli-width": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-3.0.0.tgz",
-      "integrity": "sha512-FxqpkPPwu1HjuN93Omfm4h8uIanXofW0RxVEW3k5RKx+mJJYSthzNhp32Kzxxy3YAEZ/Dc/EWN1vZRY0+kOhbw==",
-      "engines": {
-        "node": ">= 10"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
-    },
     "node_modules/firebase-tools/node_modules/commander": {
       "version": "4.1.1",
       "resolved": "https://registry.npmjs.org/commander/-/commander-4.1.1.tgz",
@@ -11054,57 +11461,6 @@
         "node": ">=12"
       }
     },
-    "node_modules/firebase-tools/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/inquirer": {
-      "version": "8.2.6",
-      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-8.2.6.tgz",
-      "integrity": "sha512-M1WuAmb7pn9zdFRtQYk26ZBoY043Sse0wVDdk4Bppr+JOXyQYybdtvK+l9wUibhtjdjvtoiNy8tk+EgsYIUqKg==",
-      "dependencies": {
-        "ansi-escapes": "^4.2.1",
-        "chalk": "^4.1.1",
-        "cli-cursor": "^3.1.0",
-        "cli-width": "^3.0.0",
-        "external-editor": "^3.0.3",
-        "figures": "^3.0.0",
-        "lodash": "^4.17.21",
-        "mute-stream": "0.0.8",
-        "ora": "^5.4.1",
-        "run-async": "^2.4.0",
-        "rxjs": "^7.5.5",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0",
-        "through": "^2.3.6",
-        "wrap-ansi": "^6.0.1"
-      },
-      "engines": {
-        "node": ">=12.0.0"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/inquirer-autocomplete-prompt": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/inquirer-autocomplete-prompt/-/inquirer-autocomplete-prompt-2.0.1.tgz",
-      "integrity": "sha512-jUHrH0btO7j5r8DTQgANf2CBkTZChoVySD8zF/wp5fZCOLIuUbleXhf4ZY5jNBOc1owA3gdfWtfZuppfYBhcUg==",
-      "dependencies": {
-        "ansi-escapes": "^4.3.2",
-        "figures": "^3.2.0",
-        "picocolors": "^1.0.0",
-        "run-async": "^2.4.1",
-        "rxjs": "^7.5.4"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "peerDependencies": {
-        "inquirer": "^8.0.0"
-      }
-    },
     "node_modules/firebase-tools/node_modules/is-wsl": {
       "version": "1.1.0",
       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-1.1.0.tgz",
@@ -11118,22 +11474,28 @@
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
       "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg=="
     },
+    "node_modules/firebase-tools/node_modules/jsonfile": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
+      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
+      "dependencies": {
+        "universalify": "^2.0.0"
+      },
+      "optionalDependencies": {
+        "graceful-fs": "^4.1.6"
+      }
+    },
     "node_modules/firebase-tools/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
-    "node_modules/firebase-tools/node_modules/mute-stream": {
-      "version": "0.0.8",
-      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
-      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA=="
-    },
     "node_modules/firebase-tools/node_modules/open": {
       "version": "6.4.0",
       "resolved": "https://registry.npmjs.org/open/-/open-6.4.0.tgz",
@@ -11145,23 +11507,12 @@
         "node": ">=8"
       }
     },
-    "node_modules/firebase-tools/node_modules/run-async": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
-      "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
-      "engines": {
-        "node": ">=0.12.0"
-      }
-    },
-    "node_modules/firebase-tools/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
+    "node_modules/firebase-tools/node_modules/universalify": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
+      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
       "engines": {
-        "node": ">=8"
+        "node": ">= 10.0.0"
       }
     },
     "node_modules/flat": {
@@ -11188,9 +11539,9 @@
       }
     },
     "node_modules/flatted": {
-      "version": "3.3.1",
-      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.3.1.tgz",
-      "integrity": "sha512-X8cqMLLie7KsNUDSdzeN8FYK9rEt4Dt67OsG/DNGnYTSDBG4uFAJFBnUeiV+zCVAvwFy56IjM9sH51jVaEhNxw==",
+      "version": "3.2.9",
+      "resolved": "https://registry.npmjs.org/flatted/-/flatted-3.2.9.tgz",
+      "integrity": "sha512-36yxDn5H7OFZQla0/jFJmbIKTdZAQHngCedGxiMmpNfEZM0sdEeT+WczLQrjK6D7o2aiyLYDnkw0R3JK0Qv1RQ==",
       "dev": true
     },
     "node_modules/fn.name": {
@@ -11306,22 +11657,42 @@
         "node": ">= 0.6"
       }
     },
+    "node_modules/fromentries": {
+      "version": "1.3.2",
+      "resolved": "https://registry.npmjs.org/fromentries/-/fromentries-1.3.2.tgz",
+      "integrity": "sha512-cHEpEQHUg0f8XdtZCc2ZAhrHzKzT0MrFUTcvx+hfxYu7rGMDc5SKoXFh+n4YigxsHXRzc6OrCshdR1bWH6HHyg==",
+      "dev": true,
+      "funding": [
+        {
+          "type": "github",
+          "url": "https://github.com/sponsors/feross"
+        },
+        {
+          "type": "patreon",
+          "url": "https://www.patreon.com/feross"
+        },
+        {
+          "type": "consulting",
+          "url": "https://feross.org/support"
+        }
+      ]
+    },
     "node_modules/fs-constants": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
       "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow=="
     },
     "node_modules/fs-extra": {
-      "version": "11.2.0",
-      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
-      "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
+      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
       "dependencies": {
         "graceful-fs": "^4.2.0",
-        "jsonfile": "^6.0.1",
-        "universalify": "^2.0.0"
+        "jsonfile": "^4.0.0",
+        "universalify": "^0.1.0"
       },
       "engines": {
-        "node": ">=14.14"
+        "node": ">=6 <7 || >=8"
       }
     },
     "node_modules/fs-minipass": {
@@ -11471,19 +11842,15 @@
       }
     },
     "node_modules/get-intrinsic": {
-      "version": "1.2.4",
-      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.4.tgz",
-      "integrity": "sha512-5uYhsJH8VJBTv7oslg4BznJYhDoRI6waYCxMmCdnTrcCrHA/fCFKoTFz2JKKE0HdDFUF7/oQuhzumXJK7paBRQ==",
+      "version": "1.2.2",
+      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.2.2.tgz",
+      "integrity": "sha512-0gSo4ml/0j98Y3lngkFEot/zhiCeWsbYIlZ+uZOVgzLyLaUw7wxUL+nCTP0XJvJg1AXulJRI3UJi8GsbDuxdGA==",
       "dependencies": {
-        "es-errors": "^1.3.0",
         "function-bind": "^1.1.2",
         "has-proto": "^1.0.1",
         "has-symbols": "^1.0.3",
         "hasown": "^2.0.0"
       },
-      "engines": {
-        "node": ">= 0.4"
-      },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
@@ -11510,14 +11877,13 @@
       }
     },
     "node_modules/get-symbol-description": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.2.tgz",
-      "integrity": "sha512-g0QYk1dZBxGwk+Ngc+ltRH2IBp2f7zBkBMBJZCDerh6EhlhSR6+9irMCuT/09zD6qkarHUSn529sK/yL4S27mg==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/get-symbol-description/-/get-symbol-description-1.0.0.tgz",
+      "integrity": "sha512-2EmdH1YvIQiZpltCNgkuiUnyukzxM/R6NDJX31Ke3BG1Nq5b0S2PhX59UKi9vZpPDQVdqn+1IcaAwnzTT5vCjw==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.5",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.4"
+        "call-bind": "^1.0.2",
+        "get-intrinsic": "^1.1.1"
       },
       "engines": {
         "node": ">= 0.4"
@@ -11527,9 +11893,9 @@
       }
     },
     "node_modules/get-tsconfig": {
-      "version": "4.7.3",
-      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.7.3.tgz",
-      "integrity": "sha512-ZvkrzoUA0PQZM6fy6+/Hce561s+faD1rsNwhnO5FelNjyy7EMGJ3Rz1AQ8GYDWjhRs/7dBLOEJvhK8MiEJOAFg==",
+      "version": "4.7.2",
+      "resolved": "https://registry.npmjs.org/get-tsconfig/-/get-tsconfig-4.7.2.tgz",
+      "integrity": "sha512-wuMsz4leaj5hbGgg4IvDU0bqJagpftG5l5cXIAvo8uZrqn0NJqwtfupTN00VnkQJPcIRrxYrm1Ue24btpCha2A==",
       "dev": true,
       "peer": true,
       "dependencies": {
@@ -11540,14 +11906,14 @@
       }
     },
     "node_modules/get-uri": {
-      "version": "6.0.3",
-      "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.3.tgz",
-      "integrity": "sha512-BzUrJBS9EcUb4cFol8r4W3v1cPsSyajLSthNkz5BxbpDcHN5tIrM10E2eNvfnvBn3DaT3DUgx0OpsBKkaOpanw==",
+      "version": "6.0.2",
+      "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.2.tgz",
+      "integrity": "sha512-5KLucCJobh8vBY1K07EFV4+cPZH3mrV9YeAruUseCQKHB58SGjjT2l9/eA9LD082IiuMjSlFJEcdJ27TXvbZNw==",
       "dependencies": {
         "basic-ftp": "^5.0.2",
-        "data-uri-to-buffer": "^6.0.2",
+        "data-uri-to-buffer": "^6.0.0",
         "debug": "^4.3.4",
-        "fs-extra": "^11.2.0"
+        "fs-extra": "^8.1.0"
       },
       "engines": {
         "node": ">= 14"
@@ -11628,20 +11994,6 @@
         "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
       }
     },
-    "node_modules/gh-pages/node_modules/fs-extra": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
-      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
-      "dev": true,
-      "dependencies": {
-        "graceful-fs": "^4.2.0",
-        "jsonfile": "^4.0.0",
-        "universalify": "^0.1.0"
-      },
-      "engines": {
-        "node": ">=6 <7 || >=8"
-      }
-    },
     "node_modules/gh-pages/node_modules/globby": {
       "version": "6.1.0",
       "resolved": "https://registry.npmjs.org/globby/-/globby-6.1.0.tgz",
@@ -11658,15 +12010,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/gh-pages/node_modules/jsonfile": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
-      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
-      "dev": true,
-      "optionalDependencies": {
-        "graceful-fs": "^4.1.6"
-      }
-    },
     "node_modules/gh-pages/node_modules/pkg-dir": {
       "version": "4.2.0",
       "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
@@ -11679,29 +12022,19 @@
         "node": ">=8"
       }
     },
-    "node_modules/gh-pages/node_modules/universalify": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
-      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
-      "dev": true,
-      "engines": {
-        "node": ">= 4.0.0"
-      }
-    },
     "node_modules/glob": {
-      "version": "7.2.3",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
-      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
+      "version": "8.1.0",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
+      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
       "dependencies": {
         "fs.realpath": "^1.0.0",
         "inflight": "^1.0.4",
         "inherits": "2",
-        "minimatch": "^3.1.1",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
+        "minimatch": "^5.0.1",
+        "once": "^1.3.0"
       },
       "engines": {
-        "node": "*"
+        "node": ">=12"
       },
       "funding": {
         "url": "https://github.com/sponsors/isaacs"
@@ -11739,24 +12072,15 @@
       "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
       "dev": true
     },
-    "node_modules/glob/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/glob/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/global-dirs": {
@@ -12175,20 +12499,20 @@
       }
     },
     "node_modules/has-property-descriptors": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.2.tgz",
-      "integrity": "sha512-55JNKuIW+vq4Ke1BjOTjM2YctQIvCT7GFzHwmfZPGo5wnrgkid0YQtnAleFSqumZm4az3n2BS+erby5ipJdgrg==",
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/has-property-descriptors/-/has-property-descriptors-1.0.1.tgz",
+      "integrity": "sha512-VsX8eaIewvas0xnvinAe9bw4WfIeODpGYikiWYLH+dma0Jw6KHYqWiWfhQlgOVK8D6PvjubK5Uc4P0iIhIcNVg==",
       "dependencies": {
-        "es-define-property": "^1.0.0"
+        "get-intrinsic": "^1.2.2"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
       }
     },
     "node_modules/has-proto": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.3.tgz",
-      "integrity": "sha512-SJ1amZAJUiZS+PhsVLf5tGydlaVB8EdFpaSO4gmiUKUOxk8qzn5AIy4ZeJUmh22znIdk/uMAUT2pl3FxzVUH+Q==",
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/has-proto/-/has-proto-1.0.1.tgz",
+      "integrity": "sha512-7qE+iP+O+bgF9clE5+UoBFzE65mlBiVj3tKCrlNQ0Ogwm0BjpT/gK4SlLYDMybDh5I3TCTKnPPa0oMG7JDYrhg==",
       "engines": {
         "node": ">= 0.4"
       },
@@ -12208,12 +12532,12 @@
       }
     },
     "node_modules/has-tostringtag": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
-      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.0.tgz",
+      "integrity": "sha512-kFjcSNhnlGV1kyoGk7OXKSawH5JOb/LzUc5w9B02hOTO0dfFRjbHQKvg1d6cf3HbeUmtU9VbbV3qzZ2Teh97WQ==",
       "dev": true,
       "dependencies": {
-        "has-symbols": "^1.0.3"
+        "has-symbols": "^1.0.2"
       },
       "engines": {
         "node": ">= 0.4"
@@ -12230,10 +12554,35 @@
         "node": ">=8"
       }
     },
+    "node_modules/hasha": {
+      "version": "5.2.2",
+      "resolved": "https://registry.npmjs.org/hasha/-/hasha-5.2.2.tgz",
+      "integrity": "sha512-Hrp5vIK/xr5SkeN2onO32H0MgNZ0f17HRNH39WfL0SYUNOTZ5Lz1TJ8Pajo/87dYGEFlLMm7mIc/k/s6Bvz9HQ==",
+      "dev": true,
+      "dependencies": {
+        "is-stream": "^2.0.0",
+        "type-fest": "^0.8.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/sindresorhus"
+      }
+    },
+    "node_modules/hasha/node_modules/type-fest": {
+      "version": "0.8.1",
+      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
+      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/hasown": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
-      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.0.tgz",
+      "integrity": "sha512-vUptKVTpIJhcczKBbgnS+RtcuYMB8+oNzPK2/Hp3hanz8JmpATdmmgLgSaadVREkDm+e2giHwY3ZRkyjSIDDFA==",
       "dependencies": {
         "function-bind": "^1.1.2"
       },
@@ -12241,10 +12590,27 @@
         "node": ">= 0.4"
       }
     },
+    "node_modules/hdr-histogram-js": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/hdr-histogram-js/-/hdr-histogram-js-2.0.3.tgz",
+      "integrity": "sha512-Hkn78wwzWHNCp2uarhzQ2SGFLU3JY8SBDDd3TAABK4fc30wm+MuPOrg5QVFVfkKOQd6Bfz3ukJEI+q9sXEkK1g==",
+      "dev": true,
+      "dependencies": {
+        "@assemblyscript/loader": "^0.10.1",
+        "base64-js": "^1.2.0",
+        "pako": "^1.0.3"
+      }
+    },
+    "node_modules/hdr-histogram-percentiles-obj": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/hdr-histogram-percentiles-obj/-/hdr-histogram-percentiles-obj-3.0.0.tgz",
+      "integrity": "sha512-7kIufnBqdsBGcSZLPJwqHT3yhk1QTsSlFsVD3kx5ixH/AlgBs9yM1q6DPhXZ8f8gtdqgh7N7/5btRLpQsS2gHw==",
+      "dev": true
+    },
     "node_modules/heap-js": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/heap-js/-/heap-js-2.5.0.tgz",
-      "integrity": "sha512-kUGoI3p7u6B41z/dp33G6OaL7J4DRqRYwVmeIlwLClx7yaaAy7hoDExnuejTKtuDwfcatGmddHDEOjf6EyIxtQ==",
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/heap-js/-/heap-js-2.3.0.tgz",
+      "integrity": "sha512-E5303mzwQ+4j/n2J0rDvEPBN7GKjhis10oHiYOgjxsmxYgqG++hz9NyLLOXttzH8as/DyiBHYpUrJTZWYaMo8Q==",
       "engines": {
         "node": ">=10.0.0"
       }
@@ -12262,9 +12628,9 @@
       }
     },
     "node_modules/hosted-git-info/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
-      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
       "dev": true,
       "engines": {
         "node": "14 || >=16.14"
@@ -12319,9 +12685,9 @@
       }
     },
     "node_modules/html-entities": {
-      "version": "2.5.2",
-      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.5.2.tgz",
-      "integrity": "sha512-K//PSRMQk4FZ78Kyau+mZurHn3FH0Vwr+H36eE0rPbeYkRRi9YxceYPhuN60UwWorxyKHhqoAJl2OFKa4BVtaA==",
+      "version": "2.4.0",
+      "resolved": "https://registry.npmjs.org/html-entities/-/html-entities-2.4.0.tgz",
+      "integrity": "sha512-igBTJcNNNhvZFRtm8uA6xMY6xYleeDwn3PeBCkDz7tHttv4F2hsDI2aPgNERWzvRcNYHNT3ymRaQzllmXj4YsQ==",
       "dev": true,
       "funding": [
         {
@@ -12406,9 +12772,9 @@
       }
     },
     "node_modules/http-proxy-agent": {
-      "version": "7.0.2",
-      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
-      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.0.tgz",
+      "integrity": "sha512-+ZT+iBxVUQ1asugqnD6oWoRiS25AkjNfG085dKJGtGxkdwLQrMKU5wJr2bOOFAXzKcTuqq+7fZlTMgG3SRfIYQ==",
       "dependencies": {
         "agent-base": "^7.1.0",
         "debug": "^4.3.4"
@@ -12545,6 +12911,18 @@
         "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
+    "node_modules/ignore-walk/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/image-size": {
       "version": "0.5.5",
       "resolved": "https://registry.npmjs.org/image-size/-/image-size-0.5.5.tgz",
@@ -12565,9 +12943,9 @@
       "dev": true
     },
     "node_modules/immutable": {
-      "version": "4.3.5",
-      "resolved": "https://registry.npmjs.org/immutable/-/immutable-4.3.5.tgz",
-      "integrity": "sha512-8eabxkth9gZatlwl5TBuJnCsoTADlL6ftEr7A4qgdaTsPyreilDSnUk57SO+jfKcNtxPa22U5KK6DSeAYhpBJw==",
+      "version": "4.3.4",
+      "resolved": "https://registry.npmjs.org/immutable/-/immutable-4.3.4.tgz",
+      "integrity": "sha512-fsXeu4J4i6WNWSikpI88v/PcVflZz+6kMhUfIwc5SY+poQRPnaf5V7qds6SUyUN3cVxEzuCab7QIoLOQ+DQ1wA==",
       "dev": true
     },
     "node_modules/import-fresh": {
@@ -12644,43 +13022,192 @@
       }
     },
     "node_modules/inquirer": {
-      "version": "9.2.14",
-      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-9.2.14.tgz",
-      "integrity": "sha512-4ByIMt677Iz5AvjyKrDpzaepIyMewNvDcvwpVVRZNmy9dLakVoVgdCHZXbK1SlVJra1db0JZ6XkJyHsanpdrdQ==",
-      "dev": true,
+      "version": "8.2.4",
+      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-8.2.4.tgz",
+      "integrity": "sha512-nn4F01dxU8VeKfq192IjLsxu0/OmMZ4Lg3xKAns148rCaXP6ntAoEkVYZThWjwON8AlzdZZi6oqnhNbxUG9hVg==",
       "dependencies": {
-        "@ljharb/through": "^2.3.12",
-        "ansi-escapes": "^4.3.2",
-        "chalk": "^5.3.0",
+        "ansi-escapes": "^4.2.1",
+        "chalk": "^4.1.1",
         "cli-cursor": "^3.1.0",
-        "cli-width": "^4.1.0",
-        "external-editor": "^3.1.0",
-        "figures": "^3.2.0",
+        "cli-width": "^3.0.0",
+        "external-editor": "^3.0.3",
+        "figures": "^3.0.0",
         "lodash": "^4.17.21",
-        "mute-stream": "1.0.0",
+        "mute-stream": "0.0.8",
         "ora": "^5.4.1",
-        "run-async": "^3.0.0",
-        "rxjs": "^7.8.1",
-        "string-width": "^4.2.3",
-        "strip-ansi": "^6.0.1",
-        "wrap-ansi": "^6.2.0"
+        "run-async": "^2.4.0",
+        "rxjs": "^7.5.5",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0",
+        "through": "^2.3.6",
+        "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12.0.0"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt": {
+      "version": "1.4.0",
+      "resolved": "https://registry.npmjs.org/inquirer-autocomplete-prompt/-/inquirer-autocomplete-prompt-1.4.0.tgz",
+      "integrity": "sha512-qHgHyJmbULt4hI+kCmwX92MnSxDs/Yhdt4wPA30qnoa01OF6uTXV8yvH4hKXgdaTNmkZ9D01MHjqKYEuJN+ONw==",
+      "dependencies": {
+        "ansi-escapes": "^4.3.1",
+        "chalk": "^4.0.0",
+        "figures": "^3.2.0",
+        "run-async": "^2.4.0",
+        "rxjs": "^6.6.2"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "peerDependencies": {
+        "inquirer": "^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/chalk": {
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
+      "engines": {
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/chalk?sponsor=1"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/rxjs": {
+      "version": "6.6.7",
+      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.6.7.tgz",
+      "integrity": "sha512-hTdwr+7yYNIT5n4AMYp85KA6yw2Va0FLa3Rguvbpa4W3I5xynaBZo41cM3XM+4Q6fRMj3sBYIR1VAmZMXYJvRQ==",
+      "dependencies": {
+        "tslib": "^1.9.0"
+      },
+      "engines": {
+        "npm": ">=2.0.0"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/inquirer-autocomplete-prompt/node_modules/tslib": {
+      "version": "1.14.1",
+      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
+      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg=="
+    },
+    "node_modules/inquirer/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dependencies": {
+        "color-convert": "^2.0.1"
       },
       "engines": {
-        "node": ">=18"
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
     "node_modules/inquirer/node_modules/chalk": {
-      "version": "5.3.0",
-      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.3.0.tgz",
-      "integrity": "sha512-dLitG79d+GV1Nb/VYcCDFivJeK1hiukt9QjRNVOsUtTy1rR1YJsmpGGTZ3qJos+uw7WmWF4wUwBd9jxjocFC2w==",
-      "dev": true,
+      "version": "4.1.2",
+      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
+      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
+      "dependencies": {
+        "ansi-styles": "^4.1.0",
+        "supports-color": "^7.1.0"
+      },
       "engines": {
-        "node": "^12.17.0 || ^14.13 || >=16.0.0"
+        "node": ">=10"
       },
       "funding": {
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
+    "node_modules/inquirer/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/inquirer/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+    },
+    "node_modules/inquirer/node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/inquirer/node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/install-artifact-from-github": {
       "version": "1.3.5",
       "resolved": "https://registry.npmjs.org/install-artifact-from-github/-/install-artifact-from-github-1.3.5.tgz",
@@ -12692,12 +13219,12 @@
       }
     },
     "node_modules/internal-slot": {
-      "version": "1.0.7",
-      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.7.tgz",
-      "integrity": "sha512-NGnrKwXzSms2qUUih/ILZ5JBqNTSa1+ZmP6flaIp6KmSElgE9qdndzS3cqjrDovwFdmwsGsLdeFgB6suw+1e9g==",
+      "version": "1.0.6",
+      "resolved": "https://registry.npmjs.org/internal-slot/-/internal-slot-1.0.6.tgz",
+      "integrity": "sha512-Xj6dv+PsbtwyPpEflsejS+oIZxmMlV44zAhG479uYu89MsjcYOhCFnNyKrkJrihbsiasQyY0afoCl/9BLR65bg==",
       "dev": true,
       "dependencies": {
-        "es-errors": "^1.3.0",
+        "get-intrinsic": "^1.2.2",
         "hasown": "^2.0.0",
         "side-channel": "^1.0.4"
       },
@@ -12705,22 +13232,10 @@
         "node": ">= 0.4"
       }
     },
-    "node_modules/ip-address": {
-      "version": "9.0.5",
-      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
-      "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
-      "dependencies": {
-        "jsbn": "1.1.0",
-        "sprintf-js": "^1.1.3"
-      },
-      "engines": {
-        "node": ">= 12"
-      }
-    },
-    "node_modules/ip-address/node_modules/sprintf-js": {
-      "version": "1.1.3",
-      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
-      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA=="
+    "node_modules/ip": {
+      "version": "1.1.8",
+      "resolved": "https://registry.npmjs.org/ip/-/ip-1.1.8.tgz",
+      "integrity": "sha512-PuExPYUiu6qMBQb4l06ecm6T6ujzhmh+MeJcW9wa89PoAz5pvd4zPgN5WJV104mb6S2T1AwNIAaB70JNrLQWhg=="
     },
     "node_modules/ip-regex": {
       "version": "4.3.0",
@@ -12739,16 +13254,14 @@
       }
     },
     "node_modules/is-array-buffer": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.4.tgz",
-      "integrity": "sha512-wcjaerHw0ydZwfhiKbXJWLDY8A7yV7KhjQOpb83hGgGfId/aQa4TOvwyzn2PuswW2gPCYEL/nEAiSVpdOj1lXw==",
+      "version": "3.0.2",
+      "resolved": "https://registry.npmjs.org/is-array-buffer/-/is-array-buffer-3.0.2.tgz",
+      "integrity": "sha512-y+FyyR/w8vfIRq4eQcM1EYgSTnmHXPqaF+IgzgraytCFq5Xh8lllDVmAZolPJiZttZLeFSINPYMaEJ7/vWUa1w==",
       "dev": true,
       "dependencies": {
         "call-bind": "^1.0.2",
-        "get-intrinsic": "^1.2.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
+        "get-intrinsic": "^1.2.0",
+        "is-typed-array": "^1.1.10"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -12869,7 +13382,6 @@
       "version": "2.2.1",
       "resolved": "https://registry.npmjs.org/is-docker/-/is-docker-2.2.1.tgz",
       "integrity": "sha512-F+i2BKsFrH66iaUFc0woD8sLy8getkwTwtOBjvs56Cx4CgJDeKQeqfz8wAYiSb8JOprWhHH5p77PbmYCvvUuXQ==",
-      "dev": true,
       "bin": {
         "is-docker": "cli.js"
       },
@@ -12937,9 +13449,9 @@
       "devOptional": true
     },
     "node_modules/is-negative-zero": {
-      "version": "2.0.3",
-      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.3.tgz",
-      "integrity": "sha512-5KoIu2Ngpyek75jXodFvnafB6DJgr3u8uuK0LEZJjrU19DrMD3EVERaR8sjz8CCGgpZvxPl9SuE1GMVPFHx1mw==",
+      "version": "2.0.2",
+      "resolved": "https://registry.npmjs.org/is-negative-zero/-/is-negative-zero-2.0.2.tgz",
+      "integrity": "sha512-dqJvarLawXsFbNDeJW7zAz8ItJ9cd28YufuuFzh0G8pNHjJMnY08Dv7sYX2uF5UpQOwieAeOExEYAWWfu7ZZUA==",
       "dev": true,
       "engines": {
         "node": ">= 0.4"
@@ -13072,15 +13584,12 @@
       }
     },
     "node_modules/is-shared-array-buffer": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.3.tgz",
-      "integrity": "sha512-nA2hv5XIhLR3uVzDDfCIknerhx8XUKnstuOERPNNIinXG7v9u+ohXF67vxm4TPTEPU6lm61ZkwP3c9PCB97rhg==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-shared-array-buffer/-/is-shared-array-buffer-1.0.2.tgz",
+      "integrity": "sha512-sqN2UDu1/0y6uvXyStCOzyhAjCSlHceFoMKJW8W9EU9cvic/QdsZ0kEU93HEy3IUEFZIiH/3w+AH/UQbPHNdhA==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7"
-      },
-      "engines": {
-        "node": ">= 0.4"
+        "call-bind": "^1.0.2"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -13133,12 +13642,12 @@
       }
     },
     "node_modules/is-typed-array": {
-      "version": "1.1.13",
-      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.13.tgz",
-      "integrity": "sha512-uZ25/bUAlUY5fR4OKT4rZQEBrzQWYV9ZJYGGsUmEJ6thodVJ1HX64ePQ6Z0qPWP+m+Uq6e9UugrE38jeYsDSMw==",
+      "version": "1.1.12",
+      "resolved": "https://registry.npmjs.org/is-typed-array/-/is-typed-array-1.1.12.tgz",
+      "integrity": "sha512-Z14TF2JNG8Lss5/HMqt0//T9JeHXttXy5pH/DBU4vi98ozO2btxzq9MwYDZYnKwU8nRsz/+GVFVRDq3DkVuSPg==",
       "dev": true,
       "dependencies": {
-        "which-typed-array": "^1.1.14"
+        "which-typed-array": "^1.1.11"
       },
       "engines": {
         "node": ">= 0.4"
@@ -13186,11 +13695,19 @@
       "integrity": "sha512-sNxgpk9793nzSs7bA6JQJGeIuRBQhAaNGG77kzYQgMkrID+lS6SlK07K5LaptscDlSaIgH+GPFzf+d75FVxozA==",
       "dev": true
     },
+    "node_modules/is-windows": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/is-windows/-/is-windows-1.0.2.tgz",
+      "integrity": "sha512-eXK1UInq2bPmjyX6e3VHIzMLobc4J94i4AWn+Hpq3OU5KkrRC96OAcR3PRJ/pGu6m8TRnBHP9dkXQVsT/COVIA==",
+      "dev": true,
+      "engines": {
+        "node": ">=0.10.0"
+      }
+    },
     "node_modules/is-wsl": {
       "version": "2.2.0",
       "resolved": "https://registry.npmjs.org/is-wsl/-/is-wsl-2.2.0.tgz",
       "integrity": "sha512-fKzAra0rGJUUBwGBgNkHZuToZcn+TtXHpeCgmkMJMMYx1sQDYaCSyjJBSCa2nH1DGm7s3n1oBnohoVTBaN7Lww==",
-      "dev": true,
       "dependencies": {
         "is-docker": "^2.0.0"
       },
@@ -13272,6 +13789,18 @@
         "node": ">=8"
       }
     },
+    "node_modules/istanbul-lib-hook": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-hook/-/istanbul-lib-hook-3.0.0.tgz",
+      "integrity": "sha512-Pt/uge1Q9s+5VAZ+pCo16TYMWPBIl+oaNIjgLQxcX0itS6ueeaA+pEfThZpH8WxhFgCiEb8sAJY6MdUKgiIWaQ==",
+      "dev": true,
+      "dependencies": {
+        "append-transform": "^2.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/istanbul-lib-instrument": {
       "version": "5.2.1",
       "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
@@ -13297,6 +13826,35 @@
         "semver": "bin/semver.js"
       }
     },
+    "node_modules/istanbul-lib-processinfo": {
+      "version": "2.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-processinfo/-/istanbul-lib-processinfo-2.0.3.tgz",
+      "integrity": "sha512-NkwHbo3E00oybX6NGJi6ar0B29vxyvNwoC7eJ4G4Yq28UfY758Hgn/heV8VRFhevPED4LXfFz0DQ8z/0kw9zMg==",
+      "dev": true,
+      "dependencies": {
+        "archy": "^1.0.0",
+        "cross-spawn": "^7.0.3",
+        "istanbul-lib-coverage": "^3.2.0",
+        "p-map": "^3.0.0",
+        "rimraf": "^3.0.0",
+        "uuid": "^8.3.2"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/istanbul-lib-processinfo/node_modules/p-map": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/p-map/-/p-map-3.0.0.tgz",
+      "integrity": "sha512-d3qXVTF/s+W+CdJ5A29wywV2n8CQQYahlgz2bFiA+4eVNJbHJodPZ+/gXwPGh0bOqA+j8S+6+ckmvLGPk1QpxQ==",
+      "dev": true,
+      "dependencies": {
+        "aggregate-error": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/istanbul-lib-report": {
       "version": "3.0.1",
       "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
@@ -13371,9 +13929,9 @@
       }
     },
     "node_modules/istanbul-reports": {
-      "version": "3.1.7",
-      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
-      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
+      "version": "3.1.6",
+      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.6.tgz",
+      "integrity": "sha512-TLgnMkKg3iTDsQ9PbPTdpfAK2DzjF9mqUG7RMgcQl8oFjad8ob4laGxv5XV5U9MAfx8D6tSJiUyuAwzLicaxlg==",
       "dev": true,
       "dependencies": {
         "html-escaper": "^2.0.0",
@@ -13434,16 +13992,6 @@
         "url": "https://github.com/chalk/ansi-styles?sponsor=1"
       }
     },
-    "node_modules/jake/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/jake/node_modules/chalk": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
@@ -13488,15 +14036,15 @@
       }
     },
     "node_modules/jake/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/jake/node_modules/supports-color": {
@@ -13512,31 +14060,57 @@
       }
     },
     "node_modules/jasmine": {
-      "version": "2.8.0",
-      "resolved": "https://registry.npmjs.org/jasmine/-/jasmine-2.8.0.tgz",
-      "integrity": "sha512-KbdGQTf5jbZgltoHs31XGiChAPumMSY64OZMWLNYnEnMfG5uwGBhffePwuskexjT+/Jea/gU3qAU8344hNohSw==",
+      "version": "5.1.0",
+      "resolved": "https://registry.npmjs.org/jasmine/-/jasmine-5.1.0.tgz",
+      "integrity": "sha512-prmJlC1dbLhti4nE4XAPDWmfJesYO15sjGXVp7Cs7Ym5I9Xtwa/hUHxxJXjnpfLO72+ySttA0Ztf8g/RiVnUKw==",
       "dev": true,
       "dependencies": {
-        "exit": "^0.1.2",
-        "glob": "^7.0.6",
-        "jasmine-core": "~2.8.0"
+        "glob": "^10.2.2",
+        "jasmine-core": "~5.1.0"
       },
       "bin": {
         "jasmine": "bin/jasmine.js"
       }
     },
     "node_modules/jasmine-core": {
-      "version": "5.1.2",
-      "resolved": "https://registry.npmjs.org/jasmine-core/-/jasmine-core-5.1.2.tgz",
-      "integrity": "sha512-2oIUMGn00FdUiqz6epiiJr7xcFyNYj3rDcfmnzfkBnHyBQ3cBQUs4mmyGsOb7TTLb9kxk7dBcmEmqhDKkBoDyA==",
+      "version": "5.1.1",
+      "resolved": "https://registry.npmjs.org/jasmine-core/-/jasmine-core-5.1.1.tgz",
+      "integrity": "sha512-UrzO3fL7nnxlQXlvTynNAenL+21oUQRlzqQFsA2U11ryb4+NLOCOePZ70PTojEaUKhiFugh7dG0Q+I58xlPdWg==",
+      "dev": true
+    },
+    "node_modules/jasmine/node_modules/glob": {
+      "version": "10.3.10",
+      "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.10.tgz",
+      "integrity": "sha512-fa46+tv1Ak0UPK1TOy/pZrIybNNt4HCv7SDzwyfiOZkvZLEbjsZkJBPtDHVshZjbecAoAGSC20MjLDG/qr679g==",
       "dev": true,
-      "peer": true
+      "dependencies": {
+        "foreground-child": "^3.1.0",
+        "jackspeak": "^2.3.5",
+        "minimatch": "^9.0.1",
+        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0",
+        "path-scurry": "^1.10.1"
+      },
+      "bin": {
+        "glob": "dist/esm/bin.mjs"
+      },
+      "engines": {
+        "node": ">=16 || 14 >=14.17"
+      },
+      "funding": {
+        "url": "https://github.com/sponsors/isaacs"
+      }
     },
-    "node_modules/jasmine/node_modules/jasmine-core": {
-      "version": "2.8.0",
-      "resolved": "https://registry.npmjs.org/jasmine-core/-/jasmine-core-2.8.0.tgz",
-      "integrity": "sha512-SNkOkS+/jMZvLhuSx1fjhcNWUC/KG6oVyFUGkSBEr9n1axSNduWU8GlI7suaHXr4yxjet6KjrUZxUTE5WzzWwQ==",
-      "dev": true
+    "node_modules/jasmine/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
     },
     "node_modules/jasminewd2": {
       "version": "2.2.0",
@@ -13730,9 +14304,10 @@
       }
     },
     "node_modules/jsbn": {
-      "version": "1.1.0",
-      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
-      "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A=="
+      "version": "0.1.1",
+      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
+      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
+      "dev": true
     },
     "node_modules/jsdoc": {
       "version": "4.0.2",
@@ -13808,13 +14383,10 @@
       "dev": true
     },
     "node_modules/json-parse-even-better-errors": {
-      "version": "3.0.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-3.0.1.tgz",
-      "integrity": "sha512-aatBvbL26wVUCLmbWdCpeu9iF5wOyWpagiKkInA+kfws3sWdBrTnsvN2CKcyCYyUrc7rebNBlK6+kteg7ksecg==",
-      "dev": true,
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
+      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
+      "dev": true
     },
     "node_modules/json-parse-helpfulerror": {
       "version": "1.0.3",
@@ -13865,18 +14437,14 @@
       }
     },
     "node_modules/jsonc-parser": {
-      "version": "3.2.1",
-      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.1.tgz",
-      "integrity": "sha512-AilxAyFOAcK5wA1+LeaySVBrHsGQvUFCDWXKpZjzaL0PqW+xfBOttn8GNtWKFWqneyMZj41MWF9Kl6iPWLwgOA==",
-      "dev": true
+      "version": "3.2.0",
+      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz",
+      "integrity": "sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w=="
     },
     "node_modules/jsonfile": {
-      "version": "6.1.0",
-      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
-      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
-      "dependencies": {
-        "universalify": "^2.0.0"
-      },
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
+      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
       "optionalDependencies": {
         "graceful-fs": "^4.1.6"
       }
@@ -14013,9 +14581,9 @@
       }
     },
     "node_modules/karma": {
-      "version": "6.4.3",
-      "resolved": "https://registry.npmjs.org/karma/-/karma-6.4.3.tgz",
-      "integrity": "sha512-LuucC/RE92tJ8mlCwqEoRWXP38UMAqpnq98vktmS9SznSoUPPUJQbc91dHcxcunROvfQjdORVA/YFviH+Xci9Q==",
+      "version": "6.4.2",
+      "resolved": "https://registry.npmjs.org/karma/-/karma-6.4.2.tgz",
+      "integrity": "sha512-C6SU/53LB31BEgRg+omznBEMY4SjHU3ricV6zBcAe1EeILKkeScr+fZXtaI5WyDbkVowJxxAI6h73NcFPmXolQ==",
       "dev": true,
       "dependencies": {
         "@colors/colors": "1.5.0",
@@ -14037,7 +14605,7 @@
         "qjobs": "^1.2.0",
         "range-parser": "^1.2.1",
         "rimraf": "^3.0.2",
-        "socket.io": "^4.7.2",
+        "socket.io": "^4.4.1",
         "source-map": "^0.6.1",
         "tmp": "^0.2.1",
         "ua-parser-js": "^0.7.30",
@@ -14088,26 +14656,16 @@
         "node": ">=10.0.0"
       }
     },
-    "node_modules/karma-coverage/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/karma-coverage/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/karma-jasmine": {
@@ -14151,80 +14709,16 @@
         "source-map-support": "^0.5.5"
       }
     },
-    "node_modules/karma-time-stats-reporter": {
-      "version": "0.1.0",
-      "resolved": "https://registry.npmjs.org/karma-time-stats-reporter/-/karma-time-stats-reporter-0.1.0.tgz",
-      "integrity": "sha512-7oCfFIqFs8D3xcDBfP75taNlmiSe9KeWfi+VChy31EHG+JL7Hf9B58Opyb5uG0aeKdsXfLWptG3KTt0duwCzjQ==",
-      "dev": true,
-      "dependencies": {
-        "chalk": "^2.4.2",
-        "columnify": "^1.5.4"
-      }
-    },
-    "node_modules/karma/node_modules/ansi-styles": {
-      "version": "4.3.0",
-      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
-      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
-      "dev": true,
-      "dependencies": {
-        "color-convert": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=8"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
-      }
-    },
-    "node_modules/karma/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
-    "node_modules/karma/node_modules/cliui": {
-      "version": "7.0.4",
-      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
-      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
-      "dev": true,
-      "dependencies": {
-        "string-width": "^4.2.0",
-        "strip-ansi": "^6.0.0",
-        "wrap-ansi": "^7.0.0"
-      }
-    },
-    "node_modules/karma/node_modules/color-convert": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
-      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
-      "dev": true,
-      "dependencies": {
-        "color-name": "~1.1.4"
-      },
-      "engines": {
-        "node": ">=7.0.0"
-      }
-    },
-    "node_modules/karma/node_modules/color-name": {
-      "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
-      "dev": true
-    },
     "node_modules/karma/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/karma/node_modules/source-map": {
@@ -14236,23 +14730,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/karma/node_modules/wrap-ansi": {
-      "version": "7.0.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
-      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
-      "dev": true,
-      "dependencies": {
-        "ansi-styles": "^4.0.0",
-        "string-width": "^4.1.0",
-        "strip-ansi": "^6.0.0"
-      },
-      "engines": {
-        "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
-      }
-    },
     "node_modules/karma/node_modules/yargs": {
       "version": "16.2.0",
       "resolved": "https://registry.npmjs.org/yargs/-/yargs-16.2.0.tgz",
@@ -14619,6 +15096,12 @@
       "resolved": "https://registry.npmjs.org/lodash.flatten/-/lodash.flatten-4.4.0.tgz",
       "integrity": "sha512-C5N2Z3DgnnKr0LOpv/hKCgKdb7ZZwafIrsesve6lmzvZIRZRGaZ/l6Q8+2W7NaT+ZwO3fFlSCzCzrDCFdJfZ4g=="
     },
+    "node_modules/lodash.flattendeep": {
+      "version": "4.4.0",
+      "resolved": "https://registry.npmjs.org/lodash.flattendeep/-/lodash.flattendeep-4.4.0.tgz",
+      "integrity": "sha512-uHaJFihxmJcEX3kT4I23ABqKKalJ/zDrDg0lsFtc1h+3uw49SIJ5beyhx5ExVRti3AvKoOJngIj7xz3oylPdWQ==",
+      "dev": true
+    },
     "node_modules/lodash.includes": {
       "version": "4.3.0",
       "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
@@ -14657,11 +15140,6 @@
       "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
       "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw=="
     },
-    "node_modules/lodash.mapvalues": {
-      "version": "4.6.0",
-      "resolved": "https://registry.npmjs.org/lodash.mapvalues/-/lodash.mapvalues-4.6.0.tgz",
-      "integrity": "sha512-JPFqXFeZQ7BfS00H58kClY7SPVeHertPE0lNuCyZ26/XlN8TvakYD7b9bGyNmXbT/D3BbtPAAmq90gPWqLkxlQ=="
-    },
     "node_modules/lodash.merge": {
       "version": "4.6.2",
       "resolved": "https://registry.npmjs.org/lodash.merge/-/lodash.merge-4.6.2.tgz",
@@ -14817,10 +15295,11 @@
       }
     },
     "node_modules/magic-string": {
-      "version": "0.30.7",
-      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.7.tgz",
-      "integrity": "sha512-8vBuFF/I/+OSLRmdf2wwFCJCz+nSn0m6DPvGH1fS/KiQoSaR+sETbov0eIk9KhEKy8CYqIkIAnbohxT/4H0kuA==",
+      "version": "0.30.1",
+      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.30.1.tgz",
+      "integrity": "sha512-mbVKXPmS0z0G4XqFDCTllmDQ6coZzn94aMlb0o/A4HEHJCKcanlDZwYJgwnkmgD3jyWhUgj9VsPrfd972yPffA==",
       "dev": true,
+      "peer": true,
       "dependencies": {
         "@jridgewell/sourcemap-codec": "^1.4.15"
       },
@@ -14850,6 +15329,12 @@
         "semver": "bin/semver.js"
       }
     },
+    "node_modules/make-error": {
+      "version": "1.3.6",
+      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
+      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw==",
+      "dev": true
+    },
     "node_modules/make-fetch-happen": {
       "version": "13.0.0",
       "resolved": "https://registry.npmjs.org/make-fetch-happen/-/make-fetch-happen-13.0.0.tgz",
@@ -15041,18 +15526,6 @@
         "node": ">=8.6"
       }
     },
-    "node_modules/micromatch/node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "dev": true,
-      "engines": {
-        "node": ">=8.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
     "node_modules/mime": {
       "version": "2.6.0",
       "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
@@ -15092,13 +15565,12 @@
       }
     },
     "node_modules/mini-css-extract-plugin": {
-      "version": "2.8.0",
-      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.8.0.tgz",
-      "integrity": "sha512-CxmUYPFcTgET1zImteG/LZOy/4T5rTojesQXkSNBiquhydn78tfbCE9sjIjnJ/UcjNjOC1bphTCCW5rrS7cXAg==",
+      "version": "2.7.6",
+      "resolved": "https://registry.npmjs.org/mini-css-extract-plugin/-/mini-css-extract-plugin-2.7.6.tgz",
+      "integrity": "sha512-Qk7HcgaPkGG6eD77mLvZS1nmxlao3j+9PkrT9Uc7HAE1id3F41+DdBRYRYkbyfNRGzm8/YWtzhw7nVPmwhqTQw==",
       "dev": true,
       "dependencies": {
-        "schema-utils": "^4.0.0",
-        "tapable": "^2.2.1"
+        "schema-utils": "^4.0.0"
       },
       "engines": {
         "node": ">= 12.13.0"
@@ -15117,21 +15589,6 @@
       "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
       "dev": true
     },
-    "node_modules/minimatch": {
-      "version": "9.0.3",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.3.tgz",
-      "integrity": "sha512-RHiac9mvaRw0x3AYRgDC1CxAP7HTcNrrECeA8YYJeWnpo+2Q5CegtZjaotWTWxDG3UeGA1coE05iH1mPjT/2mg==",
-      "devOptional": true,
-      "dependencies": {
-        "brace-expansion": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=16 || 14 >=14.17"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/minimist": {
       "version": "1.2.8",
       "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
@@ -15402,18 +15859,14 @@
       }
     },
     "node_modules/mute-stream": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-1.0.0.tgz",
-      "integrity": "sha512-avsJQhyd+680gKXyG/sQc0nXaC6rBkPOfyHYcFb9+hdkqQkR9bdnkJ0AMZhke0oesPqIO+mFFJ+IdBc7mst4IA==",
-      "dev": true,
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
+      "version": "0.0.8",
+      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
+      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA=="
     },
     "node_modules/nan": {
-      "version": "2.19.0",
-      "resolved": "https://registry.npmjs.org/nan/-/nan-2.19.0.tgz",
-      "integrity": "sha512-nO1xXxfh/RWNxfd/XPfbIfFk5vgLsAxUR9y5O0cHMJu/AW9U95JLXqthYHjEp+8gQ5p96K9jUp8nbVOxCdRbtw==",
+      "version": "2.18.0",
+      "resolved": "https://registry.npmjs.org/nan/-/nan-2.18.0.tgz",
+      "integrity": "sha512-W7tfG7vMOGtD30sHoZSSc/JVYiyDPEyQVso/Zz+/uQd0B0L46gtC+pHha5FFMRpil6fm/AoEcRWyOVi4+E/f8w==",
       "optional": true
     },
     "node_modules/nanoid": {
@@ -15627,6 +16080,18 @@
         "node": ">=16"
       }
     },
+    "node_modules/node-gyp/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "devOptional": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/node-gyp/node_modules/which": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/which/-/which-4.0.0.tgz",
@@ -15648,6 +16113,18 @@
       "integrity": "sha512-QNABxbrPa3qEIfrE6GOJ7BYIuignnJw7iQ2YPbc3Nla1HzRJjXzZOiikfF8m7eAMfichLt3M4VgLOetqgDmgGQ==",
       "dev": true
     },
+    "node_modules/node-preload": {
+      "version": "0.2.1",
+      "resolved": "https://registry.npmjs.org/node-preload/-/node-preload-0.2.1.tgz",
+      "integrity": "sha512-RM5oyBy45cLEoHqCeh+MNuFAxO0vTFBLskvQbOKnEE7YTTSN4tbN8QWDIPQ6L+WvKsB/qLEGpYe2ZZ9d4W9OIQ==",
+      "dev": true,
+      "dependencies": {
+        "process-on-spawn": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/node-releases": {
       "version": "2.0.14",
       "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.14.tgz",
@@ -15910,16 +16387,6 @@
       "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
       "dev": true
     },
-    "node_modules/nx/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/nx/node_modules/chalk": {
       "version": "4.1.2",
       "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
@@ -15936,6 +16403,20 @@
         "url": "https://github.com/chalk/chalk?sponsor=1"
       }
     },
+    "node_modules/nx/node_modules/cliui": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
+      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "dev": true,
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
     "node_modules/nx/node_modules/color-convert": {
       "version": "2.0.1",
       "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
@@ -15954,21 +16435,18 @@
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
       "dev": true
     },
-    "node_modules/nx/node_modules/glob": {
-      "version": "7.1.4",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.4.tgz",
-      "integrity": "sha512-hkLPepehmnKk41pUGm3sYxoFs/umurYfYJCerbXEyFIWcAzvpipAgVkBqqT9RBKMGjnq6kMuyYwha6csxbiM1A==",
+    "node_modules/nx/node_modules/fs-extra": {
+      "version": "11.2.0",
+      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-11.2.0.tgz",
+      "integrity": "sha512-PmDi3uwK5nFuXh7XDTlVnS17xJS7vW36is2+w3xcv8SVxiB4NyATf4ctkVY5bkSjX0Y4nbvZCq1/EjtEyr9ktw==",
       "dev": true,
       "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^3.0.4",
-        "once": "^1.3.0",
-        "path-is-absolute": "^1.0.0"
+        "graceful-fs": "^4.2.0",
+        "jsonfile": "^6.0.1",
+        "universalify": "^2.0.0"
       },
       "engines": {
-        "node": "*"
+        "node": ">=14.14"
       }
     },
     "node_modules/nx/node_modules/has-flag": {
@@ -15992,11 +16470,17 @@
         "js-yaml": "bin/js-yaml.js"
       }
     },
-    "node_modules/nx/node_modules/jsonc-parser": {
-      "version": "3.2.0",
-      "resolved": "https://registry.npmjs.org/jsonc-parser/-/jsonc-parser-3.2.0.tgz",
-      "integrity": "sha512-gfFQZrcTc8CnKXp6Y4/CBT3fTc0OVuDofpre4aEeEpSBPV5X5v4+Vmx+8snU7RLPrNHPKSgLxGo9YuQzz20o+w==",
-      "dev": true
+    "node_modules/nx/node_modules/jsonfile": {
+      "version": "6.1.0",
+      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
+      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
+      "dev": true,
+      "dependencies": {
+        "universalify": "^2.0.0"
+      },
+      "optionalDependencies": {
+        "graceful-fs": "^4.1.6"
+      }
     },
     "node_modules/nx/node_modules/lru-cache": {
       "version": "6.0.0",
@@ -16011,15 +16495,15 @@
       }
     },
     "node_modules/nx/node_modules/minimatch": {
-      "version": "3.0.5",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.5.tgz",
-      "integrity": "sha512-tUpxzX0VAzJHjLu0xUfFv1gwVp9ba3IOuRAVH2EGuRW8a5emA2FlACLqiT/lDVtS1W+TGNwqz3sWaNyLgDJWuw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/nx/node_modules/semver": {
@@ -16063,12 +16547,239 @@
         "node": ">=6"
       }
     },
+    "node_modules/nx/node_modules/universalify": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
+      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
+      "dev": true,
+      "engines": {
+        "node": ">= 10.0.0"
+      }
+    },
     "node_modules/nx/node_modules/yallist": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
       "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
       "dev": true
     },
+    "node_modules/nyc": {
+      "version": "15.1.0",
+      "resolved": "https://registry.npmjs.org/nyc/-/nyc-15.1.0.tgz",
+      "integrity": "sha512-jMW04n9SxKdKi1ZMGhvUTHBN0EICCRkHemEoE5jm6mTYcqcdas0ATzgUgejlQUHMvpnOZqGB5Xxsv9KxJW1j8A==",
+      "dev": true,
+      "dependencies": {
+        "@istanbuljs/load-nyc-config": "^1.0.0",
+        "@istanbuljs/schema": "^0.1.2",
+        "caching-transform": "^4.0.0",
+        "convert-source-map": "^1.7.0",
+        "decamelize": "^1.2.0",
+        "find-cache-dir": "^3.2.0",
+        "find-up": "^4.1.0",
+        "foreground-child": "^2.0.0",
+        "get-package-type": "^0.1.0",
+        "glob": "^7.1.6",
+        "istanbul-lib-coverage": "^3.0.0",
+        "istanbul-lib-hook": "^3.0.0",
+        "istanbul-lib-instrument": "^4.0.0",
+        "istanbul-lib-processinfo": "^2.0.2",
+        "istanbul-lib-report": "^3.0.0",
+        "istanbul-lib-source-maps": "^4.0.0",
+        "istanbul-reports": "^3.0.2",
+        "make-dir": "^3.0.0",
+        "node-preload": "^0.2.1",
+        "p-map": "^3.0.0",
+        "process-on-spawn": "^1.0.0",
+        "resolve-from": "^5.0.0",
+        "rimraf": "^3.0.0",
+        "signal-exit": "^3.0.2",
+        "spawn-wrap": "^2.0.0",
+        "test-exclude": "^6.0.0",
+        "yargs": "^15.0.2"
+      },
+      "bin": {
+        "nyc": "bin/nyc.js"
+      },
+      "engines": {
+        "node": ">=8.9"
+      }
+    },
+    "node_modules/nyc/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/nyc/node_modules/cliui": {
+      "version": "6.0.0",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-6.0.0.tgz",
+      "integrity": "sha512-t6wbgtoCXvAzst7QgXxJYqPt0usEfbgQdftEPbLL/cvv6HPE5VgvqCuAIDR0NgU52ds6rFwqrgakNLrHEjCbrQ==",
+      "dev": true,
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.0",
+        "wrap-ansi": "^6.2.0"
+      }
+    },
+    "node_modules/nyc/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/nyc/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/nyc/node_modules/find-cache-dir": {
+      "version": "3.3.2",
+      "resolved": "https://registry.npmjs.org/find-cache-dir/-/find-cache-dir-3.3.2.tgz",
+      "integrity": "sha512-wXZV5emFEjrridIgED11OoUKLxiYjAcqot/NJdAkOhlJ+vGzwhOAfcG5OX1jP+S0PcjEn8bdMJv+g2jwQ3Onig==",
+      "dev": true,
+      "dependencies": {
+        "commondir": "^1.0.1",
+        "make-dir": "^3.0.2",
+        "pkg-dir": "^4.1.0"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/avajs/find-cache-dir?sponsor=1"
+      }
+    },
+    "node_modules/nyc/node_modules/foreground-child": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-2.0.0.tgz",
+      "integrity": "sha512-dCIq9FpEcyQyXKCkyzmlPTFNgrCzPudOe+mhvJU5zAtlBnGVy2yKxtfsxK2tQBThwq225jcvBjpw1Gr40uzZCA==",
+      "dev": true,
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
+    "node_modules/nyc/node_modules/istanbul-lib-instrument": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-4.0.3.tgz",
+      "integrity": "sha512-BXgQl9kf4WTCPCCpmFGoJkz/+uhvm7h7PFKUYxh7qarQd3ER33vHG//qaE8eN25l07YqZPpHXU9I09l/RD5aGQ==",
+      "dev": true,
+      "dependencies": {
+        "@babel/core": "^7.7.5",
+        "@istanbuljs/schema": "^0.1.2",
+        "istanbul-lib-coverage": "^3.0.0",
+        "semver": "^6.3.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nyc/node_modules/p-map": {
+      "version": "3.0.0",
+      "resolved": "https://registry.npmjs.org/p-map/-/p-map-3.0.0.tgz",
+      "integrity": "sha512-d3qXVTF/s+W+CdJ5A29wywV2n8CQQYahlgz2bFiA+4eVNJbHJodPZ+/gXwPGh0bOqA+j8S+6+ckmvLGPk1QpxQ==",
+      "dev": true,
+      "dependencies": {
+        "aggregate-error": "^3.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nyc/node_modules/pkg-dir": {
+      "version": "4.2.0",
+      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
+      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
+      "dev": true,
+      "dependencies": {
+        "find-up": "^4.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nyc/node_modules/semver": {
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
+      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
+      "dev": true,
+      "bin": {
+        "semver": "bin/semver.js"
+      }
+    },
+    "node_modules/nyc/node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nyc/node_modules/y18n": {
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
+      "integrity": "sha512-JKhqTOwSrqNA1NY5lSztJ1GrBiUodLMmIZuLiDaMRJ+itFd+ABVE8XBjOvIWL+rSqNDC74LCSFmlb/U4UZ4hJQ==",
+      "dev": true
+    },
+    "node_modules/nyc/node_modules/yargs": {
+      "version": "15.4.1",
+      "resolved": "https://registry.npmjs.org/yargs/-/yargs-15.4.1.tgz",
+      "integrity": "sha512-aePbxDmcYW++PaqBsJ+HYUFwCdv4LVvdnhBy78E57PIor8/OVvhMrADFFEDh8DHDFRv/O9i3lPhsENjO7QX0+A==",
+      "dev": true,
+      "dependencies": {
+        "cliui": "^6.0.0",
+        "decamelize": "^1.2.0",
+        "find-up": "^4.1.0",
+        "get-caller-file": "^2.0.1",
+        "require-directory": "^2.1.1",
+        "require-main-filename": "^2.0.0",
+        "set-blocking": "^2.0.0",
+        "string-width": "^4.2.0",
+        "which-module": "^2.0.0",
+        "y18n": "^4.0.0",
+        "yargs-parser": "^18.1.2"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/nyc/node_modules/yargs-parser": {
+      "version": "18.1.3",
+      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-18.1.3.tgz",
+      "integrity": "sha512-o50j0JeToy/4K6OZcaQmW6lyXXKhq7csREXcDwk2omFPJEwUNOVtJKvmDr9EI1fAJZUyZcRF7kxGBWmRXudrCQ==",
+      "dev": true,
+      "dependencies": {
+        "camelcase": "^5.0.0",
+        "decamelize": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/oauth-sign": {
       "version": "0.9.0",
       "resolved": "https://registry.npmjs.org/oauth-sign/-/oauth-sign-0.9.0.tgz",
@@ -16147,16 +16858,15 @@
       }
     },
     "node_modules/object.groupby": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.2.tgz",
-      "integrity": "sha512-bzBq58S+x+uo0VjurFT0UktpKHOZmv4/xePiOA1nbB9pMqpGK7rUPNgf+1YC+7mE+0HzhTMqNUuCqvKhj6FnBw==",
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/object.groupby/-/object.groupby-1.0.1.tgz",
+      "integrity": "sha512-HqaQtqLnp/8Bn4GL16cj+CUYbnpe1bh0TtEaWvybszDG4tgxCJuRpV8VGuvNaI1fAnI4lUJzDG55MXcOH4JZcQ==",
       "dev": true,
       "dependencies": {
-        "array.prototype.filter": "^1.0.3",
-        "call-bind": "^1.0.5",
-        "define-properties": "^1.2.1",
-        "es-abstract": "^1.22.3",
-        "es-errors": "^1.0.0"
+        "call-bind": "^1.0.2",
+        "define-properties": "^1.2.0",
+        "es-abstract": "^1.22.1",
+        "get-intrinsic": "^1.2.1"
       }
     },
     "node_modules/object.values": {
@@ -16235,7 +16945,6 @@
       "version": "8.4.2",
       "resolved": "https://registry.npmjs.org/open/-/open-8.4.2.tgz",
       "integrity": "sha512-7x81NCL719oNbsq/3mh+hVrAWmFuEYUqrq/Iw3kUzH8ReypT9QQ0BLoJS7/G9k6N81XjW4qHWtjWwe/9eLy1EQ==",
-      "dev": true,
       "dependencies": {
         "define-lazy-prop": "^2.0.0",
         "is-docker": "^2.1.1",
@@ -16472,21 +17181,37 @@
       }
     },
     "node_modules/pac-resolver": {
-      "version": "7.0.1",
-      "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz",
-      "integrity": "sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.0.tgz",
+      "integrity": "sha512-Fd9lT9vJbHYRACT8OhCbZBbxr6KRSawSovFpy8nDGshaK99S/EBhVIHp9+crhxrsZOuvLpgL1n23iyPg6Rl2hg==",
       "dependencies": {
         "degenerator": "^5.0.0",
+        "ip": "^1.1.8",
         "netmask": "^2.0.2"
       },
       "engines": {
         "node": ">= 14"
       }
     },
+    "node_modules/package-hash": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/package-hash/-/package-hash-4.0.0.tgz",
+      "integrity": "sha512-whdkPIooSu/bASggZ96BWVvZTRMOFxnyUG5PnTSGKoJE2gd5mbVNmR2Nj20QFzxYYgAXpoqC+AiXzl+UMRh7zQ==",
+      "dev": true,
+      "dependencies": {
+        "graceful-fs": "^4.1.15",
+        "hasha": "^5.0.0",
+        "lodash.flattendeep": "^4.4.0",
+        "release-zalgo": "^1.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/pacote": {
-      "version": "17.0.6",
-      "resolved": "https://registry.npmjs.org/pacote/-/pacote-17.0.6.tgz",
-      "integrity": "sha512-cJKrW21VRE8vVTRskJo78c/RCvwJCn1f4qgfxL4w77SOWrTCRcmfkYHlHtS0gqpgjv3zhXflRtgsrUCX5xwNnQ==",
+      "version": "17.0.5",
+      "resolved": "https://registry.npmjs.org/pacote/-/pacote-17.0.5.tgz",
+      "integrity": "sha512-TAE0m20zSDMnchPja9vtQjri19X3pZIyRpm2TJVeI+yU42leJBBDTRYhOcWFsPhaMxf+3iwQkFiKz16G9AEeeA==",
       "dev": true,
       "dependencies": {
         "@npmcli/git": "^5.0.0",
@@ -16504,7 +17229,7 @@
         "promise-retry": "^2.0.1",
         "read-package-json": "^7.0.0",
         "read-package-json-fast": "^3.0.0",
-        "sigstore": "^2.2.0",
+        "sigstore": "^2.0.0",
         "ssri": "^10.0.0",
         "tar": "^6.1.11"
       },
@@ -16551,12 +17276,6 @@
         "url": "https://github.com/sponsors/sindresorhus"
       }
     },
-    "node_modules/parse-json/node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
-    },
     "node_modules/parse-json/node_modules/lines-and-columns": {
       "version": "1.2.4",
       "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
@@ -16572,18 +17291,6 @@
         "node": ">= 0.10"
       }
     },
-    "node_modules/parse5": {
-      "version": "7.1.2",
-      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
-      "integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
-      "dev": true,
-      "dependencies": {
-        "entities": "^4.4.0"
-      },
-      "funding": {
-        "url": "https://github.com/inikulin/parse5?sponsor=1"
-      }
-    },
     "node_modules/parse5-html-rewriting-stream": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/parse5-html-rewriting-stream/-/parse5-html-rewriting-stream-7.0.0.tgz",
@@ -16598,6 +17305,18 @@
         "url": "https://github.com/inikulin/parse5?sponsor=1"
       }
     },
+    "node_modules/parse5-html-rewriting-stream/node_modules/parse5": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
+      "integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
+      "dev": true,
+      "dependencies": {
+        "entities": "^4.4.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
     "node_modules/parse5-sax-parser": {
       "version": "7.0.0",
       "resolved": "https://registry.npmjs.org/parse5-sax-parser/-/parse5-sax-parser-7.0.0.tgz",
@@ -16610,6 +17329,18 @@
         "url": "https://github.com/inikulin/parse5?sponsor=1"
       }
     },
+    "node_modules/parse5-sax-parser/node_modules/parse5": {
+      "version": "7.1.2",
+      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.1.2.tgz",
+      "integrity": "sha512-Czj1WaSVpaoj0wbhMzLmWD69anp2WH7FXMB9n1Sy8/ZFF9jolSQVMu1Ij5WIyGmcBmhk7EOndpO4mIpihVqAXw==",
+      "dev": true,
+      "dependencies": {
+        "entities": "^4.4.0"
+      },
+      "funding": {
+        "url": "https://github.com/inikulin/parse5?sponsor=1"
+      }
+    },
     "node_modules/parseurl": {
       "version": "1.3.3",
       "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
@@ -16627,14 +17358,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/path-is-absolute": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
-      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
-      "engines": {
-        "node": ">=0.10.0"
-      }
-    },
     "node_modules/path-is-inside": {
       "version": "1.0.2",
       "resolved": "https://registry.npmjs.org/path-is-inside/-/path-is-inside-1.0.2.tgz",
@@ -16672,9 +17395,9 @@
       }
     },
     "node_modules/path-scurry/node_modules/lru-cache": {
-      "version": "10.2.0",
-      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.2.0.tgz",
-      "integrity": "sha512-2bIM8x+VAf6JT4bKAljS1qUWgMsqZRPGJS6FSahIMPVvctcNhyVp7AJu7quxOW9jwkryBReKZY5tY5JYv2n/7Q==",
+      "version": "10.1.0",
+      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.1.0.tgz",
+      "integrity": "sha512-/1clY/ui8CzjKFyjdvwPWJUYKiFVXG2I2cY0ssG7h4+hwk+XOIX7ZSG9Q7TW8TW3Kp3BUSqgFWBLgL4PJ+Blag==",
       "devOptional": true,
       "engines": {
         "node": "14 || >=16.14"
@@ -16703,15 +17426,15 @@
     "node_modules/picocolors": {
       "version": "1.0.0",
       "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
-      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
+      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
+      "dev": true
     },
     "node_modules/picomatch": {
-      "version": "4.0.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-4.0.1.tgz",
-      "integrity": "sha512-xUXwsxNjwTQ8K3GnT4pCJm+xq3RUPQbmkYJTP5aFIfNIvbcc/4MUxgBaaRSZJ6yGJZiGSyYlM6MzwTsRk8SYCg==",
-      "dev": true,
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
+      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
       "engines": {
-        "node": ">=12"
+        "node": ">=8.6"
       },
       "funding": {
         "url": "https://github.com/sponsors/jonschlinkert"
@@ -16748,10 +17471,14 @@
       }
     },
     "node_modules/piscina": {
-      "version": "4.3.1",
-      "resolved": "https://registry.npmjs.org/piscina/-/piscina-4.3.1.tgz",
-      "integrity": "sha512-MBj0QYm3hJQ/C/wIXTN1OCYC8uQ4BBJ4LVele2P4ZwVQAH04vkk8E1SpDbuemLAL1dZorbuOob9rYqJeWCcCRg==",
+      "version": "4.2.1",
+      "resolved": "https://registry.npmjs.org/piscina/-/piscina-4.2.1.tgz",
+      "integrity": "sha512-LShp0+lrO+WIzB9LXO+ZmO4zGHxtTJNZhEO56H9SSu+JPaUQb6oLcTCzWi5IL2DS8/vIkCE88ElahuSSw4TAkA==",
       "dev": true,
+      "dependencies": {
+        "hdr-histogram-js": "^2.0.1",
+        "hdr-histogram-percentiles-obj": "^3.0.0"
+      },
       "optionalDependencies": {
         "nice-napi": "^1.0.2"
       }
@@ -16882,19 +17609,10 @@
         "ms": "^2.1.1"
       }
     },
-    "node_modules/possible-typed-array-names": {
-      "version": "1.0.0",
-      "resolved": "https://registry.npmjs.org/possible-typed-array-names/-/possible-typed-array-names-1.0.0.tgz",
-      "integrity": "sha512-d7Uw+eZoloe0EHDIYoe+bQ5WXnGMOpmiZFTuMWCwpjzzkL2nTjcKiAk4hh8TjnGye2TwWOk3UXucZ+3rbmBa8Q==",
-      "dev": true,
-      "engines": {
-        "node": ">= 0.4"
-      }
-    },
     "node_modules/postcss": {
-      "version": "8.4.35",
-      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.35.tgz",
-      "integrity": "sha512-u5U8qYpBCpN13BsiEB0CbR1Hhh4Gc0zLFuedrHJKMctHCHAGrMdG0PRM/KErzAL3CU6/eckEtmHNB3x6e3c0vA==",
+      "version": "8.4.33",
+      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.33.tgz",
+      "integrity": "sha512-Kkpbhhdjw2qQs2O2DGX+8m5OVqEcbB9HRBvuYM9pgrjEFUg30A9LmXNlTAUj4S9kgtGyrMbTzVjH7E+s5Re2yg==",
       "dev": true,
       "funding": [
         {
@@ -16920,34 +17638,25 @@
       }
     },
     "node_modules/postcss-loader": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-8.1.0.tgz",
-      "integrity": "sha512-AbperNcX3rlob7Ay7A/HQcrofug1caABBkopoFeOQMspZBqcqj6giYn1Bwey/0uiOPAcR+NQD0I2HC7rXzk91w==",
+      "version": "7.3.4",
+      "resolved": "https://registry.npmjs.org/postcss-loader/-/postcss-loader-7.3.4.tgz",
+      "integrity": "sha512-iW5WTTBSC5BfsBJ9daFMPVrLT36MrNiC6fqOZTTaHjBNX6Pfd5p+hSBqe/fEeNd7pc13QiAyGt7VdGMw4eRC4A==",
       "dev": true,
       "dependencies": {
-        "cosmiconfig": "^9.0.0",
+        "cosmiconfig": "^8.3.5",
         "jiti": "^1.20.0",
         "semver": "^7.5.4"
       },
       "engines": {
-        "node": ">= 18.12.0"
+        "node": ">= 14.15.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/webpack"
       },
       "peerDependencies": {
-        "@rspack/core": "0.x || 1.x",
         "postcss": "^7.0.0 || ^8.0.1",
         "webpack": "^5.0.0"
-      },
-      "peerDependenciesMeta": {
-        "@rspack/core": {
-          "optional": true
-        },
-        "webpack": {
-          "optional": true
-        }
       }
     },
     "node_modules/postcss-modules-extract-imports": {
@@ -16963,9 +17672,9 @@
       }
     },
     "node_modules/postcss-modules-local-by-default": {
-      "version": "4.0.4",
-      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.0.4.tgz",
-      "integrity": "sha512-L4QzMnOdVwRm1Qb8m4x8jsZzKAaPAgrUF1r/hjDR2Xj7R+8Zsf97jAlSQzWtKx5YNiNGN8QxmPFIc/sh+RQl+Q==",
+      "version": "4.0.3",
+      "resolved": "https://registry.npmjs.org/postcss-modules-local-by-default/-/postcss-modules-local-by-default-4.0.3.tgz",
+      "integrity": "sha512-2/u2zraspoACtrbFRnTijMiQtb4GW4BvatjaG/bCjYQo8kLTdevCUlwuBHx2sCnSyrI3x3qj4ZK1j5LQBgzmwA==",
       "dev": true,
       "dependencies": {
         "icss-utils": "^5.0.0",
@@ -16980,9 +17689,9 @@
       }
     },
     "node_modules/postcss-modules-scope": {
-      "version": "3.1.1",
-      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.1.1.tgz",
-      "integrity": "sha512-uZgqzdTleelWjzJY+Fhti6F3C9iF1JR/dODLs/JDefozYcKTBCdD8BIl6nNPbTbcLnGrk56hzwZC2DaGNvYjzA==",
+      "version": "3.1.0",
+      "resolved": "https://registry.npmjs.org/postcss-modules-scope/-/postcss-modules-scope-3.1.0.tgz",
+      "integrity": "sha512-SaIbK8XW+MZbd0xHPf7kdfA/3eOt7vxJ72IRecn3EzuZVLr1r0orzf0MX/pN8m+NMDoo6X/SQd8oeKqGZd8PXg==",
       "dev": true,
       "dependencies": {
         "postcss-selector-parser": "^6.0.4"
@@ -17089,6 +17798,18 @@
       "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
       "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
     },
+    "node_modules/process-on-spawn": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/process-on-spawn/-/process-on-spawn-1.0.0.tgz",
+      "integrity": "sha512-1WsPDsUSMmZH5LeMLegqkPDrsGgsWwk1Exipy2hvB0o/F0ASzbpIctSCcZIK1ykJvtTJULEH+20WOFjMvGnCTg==",
+      "dev": true,
+      "dependencies": {
+        "fromentries": "^1.2.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/progress": {
       "version": "2.0.3",
       "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
@@ -17241,24 +17962,6 @@
       "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
       "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
     },
-    "node_modules/protobufjs-cli/node_modules/glob": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
-      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
-      "dependencies": {
-        "fs.realpath": "^1.0.0",
-        "inflight": "^1.0.4",
-        "inherits": "2",
-        "minimatch": "^5.0.1",
-        "once": "^1.3.0"
-      },
-      "engines": {
-        "node": ">=12"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
-      }
-    },
     "node_modules/protobufjs-cli/node_modules/has-flag": {
       "version": "4.0.0",
       "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
@@ -17267,17 +17970,6 @@
         "node": ">=8"
       }
     },
-    "node_modules/protobufjs-cli/node_modules/minimatch": {
-      "version": "5.1.6",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
-      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
-      "dependencies": {
-        "brace-expansion": "^2.0.1"
-      },
-      "engines": {
-        "node": ">=10"
-      }
-    },
     "node_modules/protobufjs-cli/node_modules/supports-color": {
       "version": "7.2.0",
       "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
@@ -17386,6 +18078,44 @@
         "node": ">=8"
       }
     },
+    "node_modules/protractor/node_modules/color-convert": {
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
+      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
+      "dev": true,
+      "dependencies": {
+        "color-name": "~1.1.4"
+      },
+      "engines": {
+        "node": ">=7.0.0"
+      }
+    },
+    "node_modules/protractor/node_modules/color-name": {
+      "version": "1.1.4",
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
+      "dev": true
+    },
+    "node_modules/protractor/node_modules/jasmine": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/jasmine/-/jasmine-2.8.0.tgz",
+      "integrity": "sha512-KbdGQTf5jbZgltoHs31XGiChAPumMSY64OZMWLNYnEnMfG5uwGBhffePwuskexjT+/Jea/gU3qAU8344hNohSw==",
+      "dev": true,
+      "dependencies": {
+        "exit": "^0.1.2",
+        "glob": "^7.0.6",
+        "jasmine-core": "~2.8.0"
+      },
+      "bin": {
+        "jasmine": "bin/jasmine.js"
+      }
+    },
+    "node_modules/protractor/node_modules/jasmine-core": {
+      "version": "2.8.0",
+      "resolved": "https://registry.npmjs.org/jasmine-core/-/jasmine-core-2.8.0.tgz",
+      "integrity": "sha512-SNkOkS+/jMZvLhuSx1fjhcNWUC/KG6oVyFUGkSBEr9n1axSNduWU8GlI7suaHXr4yxjet6KjrUZxUTE5WzzWwQ==",
+      "dev": true
+    },
     "node_modules/protractor/node_modules/source-map": {
       "version": "0.5.7",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.5.7.tgz",
@@ -17425,6 +18155,56 @@
         "node": ">=0.8.0"
       }
     },
+    "node_modules/protractor/node_modules/wrap-ansi": {
+      "version": "6.2.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
+      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "dev": true,
+      "dependencies": {
+        "ansi-styles": "^4.0.0",
+        "string-width": "^4.1.0",
+        "strip-ansi": "^6.0.0"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/protractor/node_modules/wrap-ansi/node_modules/ansi-regex": {
+      "version": "5.0.1",
+      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
+      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
+      "dev": true,
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/protractor/node_modules/wrap-ansi/node_modules/ansi-styles": {
+      "version": "4.3.0",
+      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
+      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
+      "dev": true,
+      "dependencies": {
+        "color-convert": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
+      }
+    },
+    "node_modules/protractor/node_modules/wrap-ansi/node_modules/strip-ansi": {
+      "version": "6.0.1",
+      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
+      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
+      "dev": true,
+      "dependencies": {
+        "ansi-regex": "^5.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
     "node_modules/protractor/node_modules/y18n": {
       "version": "4.0.3",
       "resolved": "https://registry.npmjs.org/y18n/-/y18n-4.0.3.tgz",
@@ -17479,14 +18259,14 @@
       }
     },
     "node_modules/proxy-agent": {
-      "version": "6.4.0",
-      "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.4.0.tgz",
-      "integrity": "sha512-u0piLU+nCOHMgGjRbimiXmA9kM/L9EHh3zL81xCdp7m+Y2pHIsnmbdDoEDoAz5geaonNR6q6+yOPQs6n4T6sBQ==",
+      "version": "6.3.1",
+      "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.3.1.tgz",
+      "integrity": "sha512-Rb5RVBy1iyqOtNl15Cw/llpeLH8bsb37gM1FUfKQ+Wck6xHlbAhWGUFiTRHtkjqGTA5pSHz6+0hrPW/oECihPQ==",
       "dependencies": {
         "agent-base": "^7.0.2",
         "debug": "^4.3.4",
-        "http-proxy-agent": "^7.0.1",
-        "https-proxy-agent": "^7.0.3",
+        "http-proxy-agent": "^7.0.0",
+        "https-proxy-agent": "^7.0.2",
         "lru-cache": "^7.14.1",
         "pac-proxy-agent": "^7.0.1",
         "proxy-from-env": "^1.1.0",
@@ -17496,18 +18276,6 @@
         "node": ">= 14"
       }
     },
-    "node_modules/proxy-agent/node_modules/https-proxy-agent": {
-      "version": "7.0.4",
-      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.4.tgz",
-      "integrity": "sha512-wlwpilI7YdjSkWaQ/7omYBMTliDcmCN8OLihO6I9B86g06lMyAoqgoDpV0XqoaPOKj+0DIdAvnsWfyAAhmimcg==",
-      "dependencies": {
-        "agent-base": "^7.0.2",
-        "debug": "4"
-      },
-      "engines": {
-        "node": ">= 14"
-      }
-    },
     "node_modules/proxy-agent/node_modules/lru-cache": {
       "version": "7.18.3",
       "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
@@ -17671,9 +18439,9 @@
       }
     },
     "node_modules/re2": {
-      "version": "1.20.10",
-      "resolved": "https://registry.npmjs.org/re2/-/re2-1.20.10.tgz",
-      "integrity": "sha512-/5JjSPXobSDaKFL6rD5Gb4qD4CVBITQb7NAxfQ/NA7o0HER3SJAPV3lPO2kvzw0/PN1pVJNVATEUk4y9j7oIIA==",
+      "version": "1.20.9",
+      "resolved": "https://registry.npmjs.org/re2/-/re2-1.20.9.tgz",
+      "integrity": "sha512-ZYcPTFr5ha2xq3WQjBDTF9CWPSDK1z28MLh5UFRxc//7X8BNQ3A7yR7ITnP0jO346661ertdKVFqw1qoL3FMEQ==",
       "hasInstallScript": true,
       "optional": true,
       "dependencies": {
@@ -17716,6 +18484,15 @@
         "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
+    "node_modules/read-package-json-fast/node_modules/json-parse-even-better-errors": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-3.0.1.tgz",
+      "integrity": "sha512-aatBvbL26wVUCLmbWdCpeu9iF5wOyWpagiKkInA+kfws3sWdBrTnsvN2CKcyCYyUrc7rebNBlK6+kteg7ksecg==",
+      "dev": true,
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
     "node_modules/read-package-json/node_modules/glob": {
       "version": "10.3.10",
       "resolved": "https://registry.npmjs.org/glob/-/glob-10.3.10.tgz",
@@ -17738,6 +18515,27 @@
         "url": "https://github.com/sponsors/isaacs"
       }
     },
+    "node_modules/read-package-json/node_modules/json-parse-even-better-errors": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-3.0.1.tgz",
+      "integrity": "sha512-aatBvbL26wVUCLmbWdCpeu9iF5wOyWpagiKkInA+kfws3sWdBrTnsvN2CKcyCYyUrc7rebNBlK6+kteg7ksecg==",
+      "dev": true,
+      "engines": {
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
+      }
+    },
+    "node_modules/read-package-json/node_modules/minimatch": {
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
+      "dev": true,
+      "dependencies": {
+        "brace-expansion": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=10"
+      }
+    },
     "node_modules/readable-stream": {
       "version": "3.6.2",
       "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
@@ -17760,9 +18558,9 @@
       }
     },
     "node_modules/readdir-glob/node_modules/minimatch": {
-      "version": "5.1.6",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
-      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dependencies": {
         "brace-expansion": "^2.0.1"
       },
@@ -17781,17 +18579,6 @@
         "node": ">=8.10.0"
       }
     },
-    "node_modules/readdirp/node_modules/picomatch": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
-      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
-      "engines": {
-        "node": ">=8.6"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/jonschlinkert"
-      }
-    },
     "node_modules/redeyed": {
       "version": "2.1.1",
       "resolved": "https://registry.npmjs.org/redeyed/-/redeyed-2.1.1.tgz",
@@ -17801,9 +18588,9 @@
       }
     },
     "node_modules/reflect-metadata": {
-      "version": "0.2.1",
-      "resolved": "https://registry.npmjs.org/reflect-metadata/-/reflect-metadata-0.2.1.tgz",
-      "integrity": "sha512-i5lLI6iw9AU3Uu4szRNPPEkomnkjRTaVt9hy/bn5g/oSzekBSMeLZblcjP74AW0vBabqERLLIrz+gR8QYR54Tw==",
+      "version": "0.1.14",
+      "resolved": "https://registry.npmjs.org/reflect-metadata/-/reflect-metadata-0.1.14.tgz",
+      "integrity": "sha512-ZhYeb6nRaXCfhnndflDK8qI6ZQ/YcWZCISRAWICW9XYqMUwjZM9Z0DveWX/ABN01oxSHwVxKQmxeYZSsm0jh5A==",
       "dev": true
     },
     "node_modules/regenerate": {
@@ -17846,15 +18633,14 @@
       "dev": true
     },
     "node_modules/regexp.prototype.flags": {
-      "version": "1.5.2",
-      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.2.tgz",
-      "integrity": "sha512-NcDiDkTLuPR+++OCKB0nWafEmhg/Da8aUPLPMQbK+bxKKCm1/S5he+AqYa4PlMCVBalb4/yxIRub6qkEx5yJbw==",
+      "version": "1.5.1",
+      "resolved": "https://registry.npmjs.org/regexp.prototype.flags/-/regexp.prototype.flags-1.5.1.tgz",
+      "integrity": "sha512-sy6TXMN+hnP/wMy+ISxg3krXx7BAtWVO4UouuCN/ziM9UEne0euamVNafDfvC83bRNr95y0V5iijeDQFUNpvrg==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.6",
-        "define-properties": "^1.2.1",
-        "es-errors": "^1.3.0",
-        "set-function-name": "^2.0.1"
+        "call-bind": "^1.0.2",
+        "define-properties": "^1.2.0",
+        "set-function-name": "^2.0.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -17935,6 +18721,18 @@
         "jsesc": "bin/jsesc"
       }
     },
+    "node_modules/release-zalgo": {
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/release-zalgo/-/release-zalgo-1.0.0.tgz",
+      "integrity": "sha512-gUAyHVHPPC5wdqX/LG4LWtRYtgjxyX78oanFNTMMyFEfOqdC54s3eE82imuWKbOeqYht2CrNf64Qb8vgmmtZGA==",
+      "dev": true,
+      "dependencies": {
+        "es6-error": "^4.0.1"
+      },
+      "engines": {
+        "node": ">=4"
+      }
+    },
     "node_modules/request": {
       "version": "2.88.2",
       "resolved": "https://registry.npmjs.org/request/-/request-2.88.2.tgz",
@@ -17981,6 +18779,15 @@
         "node": ">= 0.12"
       }
     },
+    "node_modules/request/node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/request/node_modules/qs": {
       "version": "6.5.3",
       "resolved": "https://registry.npmjs.org/qs/-/qs-6.5.3.tgz",
@@ -17990,9 +18797,22 @@
         "node": ">=0.6"
       }
     },
-    "node_modules/request/node_modules/uuid": {
-      "version": "3.4.0",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
+    "node_modules/request/node_modules/tough-cookie": {
+      "version": "2.5.0",
+      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
+      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
+      "dev": true,
+      "dependencies": {
+        "psl": "^1.1.28",
+        "punycode": "^2.1.1"
+      },
+      "engines": {
+        "node": ">=0.8"
+      }
+    },
+    "node_modules/request/node_modules/uuid": {
+      "version": "3.4.0",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-3.4.0.tgz",
       "integrity": "sha512-HjSDRw6gZE5JMggctHBcjVak08+KEVhSIiDzFnT9S9aegmp85S/bReBVTb4QTFaRNptJ9kuYaNhnbNEOkbKb/A==",
       "deprecated": "Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.",
       "dev": true,
@@ -18154,9 +18974,9 @@
       }
     },
     "node_modules/rfdc": {
-      "version": "1.3.1",
-      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.3.1.tgz",
-      "integrity": "sha512-r5a3l5HzYlIC68TpmYKlxWjmOP6wiPJ1vWv2HeLhNsRZMrCkxeqxiHlQ21oXmQ4F3SiryXBHhAD7JZqvOJjFmg==",
+      "version": "1.3.0",
+      "resolved": "https://registry.npmjs.org/rfdc/-/rfdc-1.3.0.tgz",
+      "integrity": "sha512-V2hovdzFbOi77/WajaSMXk2OLm+xNIeQdMMuB7icj7bk6zi2F8GGAxigcnDFpJHbNyNcgyJDiP+8nOrY5cZGrA==",
       "dev": true
     },
     "node_modules/rimraf": {
@@ -18174,9 +18994,9 @@
       }
     },
     "node_modules/rollup": {
-      "version": "4.13.0",
-      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.13.0.tgz",
-      "integrity": "sha512-3YegKemjoQnYKmsBlOHfMLVPPA5xLkQ8MHLLSw/fBrFaVkEayL51DilPpNNLq1exr98F2B1TzrV0FUlN3gWRPg==",
+      "version": "4.9.5",
+      "resolved": "https://registry.npmjs.org/rollup/-/rollup-4.9.5.tgz",
+      "integrity": "sha512-E4vQW0H/mbNMw2yLSqJyjtkHY9dslf/p0zuT1xehNRqUTBOFMqEjguDvqhXr7N7r/4ttb2jr4T41d3dncmIgbQ==",
       "dev": true,
       "dependencies": {
         "@types/estree": "1.0.5"
@@ -18189,19 +19009,19 @@
         "npm": ">=8.0.0"
       },
       "optionalDependencies": {
-        "@rollup/rollup-android-arm-eabi": "4.13.0",
-        "@rollup/rollup-android-arm64": "4.13.0",
-        "@rollup/rollup-darwin-arm64": "4.13.0",
-        "@rollup/rollup-darwin-x64": "4.13.0",
-        "@rollup/rollup-linux-arm-gnueabihf": "4.13.0",
-        "@rollup/rollup-linux-arm64-gnu": "4.13.0",
-        "@rollup/rollup-linux-arm64-musl": "4.13.0",
-        "@rollup/rollup-linux-riscv64-gnu": "4.13.0",
-        "@rollup/rollup-linux-x64-gnu": "4.13.0",
-        "@rollup/rollup-linux-x64-musl": "4.13.0",
-        "@rollup/rollup-win32-arm64-msvc": "4.13.0",
-        "@rollup/rollup-win32-ia32-msvc": "4.13.0",
-        "@rollup/rollup-win32-x64-msvc": "4.13.0",
+        "@rollup/rollup-android-arm-eabi": "4.9.5",
+        "@rollup/rollup-android-arm64": "4.9.5",
+        "@rollup/rollup-darwin-arm64": "4.9.5",
+        "@rollup/rollup-darwin-x64": "4.9.5",
+        "@rollup/rollup-linux-arm-gnueabihf": "4.9.5",
+        "@rollup/rollup-linux-arm64-gnu": "4.9.5",
+        "@rollup/rollup-linux-arm64-musl": "4.9.5",
+        "@rollup/rollup-linux-riscv64-gnu": "4.9.5",
+        "@rollup/rollup-linux-x64-gnu": "4.9.5",
+        "@rollup/rollup-linux-x64-musl": "4.9.5",
+        "@rollup/rollup-win32-arm64-msvc": "4.9.5",
+        "@rollup/rollup-win32-ia32-msvc": "4.9.5",
+        "@rollup/rollup-win32-x64-msvc": "4.9.5",
         "fsevents": "~2.3.2"
       }
     },
@@ -18241,10 +19061,9 @@
       "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A=="
     },
     "node_modules/run-async": {
-      "version": "3.0.0",
-      "resolved": "https://registry.npmjs.org/run-async/-/run-async-3.0.0.tgz",
-      "integrity": "sha512-540WwVDOMxA6dN6We19EcT9sc3hkXPw5mzRNGM3FkdN/vtE9NFvj5lFAPNwUDmJjXidm3v7TC1cTE7t17Ulm1Q==",
-      "dev": true,
+      "version": "2.4.1",
+      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
+      "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
       "engines": {
         "node": ">=0.12.0"
       }
@@ -18272,6 +19091,15 @@
         "queue-microtask": "^1.2.2"
       }
     },
+    "node_modules/rxfire": {
+      "version": "6.0.5",
+      "resolved": "https://registry.npmjs.org/rxfire/-/rxfire-6.0.5.tgz",
+      "integrity": "sha512-ycBsANGbya3GNtOBKzZVATLEV+0S9gUrlTfwnN15TCXtgG8OgIMAuv2k9+kMeVaevp/DRp1KT+vYf6Wkop6gvw==",
+      "peerDependencies": {
+        "firebase": "^9.0.0 || ^10.0.0",
+        "rxjs": "^6.0.0 || ^7.0.0"
+      }
+    },
     "node_modules/rxjs": {
       "version": "7.8.1",
       "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-7.8.1.tgz",
@@ -18281,13 +19109,13 @@
       }
     },
     "node_modules/safe-array-concat": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.2.tgz",
-      "integrity": "sha512-vj6RsCsWBCf19jIeHEfkRMw8DPiBb+DMXklQ/1SGDHOMlHdPUkZXFQ2YdplS23zESTijAcurb1aSgJA3AgMu1Q==",
+      "version": "1.1.0",
+      "resolved": "https://registry.npmjs.org/safe-array-concat/-/safe-array-concat-1.1.0.tgz",
+      "integrity": "sha512-ZdQ0Jeb9Ofti4hbt5lX3T2JcAamT9hfzYU1MNB+z/jaEbB6wfFfPIR/zEORmZqobkCCJhSjodobH6WHNmJ97dg==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7",
-        "get-intrinsic": "^1.2.4",
+        "call-bind": "^1.0.5",
+        "get-intrinsic": "^1.2.2",
         "has-symbols": "^1.0.3",
         "isarray": "^2.0.5"
       },
@@ -18318,13 +19146,13 @@
       ]
     },
     "node_modules/safe-regex-test": {
-      "version": "1.0.3",
-      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.3.tgz",
-      "integrity": "sha512-CdASjNJPvRa7roO6Ra/gLYBTzYzzPyyBXxIMdGW3USQLyjWEls2RgW5UBTXaQVp+OrpeCK3bLem8smtmheoRuw==",
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/safe-regex-test/-/safe-regex-test-1.0.2.tgz",
+      "integrity": "sha512-83S9w6eFq12BBIJYvjMux6/dkirb8+4zJRA9cxNBVb7Wq5fJBW+Xze48WqR8pxua7bDuAaaAxtVVd4Idjp1dBQ==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.6",
-        "es-errors": "^1.3.0",
+        "call-bind": "^1.0.5",
+        "get-intrinsic": "^1.2.2",
         "is-regex": "^1.1.4"
       },
       "engines": {
@@ -18348,9 +19176,9 @@
       "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
     },
     "node_modules/sass": {
-      "version": "1.71.1",
-      "resolved": "https://registry.npmjs.org/sass/-/sass-1.71.1.tgz",
-      "integrity": "sha512-wovtnV2PxzteLlfNzbgm1tFXPLoZILYAMJtvoXXkD7/+1uP41eKkIt1ypWq5/q2uT94qHjXehEYfmjKOvjL9sg==",
+      "version": "1.70.0",
+      "resolved": "https://registry.npmjs.org/sass/-/sass-1.70.0.tgz",
+      "integrity": "sha512-uUxNQ3zAHeAx5nRFskBnrWzDUJrrvpCPD5FNAoRvTi0WwremlheES3tg+56PaVtCs5QDRX5CBLxxKMDJMEa1WQ==",
       "dev": true,
       "dependencies": {
         "chokidar": ">=3.0.0 <4.0.0",
@@ -18365,29 +19193,29 @@
       }
     },
     "node_modules/sass-loader": {
-      "version": "14.1.0",
-      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-14.1.0.tgz",
-      "integrity": "sha512-LS2mLeFWA+orYxHNu+O18Xe4jR0kyamNOOUsE3NyBP4DvIL+8stHpNX0arYTItdPe80kluIiJ7Wfe/9iHSRO0Q==",
+      "version": "13.3.3",
+      "resolved": "https://registry.npmjs.org/sass-loader/-/sass-loader-13.3.3.tgz",
+      "integrity": "sha512-mt5YN2F1MOZr3d/wBRcZxeFgwgkH44wVc2zohO2YF6JiOMkiXe4BYRZpSu2sO1g71mo/j16txzUhsKZlqjVGzA==",
       "dev": true,
       "dependencies": {
         "neo-async": "^2.6.2"
       },
       "engines": {
-        "node": ">= 18.12.0"
+        "node": ">= 14.15.0"
       },
       "funding": {
         "type": "opencollective",
         "url": "https://opencollective.com/webpack"
       },
       "peerDependencies": {
-        "@rspack/core": "0.x || 1.x",
+        "fibers": ">= 3.1.0",
         "node-sass": "^4.0.0 || ^5.0.0 || ^6.0.0 || ^7.0.0 || ^8.0.0 || ^9.0.0",
         "sass": "^1.3.0",
         "sass-embedded": "*",
         "webpack": "^5.0.0"
       },
       "peerDependenciesMeta": {
-        "@rspack/core": {
+        "fibers": {
           "optional": true
         },
         "node-sass": {
@@ -18398,9 +19226,6 @@
         },
         "sass-embedded": {
           "optional": true
-        },
-        "webpack": {
-          "optional": true
         }
       }
     },
@@ -18534,9 +19359,9 @@
       }
     },
     "node_modules/semver": {
-      "version": "7.6.0",
-      "resolved": "https://registry.npmjs.org/semver/-/semver-7.6.0.tgz",
-      "integrity": "sha512-EnwXhrlwXMk9gKu5/flx5sv/an57AkRplG3hTK68W7FRDN+k+OWBj65M7719OkA82XLBxrcX0KSHj+X5COhOVg==",
+      "version": "7.5.4",
+      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
+      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
       "dependencies": {
         "lru-cache": "^6.0.0"
       },
@@ -18742,31 +19567,29 @@
       "dev": true
     },
     "node_modules/set-function-length": {
-      "version": "1.2.2",
-      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.2.tgz",
-      "integrity": "sha512-pgRc4hJ4/sNjWCSS9AmnS40x3bNMDTknHgL5UaMBTMyJnU90EgWh1Rz+MC9eFu4BuN/UwZjKQuY/1v3rM7HMfg==",
+      "version": "1.2.0",
+      "resolved": "https://registry.npmjs.org/set-function-length/-/set-function-length-1.2.0.tgz",
+      "integrity": "sha512-4DBHDoyHlM1IRPGYcoxexgh67y4ueR53FKV1yyxwFMY7aCqcN/38M1+SwZ/qJQ8iLv7+ck385ot4CcisOAPT9w==",
       "dependencies": {
-        "define-data-property": "^1.1.4",
-        "es-errors": "^1.3.0",
+        "define-data-property": "^1.1.1",
         "function-bind": "^1.1.2",
-        "get-intrinsic": "^1.2.4",
+        "get-intrinsic": "^1.2.2",
         "gopd": "^1.0.1",
-        "has-property-descriptors": "^1.0.2"
+        "has-property-descriptors": "^1.0.1"
       },
       "engines": {
         "node": ">= 0.4"
       }
     },
     "node_modules/set-function-name": {
-      "version": "2.0.2",
-      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.2.tgz",
-      "integrity": "sha512-7PGFlmtwsEADb0WYyvCMa1t+yke6daIG4Wirafur5kcf+MhUnPms1UeR0CKQdTZD81yESwMHbtn+TR+dMviakQ==",
+      "version": "2.0.1",
+      "resolved": "https://registry.npmjs.org/set-function-name/-/set-function-name-2.0.1.tgz",
+      "integrity": "sha512-tMNCiqYVkXIZgc2Hnoy2IvC/f8ezc5koaRFkCjrpWzGpCd3qbZXPzVy9MAZzK1ch/X0jvSkojys3oqJN0qCmdA==",
       "dev": true,
       "dependencies": {
-        "define-data-property": "^1.1.4",
-        "es-errors": "^1.3.0",
+        "define-data-property": "^1.0.1",
         "functions-have-names": "^1.2.3",
-        "has-property-descriptors": "^1.0.2"
+        "has-property-descriptors": "^1.0.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -18824,17 +19647,13 @@
       }
     },
     "node_modules/side-channel": {
-      "version": "1.0.6",
-      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.6.tgz",
-      "integrity": "sha512-fDW/EZ6Q9RiO8eFG8Hj+7u/oW+XrPTIChwCOM2+th2A6OblDtYYIpve9m+KvI9Z4C9qSEXlaGR6bTEYHReuglA==",
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.0.4.tgz",
+      "integrity": "sha512-q5XPytqFEIKHkGdiMIrY10mvLRvnQh42/+GoBlFW3b2LXLE2xxJpZFdm94we0BaoV3RwJyGqg5wS7epxTv0Zvw==",
       "dependencies": {
-        "call-bind": "^1.0.7",
-        "es-errors": "^1.3.0",
-        "get-intrinsic": "^1.2.4",
-        "object-inspect": "^1.13.1"
-      },
-      "engines": {
-        "node": ">= 0.4"
+        "call-bind": "^1.0.0",
+        "get-intrinsic": "^1.0.2",
+        "object-inspect": "^1.9.0"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -18846,17 +19665,17 @@
       "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
     },
     "node_modules/sigstore": {
-      "version": "2.2.2",
-      "resolved": "https://registry.npmjs.org/sigstore/-/sigstore-2.2.2.tgz",
-      "integrity": "sha512-2A3WvXkQurhuMgORgT60r6pOWiCOO5LlEqY2ADxGBDGVYLSo5HN0uLtb68YpVpuL/Vi8mLTe7+0Dx2Fq8lLqEg==",
+      "version": "2.2.0",
+      "resolved": "https://registry.npmjs.org/sigstore/-/sigstore-2.2.0.tgz",
+      "integrity": "sha512-fcU9clHwEss2/M/11FFM8Jwc4PjBgbhXoNskoK5guoK0qGQBSeUbQZRJ+B2fDFIvhyf0gqCaPrel9mszbhAxug==",
       "dev": true,
       "dependencies": {
-        "@sigstore/bundle": "^2.2.0",
-        "@sigstore/core": "^1.0.0",
-        "@sigstore/protobuf-specs": "^0.3.0",
-        "@sigstore/sign": "^2.2.3",
-        "@sigstore/tuf": "^2.3.1",
-        "@sigstore/verify": "^1.1.0"
+        "@sigstore/bundle": "^2.1.1",
+        "@sigstore/core": "^0.2.0",
+        "@sigstore/protobuf-specs": "^0.2.1",
+        "@sigstore/sign": "^2.2.1",
+        "@sigstore/tuf": "^2.3.0",
+        "@sigstore/verify": "^0.1.0"
       },
       "engines": {
         "node": "^16.14.0 || >=18.0.0"
@@ -18912,12 +19731,11 @@
       }
     },
     "node_modules/socket.io-adapter": {
-      "version": "2.5.4",
-      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.4.tgz",
-      "integrity": "sha512-wDNHGXGewWAjQPt3pyeYBtpWSq9cLE5UW1ZUPL/2eGK9jtse/FpXib7epSTsz0Q0m+6sg6Y4KtcFTlah1bdOVg==",
+      "version": "2.5.2",
+      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-2.5.2.tgz",
+      "integrity": "sha512-87C3LO/NOMc+eMcpcxUBebGjkpMDkNBS9tf7KJqcDsmL936EChtVva71Dw2q4tQcuVC+hAUy4an2NO/sYXmwRA==",
       "dev": true,
       "dependencies": {
-        "debug": "~4.3.4",
         "ws": "~8.11.0"
       }
     },
@@ -18967,15 +19785,15 @@
       }
     },
     "node_modules/socks": {
-      "version": "2.8.1",
-      "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.1.tgz",
-      "integrity": "sha512-B6w7tkwNid7ToxjZ08rQMT8M9BJAf8DKx8Ft4NivzH0zBUfd6jldGcisJn/RLgxcX3FPNDdNQCUEMMT79b+oCQ==",
+      "version": "2.7.1",
+      "resolved": "https://registry.npmjs.org/socks/-/socks-2.7.1.tgz",
+      "integrity": "sha512-7maUZy1N7uo6+WVEX6psASxtNlKaNVMlGQKkG/63nEDdLOWNbiUMoLK7X4uYoLhQstau72mLgfEWcXcwsaHbYQ==",
       "dependencies": {
-        "ip-address": "^9.0.5",
+        "ip": "^2.0.0",
         "smart-buffer": "^4.2.0"
       },
       "engines": {
-        "node": ">= 10.0.0",
+        "node": ">= 10.13.0",
         "npm": ">= 3.0.0"
       }
     },
@@ -18992,19 +19810,15 @@
         "node": ">= 14"
       }
     },
-    "node_modules/sort-any": {
+    "node_modules/socks/node_modules/ip": {
       "version": "2.0.0",
-      "resolved": "https://registry.npmjs.org/sort-any/-/sort-any-2.0.0.tgz",
-      "integrity": "sha512-T9JoiDewQEmWcnmPn/s9h/PH9t3d/LSWi0RgVmXSuDYeZXTZOZ1/wrK2PHaptuR1VXe3clLLt0pD6sgVOwjNEA==",
-      "dependencies": {
-        "lodash": "^4.17.21"
-      }
+      "resolved": "https://registry.npmjs.org/ip/-/ip-2.0.0.tgz",
+      "integrity": "sha512-WKa+XuLG1A1R0UWhl2+1XQSi+fZWMsYKffMZTTYsiZaUD8k2yDAj5atimTUD2TZkyCkNEeYE5NhFZmupOGtjYQ=="
     },
     "node_modules/source-map": {
       "version": "0.7.4",
       "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.7.4.tgz",
       "integrity": "sha512-l3BikUxvPOcn5E74dZiq5BGsTb5yEwhaTSzccU6t4sDOH8NWJCstKO5QT2CvtFoK6F0saL7p9xHAqHOlCPJygA==",
-      "dev": true,
       "engines": {
         "node": ">= 8"
       }
@@ -19069,6 +19883,36 @@
         "node": ">=0.10.0"
       }
     },
+    "node_modules/spawn-wrap": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/spawn-wrap/-/spawn-wrap-2.0.0.tgz",
+      "integrity": "sha512-EeajNjfN9zMnULLwhZZQU3GWBoFNkbngTUPfaawT4RkMiviTxcX0qfhVbGey39mfctfDHkWtuecgQ8NJcyQWHg==",
+      "dev": true,
+      "dependencies": {
+        "foreground-child": "^2.0.0",
+        "is-windows": "^1.0.2",
+        "make-dir": "^3.0.0",
+        "rimraf": "^3.0.0",
+        "signal-exit": "^3.0.2",
+        "which": "^2.0.1"
+      },
+      "engines": {
+        "node": ">=8"
+      }
+    },
+    "node_modules/spawn-wrap/node_modules/foreground-child": {
+      "version": "2.0.0",
+      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-2.0.0.tgz",
+      "integrity": "sha512-dCIq9FpEcyQyXKCkyzmlPTFNgrCzPudOe+mhvJU5zAtlBnGVy2yKxtfsxK2tQBThwq225jcvBjpw1Gr40uzZCA==",
+      "dev": true,
+      "dependencies": {
+        "cross-spawn": "^7.0.0",
+        "signal-exit": "^3.0.2"
+      },
+      "engines": {
+        "node": ">=8.0.0"
+      }
+    },
     "node_modules/spdx-correct": {
       "version": "3.2.0",
       "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.2.0.tgz",
@@ -19080,9 +19924,9 @@
       }
     },
     "node_modules/spdx-exceptions": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.5.0.tgz",
-      "integrity": "sha512-PiU42r+xO4UbUS1buo3LPJkjlO7430Xn5SVAhdpzzsPHsjbYVflnnFdATgabnLude+Cqu25p6N+g2lw/PFsa4w==",
+      "version": "2.3.0",
+      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
+      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
       "dev": true
     },
     "node_modules/spdx-expression-parse": {
@@ -19096,9 +19940,9 @@
       }
     },
     "node_modules/spdx-license-ids": {
-      "version": "3.0.17",
-      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.17.tgz",
-      "integrity": "sha512-sh8PWc/ftMqAAdFiBu6Fy6JUOYjqDJBJvIhpfDMyHrr0Rbp5liZqd4TjtQ/RgfLjKFZb+LMx5hpml5qOWy0qvg==",
+      "version": "3.0.16",
+      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.16.tgz",
+      "integrity": "sha512-eWN+LnM3GR6gPu35WxNgbGl8rmY1AEmoMDvL/QD6zYmPWgywxWqJWNdLGT+ke8dKNWrcYgYjPpG5gbTfghP8rw==",
       "dev": true
     },
     "node_modules/spdy": {
@@ -19161,12 +20005,6 @@
         "node": ">=0.10.0"
       }
     },
-    "node_modules/sshpk/node_modules/jsbn": {
-      "version": "0.1.1",
-      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-0.1.1.tgz",
-      "integrity": "sha512-UVU9dibq2JcFWxQPA6KCqj5O42VOmAY3zQUfEKxU0KpTGXwNoCjkX1e13eHNvw/xPynt6pU0rZ1htjWTNTSXsg==",
-      "dev": true
-    },
     "node_modules/ssri": {
       "version": "10.0.5",
       "resolved": "https://registry.npmjs.org/ssri/-/ssri-10.0.5.tgz",
@@ -19227,38 +20065,6 @@
         "node": ">=8.0"
       }
     },
-    "node_modules/streamroller/node_modules/fs-extra": {
-      "version": "8.1.0",
-      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-8.1.0.tgz",
-      "integrity": "sha512-yhlQgA6mnOJUKOsRUFsgJdQCvkKhcz8tlZG5HBQfReYZy46OwLcY+Zia0mtdHsOo9y/hP+CxMN0TU9QxoOtG4g==",
-      "dev": true,
-      "dependencies": {
-        "graceful-fs": "^4.2.0",
-        "jsonfile": "^4.0.0",
-        "universalify": "^0.1.0"
-      },
-      "engines": {
-        "node": ">=6 <7 || >=8"
-      }
-    },
-    "node_modules/streamroller/node_modules/jsonfile": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-4.0.0.tgz",
-      "integrity": "sha512-m6F1R3z8jjlf2imQHS2Qez5sjKWQzbuuhuJ/FKYFRZvPE3PuHcSMVZzfsLhGVOkfd20obL5SWEBew5ShlquNxg==",
-      "dev": true,
-      "optionalDependencies": {
-        "graceful-fs": "^4.1.6"
-      }
-    },
-    "node_modules/streamroller/node_modules/universalify": {
-      "version": "0.1.2",
-      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
-      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
-      "dev": true,
-      "engines": {
-        "node": ">= 4.0.0"
-      }
-    },
     "node_modules/string_decoder": {
       "version": "1.3.0",
       "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
@@ -19470,17 +20276,14 @@
       "integrity": "sha512-D2S+3GLxWH+uhrNEcoh/fnmYeP8E8/zHl644d/jdA0g2uyXvy3sb0qxotE+ne0LtccHknQzWwZEzhak7oJ0COQ=="
     },
     "node_modules/superstatic/node_modules/minimatch": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-6.2.0.tgz",
-      "integrity": "sha512-sauLxniAmvnhhRjFwPNnJKaPFYyddAgbYdeUpHULtCT/GhzdCx/MDNy+Y40lBxTQUrMzDE8e0S43Z5uqfO0REg==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dependencies": {
         "brace-expansion": "^2.0.1"
       },
       "engines": {
         "node": ">=10"
-      },
-      "funding": {
-        "url": "https://github.com/sponsors/isaacs"
       }
     },
     "node_modules/superstatic/node_modules/path-to-regexp": {
@@ -19667,9 +20470,9 @@
       }
     },
     "node_modules/terser": {
-      "version": "5.27.0",
-      "resolved": "https://registry.npmjs.org/terser/-/terser-5.27.0.tgz",
-      "integrity": "sha512-bi1HRwVRskAjheeYl291n3JC4GgO/Ty4z1nVs5AAsmonJulGxpSektecnNedrwK9C7vpvVtcX3cw00VSLt7U2A==",
+      "version": "5.26.0",
+      "resolved": "https://registry.npmjs.org/terser/-/terser-5.26.0.tgz",
+      "integrity": "sha512-dytTGoE2oHgbNV9nTzgBEPaqAWvcJNl66VZ0BkJqlvp71IjO8CxdBx/ykCNb47cLnCmCvRZ6ZR0tLkqvZCdVBQ==",
       "dev": true,
       "dependencies": {
         "@jridgewell/source-map": "^0.3.3",
@@ -19787,26 +20590,16 @@
         "node": ">=8"
       }
     },
-    "node_modules/test-exclude/node_modules/brace-expansion": {
-      "version": "1.1.11",
-      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
-      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
-      "dev": true,
-      "dependencies": {
-        "balanced-match": "^1.0.0",
-        "concat-map": "0.0.1"
-      }
-    },
     "node_modules/test-exclude/node_modules/minimatch": {
-      "version": "3.1.2",
-      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
-      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
+      "version": "5.1.2",
+      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.2.tgz",
+      "integrity": "sha512-bNH9mmM9qsJ2X4r2Nat1B//1dJVcn3+iBLa3IgqJ7EbGaDNepL9QSHOxN4ng33s52VMMhhIfgCYDk3C4ZmlDAg==",
       "dev": true,
       "dependencies": {
-        "brace-expansion": "^1.1.7"
+        "brace-expansion": "^2.0.1"
       },
       "engines": {
-        "node": "*"
+        "node": ">=10"
       }
     },
     "node_modules/text-hex": {
@@ -19870,28 +20663,6 @@
         "node": ">=0.6"
       }
     },
-    "node_modules/tough-cookie": {
-      "version": "2.5.0",
-      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-2.5.0.tgz",
-      "integrity": "sha512-nlLsUzgm1kfLXSXfRZMc1KLAugd4hqJHDTvc2hDIwS3mZAfMEuMbc03SujMF+GEcpaX/qboeycw6iO8JwVv2+g==",
-      "dev": true,
-      "dependencies": {
-        "psl": "^1.1.28",
-        "punycode": "^2.1.1"
-      },
-      "engines": {
-        "node": ">=0.8"
-      }
-    },
-    "node_modules/tough-cookie/node_modules/punycode": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
-      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
-      "dev": true,
-      "engines": {
-        "node": ">=6"
-      }
-    },
     "node_modules/toxic": {
       "version": "1.0.1",
       "resolved": "https://registry.npmjs.org/toxic/-/toxic-1.0.1.tgz",
@@ -19935,17 +20706,60 @@
       }
     },
     "node_modules/ts-api-utils": {
-      "version": "1.3.0",
-      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.3.0.tgz",
-      "integrity": "sha512-UQMIo7pb8WRomKR1/+MFVLTroIvDVtMX3K6OUir8ynLyzB8Jeriont2bTAtmNPa1ekAgN7YPDyf6V+ygrdU+eQ==",
+      "version": "1.0.3",
+      "resolved": "https://registry.npmjs.org/ts-api-utils/-/ts-api-utils-1.0.3.tgz",
+      "integrity": "sha512-wNMeqtMz5NtwpT/UZGY5alT+VoKdSsOOP/kqHFcUW1P/VRhH2wJ48+DN2WwUliNbQ976ETwDL0Ifd2VVvgonvg==",
       "dev": true,
       "engines": {
-        "node": ">=16"
+        "node": ">=16.13.0"
       },
       "peerDependencies": {
         "typescript": ">=4.2.0"
       }
     },
+    "node_modules/ts-node": {
+      "version": "10.9.2",
+      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-10.9.2.tgz",
+      "integrity": "sha512-f0FFpIdcHgn8zcPSbf1dRevwt047YMnaiJM3u2w2RewrB+fob/zePZcrOyQoLMMO7aBIddLcQIEK5dYjkLnGrQ==",
+      "dev": true,
+      "dependencies": {
+        "@cspotcode/source-map-support": "^0.8.0",
+        "@tsconfig/node10": "^1.0.7",
+        "@tsconfig/node12": "^1.0.7",
+        "@tsconfig/node14": "^1.0.0",
+        "@tsconfig/node16": "^1.0.2",
+        "acorn": "^8.4.1",
+        "acorn-walk": "^8.1.1",
+        "arg": "^4.1.0",
+        "create-require": "^1.1.0",
+        "diff": "^4.0.1",
+        "make-error": "^1.1.1",
+        "v8-compile-cache-lib": "^3.0.1",
+        "yn": "3.1.1"
+      },
+      "bin": {
+        "ts-node": "dist/bin.js",
+        "ts-node-cwd": "dist/bin-cwd.js",
+        "ts-node-esm": "dist/bin-esm.js",
+        "ts-node-script": "dist/bin-script.js",
+        "ts-node-transpile-only": "dist/bin-transpile.js",
+        "ts-script": "dist/bin-script-deprecated.js"
+      },
+      "peerDependencies": {
+        "@swc/core": ">=1.2.50",
+        "@swc/wasm": ">=1.2.50",
+        "@types/node": "*",
+        "typescript": ">=2.7"
+      },
+      "peerDependenciesMeta": {
+        "@swc/core": {
+          "optional": true
+        },
+        "@swc/wasm": {
+          "optional": true
+        }
+      }
+    },
     "node_modules/tsconfig-paths": {
       "version": "3.15.0",
       "resolved": "https://registry.npmjs.org/tsconfig-paths/-/tsconfig-paths-3.15.0.tgz",
@@ -20043,30 +20857,29 @@
       }
     },
     "node_modules/typed-array-buffer": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.2.tgz",
-      "integrity": "sha512-gEymJYKZtKXzzBzM4jqa9w6Q1Jjm7x2d+sh19AdsD4wqnMPDYyvwpsIc2Q/835kHuo3BEQ7CjelGhfTsoBb2MQ==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/typed-array-buffer/-/typed-array-buffer-1.0.0.tgz",
+      "integrity": "sha512-Y8KTSIglk9OZEr8zywiIHG/kmQ7KWyjseXs1CbSo8vC42w7hg2HgYTxSWwP0+is7bWDc1H+Fo026CpHFwm8tkw==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7",
-        "es-errors": "^1.3.0",
-        "is-typed-array": "^1.1.13"
+        "call-bind": "^1.0.2",
+        "get-intrinsic": "^1.2.1",
+        "is-typed-array": "^1.1.10"
       },
       "engines": {
         "node": ">= 0.4"
       }
     },
     "node_modules/typed-array-byte-length": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.1.tgz",
-      "integrity": "sha512-3iMJ9q0ao7WE9tWcaYKIptkNBuOIcZCCT0d4MRvuuH88fEoEH62IuQe0OtraD3ebQEoTRk8XCBoknUNc1Y67pw==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-length/-/typed-array-byte-length-1.0.0.tgz",
+      "integrity": "sha512-Or/+kvLxNpeQ9DtSydonMxCx+9ZXOswtwJn17SNLvhptaXYDJvkFFP5zbfU/uLmvnBJlI4yrnXRxpdWH/M5tNA==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7",
+        "call-bind": "^1.0.2",
         "for-each": "^0.3.3",
-        "gopd": "^1.0.1",
-        "has-proto": "^1.0.3",
-        "is-typed-array": "^1.1.13"
+        "has-proto": "^1.0.1",
+        "is-typed-array": "^1.1.10"
       },
       "engines": {
         "node": ">= 0.4"
@@ -20076,17 +20889,16 @@
       }
     },
     "node_modules/typed-array-byte-offset": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.2.tgz",
-      "integrity": "sha512-Ous0vodHa56FviZucS2E63zkgtgrACj7omjwd/8lTEMEPFFyjfixMZ1ZXenpgCFBBt4EC1J2XsyVS2gkG0eTFA==",
+      "version": "1.0.0",
+      "resolved": "https://registry.npmjs.org/typed-array-byte-offset/-/typed-array-byte-offset-1.0.0.tgz",
+      "integrity": "sha512-RD97prjEt9EL8YgAgpOkf3O4IF9lhJFr9g0htQkm0rchFp/Vx7LW5Q8fSXXub7BXAODyUQohRMyOc3faCPd0hg==",
       "dev": true,
       "dependencies": {
-        "available-typed-arrays": "^1.0.7",
-        "call-bind": "^1.0.7",
+        "available-typed-arrays": "^1.0.5",
+        "call-bind": "^1.0.2",
         "for-each": "^0.3.3",
-        "gopd": "^1.0.1",
-        "has-proto": "^1.0.3",
-        "is-typed-array": "^1.1.13"
+        "has-proto": "^1.0.1",
+        "is-typed-array": "^1.1.10"
       },
       "engines": {
         "node": ">= 0.4"
@@ -20096,20 +20908,14 @@
       }
     },
     "node_modules/typed-array-length": {
-      "version": "1.0.5",
-      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.5.tgz",
-      "integrity": "sha512-yMi0PlwuznKHxKmcpoOdeLwxBoVPkqZxd7q2FgMkmD3bNwvF5VW0+UlUQ1k1vmktTu4Yu13Q0RIxEP8+B+wloA==",
+      "version": "1.0.4",
+      "resolved": "https://registry.npmjs.org/typed-array-length/-/typed-array-length-1.0.4.tgz",
+      "integrity": "sha512-KjZypGq+I/H7HI5HlOoGHkWUUGq+Q0TPhQurLbyrVrvnKTBgzLhIJ7j6J/XTQOi0d1RjyZ0wdas8bKs2p0x3Ng==",
       "dev": true,
       "dependencies": {
-        "call-bind": "^1.0.7",
+        "call-bind": "^1.0.2",
         "for-each": "^0.3.3",
-        "gopd": "^1.0.1",
-        "has-proto": "^1.0.3",
-        "is-typed-array": "^1.1.13",
-        "possible-typed-array-names": "^1.0.0"
-      },
-      "engines": {
-        "node": ">= 0.4"
+        "is-typed-array": "^1.1.9"
       },
       "funding": {
         "url": "https://github.com/sponsors/ljharb"
@@ -20142,31 +20948,6 @@
         "node": ">=14.17"
       }
     },
-    "node_modules/typescript-eslint": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/typescript-eslint/-/typescript-eslint-7.2.0.tgz",
-      "integrity": "sha512-VqXEBqzPxJlR8Lfg2Dywe4XpIk637kwp2sfMQ+vudNHo48TUvnlHzAyFMQknv0AdhvZFXQN0a0t9SPI3rsAYew==",
-      "dev": true,
-      "dependencies": {
-        "@typescript-eslint/eslint-plugin": "7.2.0",
-        "@typescript-eslint/parser": "7.2.0"
-      },
-      "engines": {
-        "node": "^16.0.0 || >=18.0.0"
-      },
-      "funding": {
-        "type": "opencollective",
-        "url": "https://opencollective.com/typescript-eslint"
-      },
-      "peerDependencies": {
-        "eslint": "^8.56.0"
-      },
-      "peerDependenciesMeta": {
-        "typescript": {
-          "optional": true
-        }
-      }
-    },
     "node_modules/ua-parser-js": {
       "version": "0.7.37",
       "resolved": "https://registry.npmjs.org/ua-parser-js/-/ua-parser-js-0.7.37.tgz",
@@ -20227,9 +21008,9 @@
       "integrity": "sha512-+A5Sja4HP1M08MaXya7p5LvjuM7K6q/2EaC0+iovj/wOcMsTzMvDFbasi/oSapiwOlt252IqsKqPjCl7huKS0A=="
     },
     "node_modules/undici": {
-      "version": "6.6.2",
-      "resolved": "https://registry.npmjs.org/undici/-/undici-6.6.2.tgz",
-      "integrity": "sha512-vSqvUE5skSxQJ5sztTZ/CdeJb1Wq0Hf44hlYMciqHghvz+K88U0l7D6u1VsndoFgskDcnU+nG3gYmMzJVzd9Qg==",
+      "version": "6.2.1",
+      "resolved": "https://registry.npmjs.org/undici/-/undici-6.2.1.tgz",
+      "integrity": "sha512-7Wa9thEM6/LMnnKtxJHlc8SrTlDmxqJecgz1iy8KlsN0/iskQXOQCuPkrZLXbElPaSw5slFFyKIKXyJ3UtbApw==",
       "dev": true,
       "dependencies": {
         "@fastify/busboy": "^2.0.0"
@@ -20331,11 +21112,11 @@
       }
     },
     "node_modules/universalify": {
-      "version": "2.0.1",
-      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.1.tgz",
-      "integrity": "sha512-gptHNQghINnc/vTGIk0SOFGFNXw7JVrlRUtConJRlvaw6DuX0wO5Jeko9sWrMBhh+PsYAZ7oXAiOnf/UKogyiw==",
+      "version": "0.1.2",
+      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.1.2.tgz",
+      "integrity": "sha512-rBJeI5CXAlmy1pV+617WB9J63U6XcazHHF2f2dbJix4XzpUF0RS3Zbj0FGIOCAva5P/d/GBOYaACQ1w+0azUkg==",
       "engines": {
-        "node": ">= 10.0.0"
+        "node": ">= 4.0.0"
       }
     },
     "node_modules/unpipe": {
@@ -20444,578 +21225,178 @@
     },
     "node_modules/update-notifier-cjs/node_modules/color-name": {
       "version": "1.1.4",
-      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
-      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
-    },
-    "node_modules/update-notifier-cjs/node_modules/has-flag": {
-      "version": "4.0.0",
-      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
-      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/update-notifier-cjs/node_modules/supports-color": {
-      "version": "7.2.0",
-      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
-      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
-      "dependencies": {
-        "has-flag": "^4.0.0"
-      },
-      "engines": {
-        "node": ">=8"
-      }
-    },
-    "node_modules/uri-js": {
-      "version": "4.4.1",
-      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
-      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
-      "dependencies": {
-        "punycode": "^2.1.0"
-      }
-    },
-    "node_modules/uri-js/node_modules/punycode": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
-      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
-      "engines": {
-        "node": ">=6"
-      }
-    },
-    "node_modules/url-join": {
-      "version": "0.0.1",
-      "resolved": "https://registry.npmjs.org/url-join/-/url-join-0.0.1.tgz",
-      "integrity": "sha512-H6dnQ/yPAAVzMQRvEvyz01hhfQL5qRWSEt7BX8t9DqnPw9BjMb64fjIRq76Uvf1hkHp+mTZvEVJ5guXOT0Xqaw=="
-    },
-    "node_modules/util-deprecate": {
-      "version": "1.0.2",
-      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
-      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
-    },
-    "node_modules/utils-merge": {
-      "version": "1.0.1",
-      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
-      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
-      "engines": {
-        "node": ">= 0.4.0"
-      }
-    },
-    "node_modules/uuid": {
-      "version": "8.3.2",
-      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
-      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
-      "bin": {
-        "uuid": "dist/bin/uuid"
-      }
-    },
-    "node_modules/valid-url": {
-      "version": "1.0.9",
-      "resolved": "https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz",
-      "integrity": "sha512-QQDsV8OnSf5Uc30CKSwG9lnhMPe6exHtTXLRYX8uMwKENy640pU+2BgBL0LRbDh/eYRahNCS7aewCx0wf3NYVA=="
-    },
-    "node_modules/validate-npm-package-license": {
-      "version": "3.0.4",
-      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
-      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
-      "dev": true,
-      "dependencies": {
-        "spdx-correct": "^3.0.0",
-        "spdx-expression-parse": "^3.0.0"
-      }
-    },
-    "node_modules/validate-npm-package-name": {
-      "version": "5.0.0",
-      "resolved": "https://registry.npmjs.org/validate-npm-package-name/-/validate-npm-package-name-5.0.0.tgz",
-      "integrity": "sha512-YuKoXDAhBYxY7SfOKxHBDoSyENFeW5VvIIQp2TGQuit8gpK6MnWaQelBKxso72DoxTZfZdcP3W90LqpSkgPzLQ==",
-      "dev": true,
-      "dependencies": {
-        "builtins": "^5.0.0"
-      },
-      "engines": {
-        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
-      }
-    },
-    "node_modules/vary": {
-      "version": "1.1.2",
-      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
-      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
-      "engines": {
-        "node": ">= 0.8"
-      }
-    },
-    "node_modules/verror": {
-      "version": "1.10.0",
-      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
-      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
-      "dev": true,
-      "engines": [
-        "node >=0.6.0"
-      ],
-      "dependencies": {
-        "assert-plus": "^1.0.0",
-        "core-util-is": "1.0.2",
-        "extsprintf": "^1.2.0"
-      }
-    },
-    "node_modules/vite": {
-      "version": "5.0.12",
-      "resolved": "https://registry.npmjs.org/vite/-/vite-5.0.12.tgz",
-      "integrity": "sha512-4hsnEkG3q0N4Tzf1+t6NdN9dg/L3BM+q8SWgbSPnJvrgH2kgdyzfVJwbR1ic69/4uMJJ/3dqDZZE5/WwqW8U1w==",
-      "dev": true,
-      "dependencies": {
-        "esbuild": "^0.19.3",
-        "postcss": "^8.4.32",
-        "rollup": "^4.2.0"
-      },
-      "bin": {
-        "vite": "bin/vite.js"
-      },
-      "engines": {
-        "node": "^18.0.0 || >=20.0.0"
-      },
-      "funding": {
-        "url": "https://github.com/vitejs/vite?sponsor=1"
-      },
-      "optionalDependencies": {
-        "fsevents": "~2.3.3"
-      },
-      "peerDependencies": {
-        "@types/node": "^18.0.0 || >=20.0.0",
-        "less": "*",
-        "lightningcss": "^1.21.0",
-        "sass": "*",
-        "stylus": "*",
-        "sugarss": "*",
-        "terser": "^5.4.0"
-      },
-      "peerDependenciesMeta": {
-        "@types/node": {
-          "optional": true
-        },
-        "less": {
-          "optional": true
-        },
-        "lightningcss": {
-          "optional": true
-        },
-        "sass": {
-          "optional": true
-        },
-        "stylus": {
-          "optional": true
-        },
-        "sugarss": {
-          "optional": true
-        },
-        "terser": {
-          "optional": true
-        }
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/aix-ppc64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/aix-ppc64/-/aix-ppc64-0.19.12.tgz",
-      "integrity": "sha512-bmoCYyWdEL3wDQIVbcyzRyeKLgk2WtWLTWz1ZIAZF/EGbNOwSA6ew3PftJ1PqMiOOGu0OyFMzG53L0zqIpPeNA==",
-      "cpu": [
-        "ppc64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "aix"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/android-arm": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm/-/android-arm-0.19.12.tgz",
-      "integrity": "sha512-qg/Lj1mu3CdQlDEEiWrlC4eaPZ1KztwGJ9B6J+/6G+/4ewxJg7gqj8eVYWvao1bXrqGiW2rsBZFSX3q2lcW05w==",
-      "cpu": [
-        "arm"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/android-arm64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-arm64/-/android-arm64-0.19.12.tgz",
-      "integrity": "sha512-P0UVNGIienjZv3f5zq0DP3Nt2IE/3plFzuaS96vihvD0Hd6H/q4WXUGpCxD/E8YrSXfNyRPbpTq+T8ZQioSuPA==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/android-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/android-x64/-/android-x64-0.19.12.tgz",
-      "integrity": "sha512-3k7ZoUW6Q6YqhdhIaq/WZ7HwBpnFBlW905Fa4s4qWJyiNOgT1dOqDiVAQFwBH7gBRZr17gLrlFCRzF6jFh7Kew==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "android"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/darwin-arm64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-arm64/-/darwin-arm64-0.19.12.tgz",
-      "integrity": "sha512-B6IeSgZgtEzGC42jsI+YYu9Z3HKRxp8ZT3cqhvliEHovq8HSX2YX8lNocDn79gCKJXOSaEot9MVYky7AKjCs8g==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/darwin-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/darwin-x64/-/darwin-x64-0.19.12.tgz",
-      "integrity": "sha512-hKoVkKzFiToTgn+41qGhsUJXFlIjxI/jSYeZf3ugemDYZldIXIxhvwN6erJGlX4t5h417iFuheZ7l+YVn05N3A==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "darwin"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/freebsd-arm64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-arm64/-/freebsd-arm64-0.19.12.tgz",
-      "integrity": "sha512-4aRvFIXmwAcDBw9AueDQ2YnGmz5L6obe5kmPT8Vd+/+x/JMVKCgdcRwH6APrbpNXsPz+K653Qg8HB/oXvXVukA==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/freebsd-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/freebsd-x64/-/freebsd-x64-0.19.12.tgz",
-      "integrity": "sha512-EYoXZ4d8xtBoVN7CEwWY2IN4ho76xjYXqSXMNccFSx2lgqOG/1TBPW0yPx1bJZk94qu3tX0fycJeeQsKovA8gg==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "freebsd"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-arm": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm/-/linux-arm-0.19.12.tgz",
-      "integrity": "sha512-J5jPms//KhSNv+LO1S1TX1UWp1ucM6N6XuL6ITdKWElCu8wXP72l9MM0zDTzzeikVyqFE6U8YAV9/tFyj0ti+w==",
-      "cpu": [
-        "arm"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-arm64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-arm64/-/linux-arm64-0.19.12.tgz",
-      "integrity": "sha512-EoTjyYyLuVPfdPLsGVVVC8a0p1BFFvtpQDB/YLEhaXyf/5bczaGeN15QkR+O4S5LeJ92Tqotve7i1jn35qwvdA==",
-      "cpu": [
-        "arm64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-ia32": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ia32/-/linux-ia32-0.19.12.tgz",
-      "integrity": "sha512-Thsa42rrP1+UIGaWz47uydHSBOgTUnwBwNq59khgIwktK6x60Hivfbux9iNR0eHCHzOLjLMLfUMLCypBkZXMHA==",
-      "cpu": [
-        "ia32"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-loong64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-loong64/-/linux-loong64-0.19.12.tgz",
-      "integrity": "sha512-LiXdXA0s3IqRRjm6rV6XaWATScKAXjI4R4LoDlvO7+yQqFdlr1Bax62sRwkVvRIrwXxvtYEHHI4dm50jAXkuAA==",
-      "cpu": [
-        "loong64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-mips64el": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-mips64el/-/linux-mips64el-0.19.12.tgz",
-      "integrity": "sha512-fEnAuj5VGTanfJ07ff0gOA6IPsvrVHLVb6Lyd1g2/ed67oU1eFzL0r9WL7ZzscD+/N6i3dWumGE1Un4f7Amf+w==",
-      "cpu": [
-        "mips64el"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
-      }
-    },
-    "node_modules/vite/node_modules/@esbuild/linux-ppc64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-ppc64/-/linux-ppc64-0.19.12.tgz",
-      "integrity": "sha512-nYJA2/QPimDQOh1rKWedNOe3Gfc8PabU7HT3iXWtNUbRzXS9+vgB0Fjaqr//XNbd82mCxHzik2qotuI89cfixg==",
-      "cpu": [
-        "ppc64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
+      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
+    },
+    "node_modules/update-notifier-cjs/node_modules/has-flag": {
+      "version": "4.0.0",
+      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
+      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
       "engines": {
-        "node": ">=12"
+        "node": ">=8"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/linux-riscv64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-riscv64/-/linux-riscv64-0.19.12.tgz",
-      "integrity": "sha512-2MueBrlPQCw5dVJJpQdUYgeqIzDQgw3QtiAHUC4RBz9FXPrskyyU3VI1hw7C0BSKB9OduwSJ79FTCqtGMWqJHg==",
-      "cpu": [
-        "riscv64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/update-notifier-cjs/node_modules/supports-color": {
+      "version": "7.2.0",
+      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
+      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
+      "dependencies": {
+        "has-flag": "^4.0.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": ">=8"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/linux-s390x": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-s390x/-/linux-s390x-0.19.12.tgz",
-      "integrity": "sha512-+Pil1Nv3Umes4m3AZKqA2anfhJiVmNCYkPchwFJNEJN5QxmTs1uzyy4TvmDrCRNT2ApwSari7ZIgrPeUx4UZDg==",
-      "cpu": [
-        "s390x"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
-      "engines": {
-        "node": ">=12"
+    "node_modules/uri-js": {
+      "version": "4.4.1",
+      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
+      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
+      "dependencies": {
+        "punycode": "^2.1.0"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/linux-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/linux-x64/-/linux-x64-0.19.12.tgz",
-      "integrity": "sha512-B71g1QpxfwBvNrfyJdVDexenDIt1CiDN1TIXLbhOw0KhJzE78KIFGX6OJ9MrtC0oOqMWf+0xop4qEU8JrJTwCg==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "linux"
-      ],
+    "node_modules/uri-js/node_modules/punycode": {
+      "version": "2.3.1",
+      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
+      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
       "engines": {
-        "node": ">=12"
+        "node": ">=6"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/netbsd-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/netbsd-x64/-/netbsd-x64-0.19.12.tgz",
-      "integrity": "sha512-3ltjQ7n1owJgFbuC61Oj++XhtzmymoCihNFgT84UAmJnxJfm4sYCiSLTXZtE00VWYpPMYc+ZQmB6xbSdVh0JWA==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "netbsd"
-      ],
+    "node_modules/url-join": {
+      "version": "0.0.1",
+      "resolved": "https://registry.npmjs.org/url-join/-/url-join-0.0.1.tgz",
+      "integrity": "sha512-H6dnQ/yPAAVzMQRvEvyz01hhfQL5qRWSEt7BX8t9DqnPw9BjMb64fjIRq76Uvf1hkHp+mTZvEVJ5guXOT0Xqaw=="
+    },
+    "node_modules/util-deprecate": {
+      "version": "1.0.2",
+      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
+      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw=="
+    },
+    "node_modules/utils-merge": {
+      "version": "1.0.1",
+      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
+      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
       "engines": {
-        "node": ">=12"
+        "node": ">= 0.4.0"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/openbsd-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/openbsd-x64/-/openbsd-x64-0.19.12.tgz",
-      "integrity": "sha512-RbrfTB9SWsr0kWmb9srfF+L933uMDdu9BIzdA7os2t0TXhCRjrQyCeOt6wVxr79CKD4c+p+YhCj31HBkYcXebw==",
-      "cpu": [
-        "x64"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "openbsd"
-      ],
-      "engines": {
-        "node": ">=12"
+    "node_modules/uuid": {
+      "version": "8.3.2",
+      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
+      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
+      "bin": {
+        "uuid": "dist/bin/uuid"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/sunos-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/sunos-x64/-/sunos-x64-0.19.12.tgz",
-      "integrity": "sha512-HKjJwRrW8uWtCQnQOz9qcU3mUZhTUQvi56Q8DPTLLB+DawoiQdjsYq+j+D3s9I8VFtDr+F9CjgXKKC4ss89IeA==",
-      "cpu": [
-        "x64"
-      ],
+    "node_modules/v8-compile-cache-lib": {
+      "version": "3.0.1",
+      "resolved": "https://registry.npmjs.org/v8-compile-cache-lib/-/v8-compile-cache-lib-3.0.1.tgz",
+      "integrity": "sha512-wa7YjyUGfNZngI/vtK0UHAN+lgDCxBPCylVXGp0zu59Fz5aiGtNXaq3DhIov063MorB+VfufLh3JlF2KdTK3xg==",
+      "dev": true
+    },
+    "node_modules/valid-url": {
+      "version": "1.0.9",
+      "resolved": "https://registry.npmjs.org/valid-url/-/valid-url-1.0.9.tgz",
+      "integrity": "sha512-QQDsV8OnSf5Uc30CKSwG9lnhMPe6exHtTXLRYX8uMwKENy640pU+2BgBL0LRbDh/eYRahNCS7aewCx0wf3NYVA=="
+    },
+    "node_modules/validate-npm-package-license": {
+      "version": "3.0.4",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
+      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
       "dev": true,
-      "optional": true,
-      "os": [
-        "sunos"
-      ],
-      "engines": {
-        "node": ">=12"
+      "dependencies": {
+        "spdx-correct": "^3.0.0",
+        "spdx-expression-parse": "^3.0.0"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/win32-arm64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-arm64/-/win32-arm64-0.19.12.tgz",
-      "integrity": "sha512-URgtR1dJnmGvX864pn1B2YUYNzjmXkuJOIqG2HdU62MVS4EHpU2946OZoTMnRUHklGtJdJZ33QfzdjGACXhn1A==",
-      "cpu": [
-        "arm64"
-      ],
+    "node_modules/validate-npm-package-name": {
+      "version": "5.0.0",
+      "resolved": "https://registry.npmjs.org/validate-npm-package-name/-/validate-npm-package-name-5.0.0.tgz",
+      "integrity": "sha512-YuKoXDAhBYxY7SfOKxHBDoSyENFeW5VvIIQp2TGQuit8gpK6MnWaQelBKxso72DoxTZfZdcP3W90LqpSkgPzLQ==",
       "dev": true,
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+      "dependencies": {
+        "builtins": "^5.0.0"
+      },
       "engines": {
-        "node": ">=12"
+        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/win32-ia32": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-ia32/-/win32-ia32-0.19.12.tgz",
-      "integrity": "sha512-+ZOE6pUkMOJfmxmBZElNOx72NKpIa/HFOMGzu8fqzQJ5kgf6aTGrcJaFsNiVMH4JKpMipyK+7k0n2UXN7a8YKQ==",
-      "cpu": [
-        "ia32"
-      ],
-      "dev": true,
-      "optional": true,
-      "os": [
-        "win32"
-      ],
+    "node_modules/vary": {
+      "version": "1.1.2",
+      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
+      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
       "engines": {
-        "node": ">=12"
+        "node": ">= 0.8"
       }
     },
-    "node_modules/vite/node_modules/@esbuild/win32-x64": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/@esbuild/win32-x64/-/win32-x64-0.19.12.tgz",
-      "integrity": "sha512-T1QyPSDCyMXaO3pzBkF96E8xMkiRYbUEZADd29SyPGabqxMViNoii+NcK7eWJAEoU6RZyEm5lVSIjTmcdoB9HA==",
-      "cpu": [
-        "x64"
-      ],
+    "node_modules/verror": {
+      "version": "1.10.0",
+      "resolved": "https://registry.npmjs.org/verror/-/verror-1.10.0.tgz",
+      "integrity": "sha512-ZZKSmDAEFOijERBLkmYfJ+vmk3w+7hOLYDNkRCuRuMJGEmqYNCNLyBBFwWKVMhfwaEF3WOd0Zlw86U/WC/+nYw==",
       "dev": true,
-      "optional": true,
-      "os": [
-        "win32"
+      "engines": [
+        "node >=0.6.0"
       ],
-      "engines": {
-        "node": ">=12"
+      "dependencies": {
+        "assert-plus": "^1.0.0",
+        "core-util-is": "1.0.2",
+        "extsprintf": "^1.2.0"
       }
     },
-    "node_modules/vite/node_modules/esbuild": {
-      "version": "0.19.12",
-      "resolved": "https://registry.npmjs.org/esbuild/-/esbuild-0.19.12.tgz",
-      "integrity": "sha512-aARqgq8roFBj054KvQr5f1sFu0D65G+miZRCuJyJ0G13Zwx7vRar5Zhn2tkQNzIXcBrNVsv/8stehpj+GAjgbg==",
+    "node_modules/vite": {
+      "version": "5.0.11",
+      "resolved": "https://registry.npmjs.org/vite/-/vite-5.0.11.tgz",
+      "integrity": "sha512-XBMnDjZcNAw/G1gEiskiM1v6yzM4GE5aMGvhWTlHAYYhxb7S3/V1s3m2LDHa8Vh6yIWYYB0iJwsEaS523c4oYA==",
       "dev": true,
-      "hasInstallScript": true,
+      "dependencies": {
+        "esbuild": "^0.19.3",
+        "postcss": "^8.4.32",
+        "rollup": "^4.2.0"
+      },
       "bin": {
-        "esbuild": "bin/esbuild"
+        "vite": "bin/vite.js"
       },
       "engines": {
-        "node": ">=12"
+        "node": "^18.0.0 || >=20.0.0"
+      },
+      "funding": {
+        "url": "https://github.com/vitejs/vite?sponsor=1"
       },
       "optionalDependencies": {
-        "@esbuild/aix-ppc64": "0.19.12",
-        "@esbuild/android-arm": "0.19.12",
-        "@esbuild/android-arm64": "0.19.12",
-        "@esbuild/android-x64": "0.19.12",
-        "@esbuild/darwin-arm64": "0.19.12",
-        "@esbuild/darwin-x64": "0.19.12",
-        "@esbuild/freebsd-arm64": "0.19.12",
-        "@esbuild/freebsd-x64": "0.19.12",
-        "@esbuild/linux-arm": "0.19.12",
-        "@esbuild/linux-arm64": "0.19.12",
-        "@esbuild/linux-ia32": "0.19.12",
-        "@esbuild/linux-loong64": "0.19.12",
-        "@esbuild/linux-mips64el": "0.19.12",
-        "@esbuild/linux-ppc64": "0.19.12",
-        "@esbuild/linux-riscv64": "0.19.12",
-        "@esbuild/linux-s390x": "0.19.12",
-        "@esbuild/linux-x64": "0.19.12",
-        "@esbuild/netbsd-x64": "0.19.12",
-        "@esbuild/openbsd-x64": "0.19.12",
-        "@esbuild/sunos-x64": "0.19.12",
-        "@esbuild/win32-arm64": "0.19.12",
-        "@esbuild/win32-ia32": "0.19.12",
-        "@esbuild/win32-x64": "0.19.12"
+        "fsevents": "~2.3.3"
+      },
+      "peerDependencies": {
+        "@types/node": "^18.0.0 || >=20.0.0",
+        "less": "*",
+        "lightningcss": "^1.21.0",
+        "sass": "*",
+        "stylus": "*",
+        "sugarss": "*",
+        "terser": "^5.4.0"
+      },
+      "peerDependenciesMeta": {
+        "@types/node": {
+          "optional": true
+        },
+        "less": {
+          "optional": true
+        },
+        "lightningcss": {
+          "optional": true
+        },
+        "sass": {
+          "optional": true
+        },
+        "stylus": {
+          "optional": true
+        },
+        "sugarss": {
+          "optional": true
+        },
+        "terser": {
+          "optional": true
+        }
       }
     },
     "node_modules/void-elements": {
@@ -21183,19 +21564,19 @@
       "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
     },
     "node_modules/webpack": {
-      "version": "5.90.1",
-      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.90.1.tgz",
-      "integrity": "sha512-SstPdlAC5IvgFnhiRok8hqJo/+ArAbNv7rhU4fnWGHNVfN59HSQFaxZDSAL3IFG2YmqxuRs+IU33milSxbPlog==",
+      "version": "5.89.0",
+      "resolved": "https://registry.npmjs.org/webpack/-/webpack-5.89.0.tgz",
+      "integrity": "sha512-qyfIC10pOr70V+jkmud8tMfajraGCZMBWJtrmuBymQKCrLTRejBI8STDp1MCyZu/QTdZSeacCQYpYNQVOzX5kw==",
       "dev": true,
       "dependencies": {
         "@types/eslint-scope": "^3.7.3",
-        "@types/estree": "^1.0.5",
+        "@types/estree": "^1.0.0",
         "@webassemblyjs/ast": "^1.11.5",
         "@webassemblyjs/wasm-edit": "^1.11.5",
         "@webassemblyjs/wasm-parser": "^1.11.5",
         "acorn": "^8.7.1",
         "acorn-import-assertions": "^1.9.0",
-        "browserslist": "^4.21.10",
+        "browserslist": "^4.14.5",
         "chrome-trace-event": "^1.0.2",
         "enhanced-resolve": "^5.15.0",
         "es-module-lexer": "^1.2.1",
@@ -21209,7 +21590,7 @@
         "neo-async": "^2.6.2",
         "schema-utils": "^3.2.0",
         "tapable": "^2.1.1",
-        "terser-webpack-plugin": "^5.3.10",
+        "terser-webpack-plugin": "^5.3.7",
         "watchpack": "^2.4.0",
         "webpack-sources": "^3.2.3"
       },
@@ -21460,12 +21841,6 @@
         "node": ">=4.0"
       }
     },
-    "node_modules/webpack/node_modules/json-parse-even-better-errors": {
-      "version": "2.3.1",
-      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
-      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
-      "dev": true
-    },
     "node_modules/webpack/node_modules/json-schema-traverse": {
       "version": "0.4.1",
       "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
@@ -21562,16 +21937,16 @@
       "dev": true
     },
     "node_modules/which-typed-array": {
-      "version": "1.1.15",
-      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.15.tgz",
-      "integrity": "sha512-oV0jmFtUky6CXfkqehVvBP/LSWJ2sy4vWMioiENyJLePrBO/yKyV9OyJySfAKosh+RYkIl5zJCNZ8/4JncrpdA==",
+      "version": "1.1.13",
+      "resolved": "https://registry.npmjs.org/which-typed-array/-/which-typed-array-1.1.13.tgz",
+      "integrity": "sha512-P5Nra0qjSncduVPEAr7xhoF5guty49ArDTwzJ/yNuPIbZppyRxFQsRCWrocxIY+CnMVG+qfbU2FmDKyvSGClow==",
       "dev": true,
       "dependencies": {
-        "available-typed-arrays": "^1.0.7",
-        "call-bind": "^1.0.7",
+        "available-typed-arrays": "^1.0.5",
+        "call-bind": "^1.0.4",
         "for-each": "^0.3.3",
         "gopd": "^1.0.1",
-        "has-tostringtag": "^1.0.2"
+        "has-tostringtag": "^1.0.0"
       },
       "engines": {
         "node": ">= 0.4"
@@ -21598,9 +21973,9 @@
       "dev": true
     },
     "node_modules/winston": {
-      "version": "3.12.0",
-      "resolved": "https://registry.npmjs.org/winston/-/winston-3.12.0.tgz",
-      "integrity": "sha512-OwbxKaOlESDi01mC9rkM0dQqQt2I8DAUMRLZ/HpbwvDXm85IryEHgoogy5fziQy38PntgZsLlhAYHz//UPHZ5w==",
+      "version": "3.11.0",
+      "resolved": "https://registry.npmjs.org/winston/-/winston-3.11.0.tgz",
+      "integrity": "sha512-L3yR6/MzZAOl0DsysUXHVjOwv8mKZ71TrA/41EIduGpOOV5LQVodqN+QdQ6BS6PJ/RdIshZhq84P/fStEZkk7g==",
       "dependencies": {
         "@colors/colors": "^1.6.0",
         "@dabh/diagnostics": "^2.0.2",
@@ -21612,16 +21987,16 @@
         "safe-stable-stringify": "^2.3.1",
         "stack-trace": "0.0.x",
         "triple-beam": "^1.3.0",
-        "winston-transport": "^4.7.0"
+        "winston-transport": "^4.5.0"
       },
       "engines": {
         "node": ">= 12.0.0"
       }
     },
     "node_modules/winston-transport": {
-      "version": "4.7.0",
-      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.7.0.tgz",
-      "integrity": "sha512-ajBj65K5I7denzer2IYW6+2bNIVqLGDHqDw3Ow8Ohh+vdW+rv4MZ6eiDvHoKhfJFZ2auyN8byXieDDJ96ViONg==",
+      "version": "4.6.0",
+      "resolved": "https://registry.npmjs.org/winston-transport/-/winston-transport-4.6.0.tgz",
+      "integrity": "sha512-wbBA9PbPAHxKiygo7ub7BYRiKxms0tpfU2ljtWzb3SjRjv5yl6Ozuy/TkXf00HTAt+Uylo3gSkNwzc4ME0wiIg==",
       "dependencies": {
         "logform": "^2.3.2",
         "readable-stream": "^3.6.0",
@@ -21648,16 +22023,19 @@
       }
     },
     "node_modules/wrap-ansi": {
-      "version": "6.2.0",
-      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-6.2.0.tgz",
-      "integrity": "sha512-r6lPcBGxZXlIcymEu7InxDMhdW0KDxpLgoFLcguasxCaJ/SOIZwINatK9KY/tf+ZrlywOKU0UDj3ATXUBfxJXA==",
+      "version": "7.0.0",
+      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
+      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
       "dependencies": {
         "ansi-styles": "^4.0.0",
         "string-width": "^4.1.0",
         "strip-ansi": "^6.0.0"
       },
       "engines": {
-        "node": ">=8"
+        "node": ">=10"
+      },
+      "funding": {
+        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
       }
     },
     "node_modules/wrap-ansi-cjs": {
@@ -21827,12 +22205,9 @@
       "dev": true
     },
     "node_modules/yaml": {
-      "version": "2.4.1",
-      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.4.1.tgz",
-      "integrity": "sha512-pIXzoImaqmfOrL7teGUBt/T7ZDnyeGBWyXQBvOVhLkWLN37GXv8NMLK406UY6dS51JfcQHsmcW5cJ441bHg6Lg==",
-      "bin": {
-        "yaml": "bin.mjs"
-      },
+      "version": "2.3.4",
+      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.3.4.tgz",
+      "integrity": "sha512-8aAvwVUSHpfEqTQ4w/KMlf3HcRdt50E5ODIQJBw1fQ5RL34xabzxtUlzTXVqc4rkZsPbvrXKWnABCD7kWSmocA==",
       "engines": {
         "node": ">= 14"
       }
@@ -21862,6 +22237,28 @@
         "node": ">=12"
       }
     },
+    "node_modules/yargs/node_modules/cliui": {
+      "version": "8.0.1",
+      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
+      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
+      "dependencies": {
+        "string-width": "^4.2.0",
+        "strip-ansi": "^6.0.1",
+        "wrap-ansi": "^7.0.0"
+      },
+      "engines": {
+        "node": ">=12"
+      }
+    },
+    "node_modules/yn": {
+      "version": "3.1.1",
+      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
+      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==",
+      "dev": true,
+      "engines": {
+        "node": ">=6"
+      }
+    },
     "node_modules/yocto-queue": {
       "version": "0.1.0",
       "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
@@ -21907,9 +22304,9 @@
       }
     },
     "node_modules/zone.js": {
-      "version": "0.14.4",
-      "resolved": "https://registry.npmjs.org/zone.js/-/zone.js-0.14.4.tgz",
-      "integrity": "sha512-NtTUvIlNELez7Q1DzKVIFZBzNb646boQMgpATo9z3Ftuu/gWvzxCW7jdjcUDoRGxRikrhVHB/zLXh1hxeJawvw==",
+      "version": "0.14.3",
+      "resolved": "https://registry.npmjs.org/zone.js/-/zone.js-0.14.3.tgz",
+      "integrity": "sha512-jYoNqF046Q+JfcZSItRSt+oXFcpXL88yq7XAZjb/NKTS7w2hHpKjRJ3VlFD1k75wMaRRXNUt5vrZVlygiMyHbA==",
       "dependencies": {
         "tslib": "^2.3.0"
       }
diff --git a/package.json b/package.json
index 7c5f1ae01..fbbcfa4d5 100644
--- a/package.json
+++ b/package.json
@@ -11,64 +11,75 @@
     "build:test": "ng build --configuration=test",
     "test": "bash ./scripts/test.sh",
     "test:ci": "bash ./scripts/test.sh --watch=false --browsers=ChromeHeadlessCustom",
+    "libtest": "cd lib && npm test",
+    "libtest:ci": "cd lib && npm ci && npm test && npm run coverage",
     "lint": "eslint --ext ts ./ --quiet",
     "e2e": "bash ./e2e/e2e.sh"
   },
   "private": true,
   "dependencies": {
-    "@angular/animations": "^17.2.3",
-    "@angular/common": "^17.2.3",
-    "@angular/core": "^17.2.3",
-    "@angular/forms": "^17.2.3",
-    "@angular/platform-browser": "^17.2.3",
-    "@angular/platform-browser-dynamic": "^17.2.3",
-    "@angular/router": "^17.2.3",
+    "@angular/animations": "^17.1.0",
+    "@angular/common": "^17.1.0",
+    "@angular/core": "^17.1.0",
+    "@angular/fire": "^17.0.1",
+    "@angular/forms": "^17.1.0",
+    "@angular/platform-browser": "^17.1.0",
+    "@angular/platform-browser-dynamic": "^17.1.0",
+    "@angular/router": "^17.1.0",
     "@creativebulma/bulma-tooltip": "^1.2.0",
+    "@everyboard/lib": "file:lib",
     "@fortawesome/angular-fontawesome": "^0.14.1",
     "@fortawesome/fontawesome-svg-core": "^6.5.1",
     "@fortawesome/free-brands-svg-icons": "^6.5.1",
     "@fortawesome/free-solid-svg-icons": "^6.5.1",
     "async-mutex": "^0.4.1",
     "bulma": "^0.9.4",
-    "bulma-toast": "^2.4.4",
+    "bulma-toast": "^2.4.3",
     "bulmaswatch": "^0.8.1",
-    "core-js": "^3.36.0",
+    "core-js": "^3.35.0",
     "eslint-plugin-jasmine": "^4.1.3",
-    "firebase": "^10.8.1",
-    "firebase-tools": "^13.4.0",
+    "firebase": "^10.7.1",
+    "firebase-tools": "^13.0.3",
     "rxjs": "^7.8.1",
-    "zone.js": "^0.14.4"
+    "zone.js": "^0.14.3"
   },
   "devDependencies": {
-    "@angular-devkit/build-angular": "^17.2.2",
-    "@angular-eslint/builder": "^17.2.1",
-    "@angular-eslint/eslint-plugin": "^17.2.1",
-    "@angular-eslint/eslint-plugin-template": "^17.2.1",
-    "@angular-eslint/schematics": "^17.2.1",
-    "@angular-eslint/template-parser": "^17.2.1",
-    "@angular/cli": "^17.2.2",
-    "@angular/compiler": "^17.2.3",
-    "@angular/compiler-cli": "^17.2.3",
-    "@angular/localize": "^17.2.3",
+    "@angular-devkit/build-angular": "^17.1.0",
+    "@angular-eslint/builder": "^17.2.0",
+    "@angular-eslint/eslint-plugin": "^17.2.0",
+    "@angular-eslint/eslint-plugin-template": "^17.2.0",
+    "@angular-eslint/schematics": "^17.2.0",
+    "@angular-eslint/template-parser": "^17.2.0",
+    "@angular/cli": "^17.1.0",
+    "@angular/compiler": "^17.1.0",
+    "@angular/compiler-cli": "^17.1.0",
+    "@angular/localize": "^17.1.0",
     "@types/jasmine": "^5.1.4",
-    "angular-cli-ghpages": "^1.0.6",
+    "@typescript-eslint/eslint-plugin": "^6.19.0",
+    "@typescript-eslint/parser": "^6.19.0",
+    "angular-cli-ghpages": "^1.0.7",
     "angular-eslint": "^0.0.1-alpha.0",
-    "eslint": "^8.57.0",
+    "eslint": "^8.56.0",
     "eslint-config-google": "^0.14.0",
     "eslint-config-standard": "^17.1.0",
     "eslint-plugin-import": "^2.29.1",
     "eslint-plugin-node": "^11.1.0",
     "eslint-plugin-promise": "^6.1.1",
-    "karma": "^6.4.3",
+    "jasmine": "^5.1.0",
+    "karma": "^6.4.2",
     "karma-chrome-launcher": "^3.2.0",
     "karma-coverage": "^2.2.1",
     "karma-jasmine": "^5.1.0",
     "karma-jasmine-html-reporter": "^2.1.0",
-    "karma-time-stats-reporter": "^0.1.0",
     "netlify-plugin-chromium": "^1.1.4",
+    "nyc": "^15.1.0",
     "protractor": "^7.0.0",
-    "sass": "^1.71.1",
-    "typescript": "^5.3.3",
-    "typescript-eslint": "^7.1.1"
+    "sass": "^1.70.0",
+    "ts-node": "^10.9.1",
+    "typescript": "^5.3.3"
+  },
+  "overrides": {
+	  "minimatch": "5.1.2",
+	  "glob": "8.1.0"
   }
 }
diff --git a/src/app/app.module.spec.ts b/src/app/app.module.spec.ts
index dab9e9ffd..8756b193b 100644
--- a/src/app/app.module.spec.ts
+++ b/src/app/app.module.spec.ts
@@ -16,11 +16,11 @@ import { WelcomeComponent } from './components/normal-component/welcome/welcome.
 import { LocalGameWrapperComponent } from './components/wrapper-components/local-game-wrapper/local-game-wrapper.component';
 import { OnlineGameWrapperComponent } from './components/wrapper-components/online-game-wrapper/online-game-wrapper.component';
 import { TutorialGameWrapperComponent } from './components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component';
-import { MGPOptional } from './utils/MGPOptional';
-import { Utils } from './utils/utils';
+import { MGPOptional, Utils } from '@everyboard/lib';

-import * as Firestore from '@firebase/firestore';
-import * as Auth from '@firebase/auth';
+import * as Firestore from '@angular/fire/firestore';
+import * as FireAuth from '@angular/fire/auth';
+import { TestBed } from '@angular/core/testing';
 import { AccountComponent } from './components/normal-component/account/account.component';
 import { setupEmulators } from './utils/tests/TestUtils.spec';

@@ -76,8 +76,8 @@ export function findMatchingRoute(url: string): MGPOptional<Route> {
 describe('App module', () => {
     it('should provide all necessary firebase components', async() => {
         await setupEmulators();
-        expect(Firestore.getFirestore()).toBeDefined();
-        expect(Auth.getAuth()).toBeDefined();
+        expect(TestBed.inject(FireAuth.Auth)).toBeDefined();
+        expect(TestBed.inject(Firestore.Firestore)).toBeDefined();
     });
     it('router should map all urls to their expected components', () => {
         for (const [url, expectedComponent] of routingSpecification) {
diff --git a/src/app/app.module.ts b/src/app/app.module.ts
index ab6dfa86f..cc07d5eea 100644
--- a/src/app/app.module.ts
+++ b/src/app/app.module.ts
@@ -1,13 +1,13 @@
 import { BrowserModule } from '@angular/platform-browser';
-import { LOCALE_ID, NgModule } from '@angular/core';
+import { LOCALE_ID, ModuleWithProviders, NgModule } from '@angular/core';
 import { registerLocaleData } from '@angular/common';
 import { ReactiveFormsModule, FormsModule } from '@angular/forms';
 import { HttpClientModule } from '@angular/common/http';
 import { RouterModule, Route } from '@angular/router';
 import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
-import * as Firebase from '@firebase/app';
-import * as Firestore from '@firebase/firestore';
-import * as Auth from '@firebase/auth';
+import * as Firebase from '@angular/fire/app';
+import * as Firestore from '@angular/fire/firestore';
+import * as Auth from '@angular/fire/auth';
 import localeFr from '@angular/common/locales/fr';

 import { FontAwesomeModule } from '@fortawesome/angular-fontawesome';
@@ -115,7 +115,6 @@ import { TrexoHalfPieceComponent } from './games/trexo/trexo-half-piece.componen
 import { YinshComponent } from './games/yinsh/yinsh.component';

 import { environment } from 'src/environments/environment';
-import { LocaleUtils } from './utils/LocaleUtils';

 import { VerifiedAccountGuard } from './guard/verified-account.guard';
 import { ExclusiveOnlineGameGuard } from './guard/exclusive-online-game-guard';
@@ -129,6 +128,7 @@ import { FirestoreTimePipe } from './pipes-and-directives/firestore-time.pipe';
 import { ToggleVisibilityDirective } from './pipes-and-directives/toggle-visibility.directive';
 import { RulesConfigurationComponent } from './components/wrapper-components/rules-configuration/rules-configuration.component';
 import { BlankGobanComponent } from './components/game-components/goban-game-component/blank-goban/blank-goban.component';
+import { LocaleUtils } from './utils/LocaleUtils';

 registerLocaleData(localeFr);

@@ -154,6 +154,36 @@ export const routes: Route[] = [
     { path: '**', component: NotFoundComponent },
 ];

+export class FirebaseProviders {
+
+    public static app(): ModuleWithProviders<Firebase.FirebaseAppModule> {
+        return Firebase.provideFirebaseApp(() => {
+            return Firebase.initializeApp(environment.firebaseConfig);
+        });
+    }
+    public static firestore(): ModuleWithProviders<Firestore.FirestoreModule> {
+        return Firestore.provideFirestore(() => {
+            const firestore: Firestore.Firestore = Firestore.getFirestore();
+            // eslint-disable-next-line dot-notation
+            const host: string = firestore.toJSON()['settings'].host;
+            if (environment.useEmulators && host !== 'localhost:8080') {
+                Firestore.connectFirestoreEmulator(firestore, 'localhost', 8080);
+            }
+            return firestore;
+        });
+    }
+    public static auth(): ModuleWithProviders<Auth.AuthModule> {
+        return Auth.provideAuth(() => {
+            const fireauth: Auth.Auth = Auth.getAuth();
+            // eslint-disable-next-line dot-notation
+            if (environment.useEmulators && fireauth.config['emulator'] == null) {
+                Auth.connectAuthEmulator(fireauth, 'http://localhost:9099', { disableWarnings: true });
+            }
+            return fireauth;
+        });
+    }
+}
+
 @NgModule({
     declarations: [
         AppComponent,
@@ -229,6 +259,9 @@ export const routes: Route[] = [
         RulesConfigurationComponent,
     ],
     imports: [
+        FirebaseProviders.app(),
+        FirebaseProviders.firestore(),
+        FirebaseProviders.auth(),
         BrowserModule,
         HttpClientModule,
         RouterModule.forRoot(routes, { useHash: false }),
@@ -249,20 +282,4 @@ export const routes: Route[] = [
     ],
     bootstrap: [AppComponent],
 })
-export class AppModule {
-
-    public constructor() {
-        Firebase.initializeApp(environment.firebaseConfig);
-        const firestore: Firestore.Firestore = Firestore.getFirestore();
-        const host: string = firestore.toJSON()['settings'].host;
-        if (environment.useEmulators && host !== 'localhost:8080') {
-            Firestore.connectFirestoreEmulator(firestore, 'localhost', 8080);
-        }
-
-        const fireauth: Auth.Auth = Auth.getAuth();
-        if (environment.useEmulators && fireauth.config['emulator'] == null) {
-            Auth.connectAuthEmulator(fireauth, 'http://localhost:9099', { disableWarnings: true });
-        }
-    }
-
-}
+export class AppModule {}
diff --git a/src/app/components/game-components/GameComponentUtils.ts b/src/app/components/game-components/GameComponentUtils.ts
index dc847f2d1..377e04160 100644
--- a/src/app/components/game-components/GameComponentUtils.ts
+++ b/src/app/components/game-components/GameComponentUtils.ts
@@ -1,7 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';

 interface Limits {
     minX: number;
diff --git a/src/app/components/game-components/game-component/GameComponent.spec.ts b/src/app/components/game-components/game-component/GameComponent.spec.ts
index 7fb8c838d..ee92f7787 100644
--- a/src/app/components/game-components/game-component/GameComponent.spec.ts
+++ b/src/app/components/game-components/game-component/GameComponent.spec.ts
@@ -1,21 +1,19 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync, tick } from '@angular/core/testing';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { ActivatedRouteStub, ComponentTestUtils, TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { JSONValue, MGPValidation, Utils } from '@everyboard/lib';
+import { ActivatedRouteStub, ComponentTestUtils, ConfigureTestingModuleUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
 import { AbstractGameComponent } from './GameComponent';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { AbaloneComponent } from 'src/app/games/abalone/abalone.component';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { JSONValue } from 'src/app/utils/utils';

 describe('GameComponent', () => {

     const activatedRouteStub: ActivatedRouteStub = new ActivatedRouteStub();

     beforeEach(fakeAsync(async() => {
-        await TestUtils.configureTestingModuleForGame(activatedRouteStub);
+        await ConfigureTestingModuleUtils.configureTestingModuleForGame(activatedRouteStub);
     }));

     it('should fail if pass() is called on a game that does not support it', fakeAsync(async() => {
@@ -28,7 +26,7 @@ describe('GameComponent', () => {
         testUtils.detectChanges();
         tick(0);

-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

         // When the player tries to pass
         const result: MGPValidation = await component.pass();
@@ -38,7 +36,7 @@ describe('GameComponent', () => {
         const errorData: JSONValue = { gameName: 'AbaloneComponent' };
         expect(result.isFailure()).toBeTrue();
         expect(result.getReason()).toEqual('GameComponent: ' + errorMessage);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledWith('GameComponent', errorMessage, errorData);
+        expect(Utils.logError).toHaveBeenCalledWith('GameComponent', errorMessage, errorData);
     }));

     for (const gameInfo of GameInfo.ALL_GAMES()) {
diff --git a/src/app/components/game-components/game-component/GameComponent.ts b/src/app/components/game-components/game-component/GameComponent.ts
index b4e09cbf9..a5746d755 100644
--- a/src/app/components/game-components/game-component/GameComponent.ts
+++ b/src/app/components/game-components/game-component/GameComponent.ts
@@ -3,22 +3,18 @@ import { ActivatedRoute } from '@angular/router';
 import { Move } from '../../../jscaip/Move';
 import { SuperRules } from '../../../jscaip/Rules';
 import { Component } from '@angular/core';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Encoder } from 'src/app/utils/Encoder';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { TutorialStep } from '../../wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { GameState } from 'src/app/jscaip/GameState';
-import { Debug, Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, Encoder, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { AI, AIOptions } from 'src/app/jscaip/AI/AI';
 import { EmptyRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { Debug } from 'src/app/utils/Debug';
+import { GameInfo } from '../../normal-component/pick-game/pick-game.component';

 abstract class BaseComponent {

@@ -174,7 +170,7 @@ export abstract class GameComponent<R extends SuperRules<M, S, C, L>,
     public async pass(): Promise<MGPValidation> {
         const gameName: string = this.constructor.name;
         const error: string = `pass() called on a game that does not redefine it`;
-        return ErrorLoggerService.logError('GameComponent', error, { gameName });
+        return Utils.logError('GameComponent', error, { gameName });
     }

     public getTurn(): number {
diff --git a/src/app/components/game-components/game-component/HexagonalGameComponent.ts b/src/app/components/game-components/game-component/HexagonalGameComponent.ts
index e2080b179..0bf8979b2 100644
--- a/src/app/components/game-components/game-component/HexagonalGameComponent.ts
+++ b/src/app/components/game-components/game-component/HexagonalGameComponent.ts
@@ -3,8 +3,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { GameState } from 'src/app/jscaip/GameState';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
 import { Move } from 'src/app/jscaip/Move';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SuperRules } from 'src/app/jscaip/Rules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { GameComponent } from './GameComponent';
 import { EmptyRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/components/game-components/game-component/TriangularGameComponent.ts b/src/app/components/game-components/game-component/TriangularGameComponent.ts
index 601d556ac..381a3c645 100644
--- a/src/app/components/game-components/game-component/TriangularGameComponent.ts
+++ b/src/app/components/game-components/game-component/TriangularGameComponent.ts
@@ -3,7 +3,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Move } from 'src/app/jscaip/Move';
 import { GameComponent } from './GameComponent';
 import { GameState } from 'src/app/jscaip/GameState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SuperRules } from 'src/app/jscaip/Rules';
 import { EmptyRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/components/game-components/game-component/clickableMethods.spec.ts b/src/app/components/game-components/game-component/clickableMethods.spec.ts
index 7ded956fa..75ebdd988 100644
--- a/src/app/components/game-components/game-component/clickableMethods.spec.ts
+++ b/src/app/components/game-components/game-component/clickableMethods.spec.ts
@@ -5,7 +5,7 @@ import { SiamMove } from 'src/app/games/siam/SiamMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction, Orthogonal } from 'src/app/jscaip/Direction';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export const clickableMethods: { [gameName: string]: { [methodName: string]: unknown[]; }; } = {
     Abalone: {
diff --git a/src/app/components/game-components/rectangular-game-component/RectangularGameComponent.ts b/src/app/components/game-components/rectangular-game-component/RectangularGameComponent.ts
index fca883ab8..3f2418ff2 100644
--- a/src/app/components/game-components/rectangular-game-component/RectangularGameComponent.ts
+++ b/src/app/components/game-components/rectangular-game-component/RectangularGameComponent.ts
@@ -2,7 +2,7 @@ import { Move } from '../../../jscaip/Move';
 import { Component } from '@angular/core';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { GameComponent } from '../game-component/GameComponent';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SuperRules } from 'src/app/jscaip/Rules';
 import { EmptyRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { ViewBox } from '../GameComponentUtils';
diff --git a/src/app/components/normal-component/chat/chat.component.ts b/src/app/components/normal-component/chat/chat.component.ts
index 9f848cd92..d324c6027 100644
--- a/src/app/components/normal-component/chat/chat.component.ts
+++ b/src/app/components/normal-component/chat/chat.component.ts
@@ -2,12 +2,12 @@ import { Component, Input, OnDestroy, ElementRef, ViewChild, OnInit, AfterViewCh
 import { ChatService } from '../../../services/ChatService';
 import { Message, MessageDocument } from '../../../domain/Message';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { Debug } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
 import { faReply, IconDefinition } from '@fortawesome/free-solid-svg-icons';
 import { FirestoreCollectionObserver } from 'src/app/dao/FirestoreCollectionObserver';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
 import { Subscription } from 'rxjs';
+import { Debug } from 'src/app/utils/Debug';
+import { Utils } from '@everyboard/lib';

 @Component({
     selector: 'app-chat',
@@ -42,7 +42,7 @@ export class ChatComponent implements OnInit, AfterViewChecked, OnDestroy {
     {
     }
     public ngOnInit(): void {
-        assert(this.chatId != null && this.chatId !== '', 'No chat to join mentionned');
+        Utils.assert(this.chatId != null && this.chatId !== '', 'No chat to join mentionned');
         this.loadChatContent();
     }
     public ngAfterViewChecked(): void {
diff --git a/src/app/components/normal-component/count-down/count-down.component.spec.ts b/src/app/components/normal-component/count-down/count-down.component.spec.ts
index 7cdd64e0c..c61e8d2af 100644
--- a/src/app/components/normal-component/count-down/count-down.component.spec.ts
+++ b/src/app/components/normal-component/count-down/count-down.component.spec.ts
@@ -1,10 +1,9 @@
 /* eslint-disable max-lines-per-function */
 import { DebugElement } from '@angular/core';
 import { fakeAsync, tick } from '@angular/core/testing';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { CountDownComponent } from './count-down.component';

 describe('CountDownComponent', () => {
@@ -24,32 +23,32 @@ describe('CountDownComponent', () => {
         it('should throw when setting chrono already started', () => {
             component.setDuration(1250);
             component.start();
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             const error: string = 'Should not set a chrono that has already been started (undefined)!';

             expect(() => component.setDuration(1250)).toThrowError('Assertion failure: ' + error);

-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+            expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
         });
     });
     describe('start', () => {
         it('should throw when starting without having been set', () => {
             const error: string = 'Should not start a chrono that has not been set!';
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             expect(() => component.start()).toThrowError('Assertion failure: ' + error);

-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+            expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
         });
         it('should throw when starting twice', () => {
             component.setDuration(1250);
             component.start();
             const error: string = 'Should not start chrono that has already been started (undefined)';
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             expect(() => component.start()).toThrowError('Assertion failure: ' + error);

-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+            expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
         });
         it('should show remaining time once set', () => {
             component.setDuration(62000);
@@ -64,11 +63,11 @@ describe('CountDownComponent', () => {
             expect(component.isStarted()).toBeTrue();
             component.stop();
             const error: string = 'Should not start a chrono that has not been set!';
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             expect(() => component.start()).toThrowError('Assertion failure: ' + error);

-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+            expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
         });
     });
     describe('pause', () => {
@@ -77,11 +76,11 @@ describe('CountDownComponent', () => {
             component.start();
             component.pause();
             const error: string = 'Should not pause already paused chrono (undefined)';
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             expect(() => component.pause()).toThrowError('Assertion failure: ' + error);

-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+            expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
         });
         it('should throw when pausing not started chrono', () => {
             spyOn(Utils, 'assert').and.callFake((b: boolean, s: string) => {throw new Error('prout');});
diff --git a/src/app/components/normal-component/count-down/count-down.component.ts b/src/app/components/normal-component/count-down/count-down.component.ts
index 60c7183f8..87efcea91 100644
--- a/src/app/components/normal-component/count-down/count-down.component.ts
+++ b/src/app/components/normal-component/count-down/count-down.component.ts
@@ -1,5 +1,6 @@
 import { Component, EventEmitter, Input, OnDestroy, Output } from '@angular/core';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
+import { Debug } from 'src/app/utils/Debug';

 @Component({
     selector: 'app-count-down',
diff --git a/src/app/components/normal-component/demo-page/demo-page.component.ts b/src/app/components/normal-component/demo-page/demo-page.component.ts
index 5a08400c1..661ccc063 100644
--- a/src/app/components/normal-component/demo-page/demo-page.component.ts
+++ b/src/app/components/normal-component/demo-page/demo-page.component.ts
@@ -2,14 +2,13 @@ import { Component } from '@angular/core';
 import { FormControl } from '@angular/forms';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Move } from 'src/app/jscaip/Move';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { TutorialStep } from '../../wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { GameInfo } from '../pick-game/pick-game.component';
 import { AbstractNode } from 'src/app/jscaip/AI/GameNode';
 import { AbstractRules } from 'src/app/jscaip/Rules';
 import { DemoNodeInfo } from '../../wrapper-components/demo-card-wrapper/demo-card-wrapper.component';
 import { GameState } from 'src/app/jscaip/GameState';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';

 @Component({
diff --git a/src/app/components/normal-component/header/header.component.spec.ts b/src/app/components/normal-component/header/header.component.spec.ts
index c71119502..2fe5e4030 100644
--- a/src/app/components/normal-component/header/header.component.spec.ts
+++ b/src/app/components/normal-component/header/header.component.spec.ts
@@ -10,9 +10,8 @@ import { AuthUser, ConnectedUserService } from 'src/app/services/ConnectedUserSe
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
 import { CurrentGameServiceMock } from 'src/app/services/tests/CurrentGameService.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { expectValidRoutingLink, prepareUnsubscribeCheck, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Utils } from 'src/app/utils/utils';
 import { AccountComponent } from '../account/account.component';
 import { HeaderComponent } from './header.component';

diff --git a/src/app/components/normal-component/header/header.component.ts b/src/app/components/normal-component/header/header.component.ts
index bbbbd0f7b..be08a7cd5 100644
--- a/src/app/components/normal-component/header/header.component.ts
+++ b/src/app/components/normal-component/header/header.component.ts
@@ -5,7 +5,7 @@ import { Subscription } from 'rxjs';
 import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserService';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
 import { UserService } from 'src/app/services/UserService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { CurrentGame } from 'src/app/domain/User';

 @Component({
diff --git a/src/app/components/normal-component/lobby/lobby.component.spec.ts b/src/app/components/normal-component/lobby/lobby.component.spec.ts
index 483dbd0e8..dc199b809 100644
--- a/src/app/components/normal-component/lobby/lobby.component.spec.ts
+++ b/src/app/components/normal-component/lobby/lobby.component.spec.ts
@@ -7,8 +7,7 @@ import { ActivePartsService } from 'src/app/services/ActivePartsService';
 import { GameActionFailure } from 'src/app/services/ConnectedUserService';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
 import { expectValidRouting, prepareUnsubscribeCheck, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { PartMocks } from 'src/app/domain/PartMocks.spec';
 import { PartDocument } from 'src/app/domain/Part';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
diff --git a/src/app/components/normal-component/lobby/lobby.component.ts b/src/app/components/normal-component/lobby/lobby.component.ts
index b290ea4b6..16730e2e6 100644
--- a/src/app/components/normal-component/lobby/lobby.component.ts
+++ b/src/app/components/normal-component/lobby/lobby.component.ts
@@ -1,14 +1,13 @@
 import { Component, OnDestroy, OnInit } from '@angular/core';
 import { Router } from '@angular/router';
-import { Debug } from 'src/app/utils/utils';
 import { ActivePartsService } from 'src/app/services/ActivePartsService';
 import { PartDocument } from 'src/app/domain/Part';
 import { CurrentGame } from 'src/app/domain/User';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { Subscription } from 'rxjs';
+import { Debug } from 'src/app/utils/Debug';

 type Tab = 'games' | 'create' | 'chat';

diff --git a/src/app/components/normal-component/login/login.component.spec.ts b/src/app/components/normal-component/login/login.component.spec.ts
index 0d83446ce..e07570ac3 100644
--- a/src/app/components/normal-component/login/login.component.spec.ts
+++ b/src/app/components/normal-component/login/login.component.spec.ts
@@ -4,7 +4,7 @@ import { LoginComponent } from './login.component';
 import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserService';
 import { expectValidRouting, prepareUnsubscribeCheck, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { Router } from '@angular/router';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Observable, ReplaySubject } from 'rxjs';
 import { LobbyComponent } from '../lobby/lobby.component';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
diff --git a/src/app/components/normal-component/login/login.component.ts b/src/app/components/normal-component/login/login.component.ts
index b04635275..92de13db9 100644
--- a/src/app/components/normal-component/login/login.component.ts
+++ b/src/app/components/normal-component/login/login.component.ts
@@ -2,7 +2,7 @@ import { Component, OnDestroy, OnInit } from '@angular/core';
 import { Router } from '@angular/router';
 import { FormGroup, FormControl } from '@angular/forms';
 import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { faEye, IconDefinition } from '@fortawesome/free-solid-svg-icons';
 import { Subscription } from 'rxjs';

diff --git a/src/app/components/normal-component/online-game-creation/online-game-creation.component.spec.ts b/src/app/components/normal-component/online-game-creation/online-game-creation.component.spec.ts
index a60d1ffb5..273355583 100644
--- a/src/app/components/normal-component/online-game-creation/online-game-creation.component.spec.ts
+++ b/src/app/components/normal-component/online-game-creation/online-game-creation.component.spec.ts
@@ -4,7 +4,7 @@ import { Router } from '@angular/router';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { ActivatedRouteStub, expectValidRouting, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { GameWrapperMessages } from '../../wrapper-components/GameWrapper';
 import { OnlineGameWrapperComponent } from '../../wrapper-components/online-game-wrapper/online-game-wrapper.component';
diff --git a/src/app/components/normal-component/online-game-creation/online-game-creation.component.ts b/src/app/components/normal-component/online-game-creation/online-game-creation.component.ts
index 99fe07b86..4da7b9096 100644
--- a/src/app/components/normal-component/online-game-creation/online-game-creation.component.ts
+++ b/src/app/components/normal-component/online-game-creation/online-game-creation.component.ts
@@ -3,12 +3,9 @@ import { ActivatedRoute, Router } from '@angular/router';
 import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserService';
 import { GameService } from 'src/app/services/GameService';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameInfo } from '../pick-game/pick-game.component';
 import { GameWrapperMessages } from '../../wrapper-components/GameWrapper';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';

 @Component({
@@ -32,7 +29,7 @@ export class OnlineGameCreationComponent implements OnInit {
     }
     private async createGameAndRedirectOrShowError(game: string): Promise<boolean> {
         const authUser: AuthUser = this.connectedUserService.user.get();
-        assert(authUser.isConnected(), 'User must be connected and have a username to reach this page');
+        Utils.assert(authUser.isConnected(), 'User must be connected and have a username to reach this page');
         if (this.gameExists(game) === false) {
             await this.router.navigate(['/notFound', GameWrapperMessages.NO_MATCHING_GAME(game)], { skipLocationChange: true });
             return false;
diff --git a/src/app/components/normal-component/online-game-selection/online-game-selection.component.spec.ts b/src/app/components/normal-component/online-game-selection/online-game-selection.component.spec.ts
index d354af99f..c02756ffd 100644
--- a/src/app/components/normal-component/online-game-selection/online-game-selection.component.spec.ts
+++ b/src/app/components/normal-component/online-game-selection/online-game-selection.component.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { Router } from '@angular/router';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { expectValidRouting, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { OnlineGameCreationComponent } from '../online-game-creation/online-game-creation.component';
 import { OnlineGameSelectionComponent } from './online-game-selection.component';
diff --git a/src/app/components/normal-component/online-game-selection/online-game-selection.component.ts b/src/app/components/normal-component/online-game-selection/online-game-selection.component.ts
index e1105089d..4ac4273c7 100644
--- a/src/app/components/normal-component/online-game-selection/online-game-selection.component.ts
+++ b/src/app/components/normal-component/online-game-selection/online-game-selection.component.ts
@@ -2,7 +2,7 @@ import { Component } from '@angular/core';
 import { Router } from '@angular/router';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';

 @Component({
     selector: 'app-online-game-selection',
diff --git a/src/app/components/normal-component/pick-game/pick-game.component.ts b/src/app/components/normal-component/pick-game/pick-game.component.ts
index 9edbe7ced..ce589549d 100644
--- a/src/app/components/normal-component/pick-game/pick-game.component.ts
+++ b/src/app/components/normal-component/pick-game/pick-game.component.ts
@@ -135,9 +135,8 @@ import { AbstractRules } from 'src/app/jscaip/Rules';
 import { Localized } from 'src/app/utils/LocaleUtils';
 import { Tutorial } from '../../wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { RulesConfigDescription } from '../../wrapper-components/rules-configuration/RulesConfigDescription';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';

 class GameDescription {

diff --git a/src/app/components/normal-component/register/register.component.spec.ts b/src/app/components/normal-component/register/register.component.spec.ts
index a06be701e..dd6d0fd99 100644
--- a/src/app/components/normal-component/register/register.component.spec.ts
+++ b/src/app/components/normal-component/register/register.component.spec.ts
@@ -2,12 +2,11 @@
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { Router } from '@angular/router';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPValidation } from '@everyboard/lib';
 import { expectValidRouting, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { RegisterComponent } from './register.component';
 import { VerifyAccountComponent } from '../verify-account/verify-account.component';
-import * as FireAuth from '@firebase/auth';
+import * as FireAuth from '@angular/fire/auth';

 describe('RegisterComponent', () => {
     let testUtils: SimpleComponentTestUtils<RegisterComponent>;
diff --git a/src/app/components/normal-component/register/register.component.ts b/src/app/components/normal-component/register/register.component.ts
index a44f63a66..b5cddf694 100644
--- a/src/app/components/normal-component/register/register.component.ts
+++ b/src/app/components/normal-component/register/register.component.ts
@@ -2,10 +2,9 @@ import { Component } from '@angular/core';
 import { FormGroup, FormControl } from '@angular/forms';
 import { Router } from '@angular/router';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPValidation } from '@everyboard/lib';
 import { faEye, IconDefinition } from '@fortawesome/free-solid-svg-icons';
-import * as FireAuth from '@firebase/auth';
+import * as FireAuth from '@angular/fire/auth';

 @Component({
     selector: 'app-register',
diff --git a/src/app/components/normal-component/reset-password/reset-password.component.spec.ts b/src/app/components/normal-component/reset-password/reset-password.component.spec.ts
index ae4334dc9..8210b726c 100644
--- a/src/app/components/normal-component/reset-password/reset-password.component.spec.ts
+++ b/src/app/components/normal-component/reset-password/reset-password.component.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { ResetPasswordComponent } from './reset-password.component';

diff --git a/src/app/components/normal-component/reset-password/reset-password.component.ts b/src/app/components/normal-component/reset-password/reset-password.component.ts
index 50dca9294..000c6fa0c 100644
--- a/src/app/components/normal-component/reset-password/reset-password.component.ts
+++ b/src/app/components/normal-component/reset-password/reset-password.component.ts
@@ -1,8 +1,6 @@
 import { Component } from '@angular/core';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { assert } from 'src/app/utils/assert';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';

 @Component({
     selector: 'app-reset-password',
@@ -17,7 +15,7 @@ export class ResetPasswordComponent {
     public email: string = '';

     public async resetPassword(): Promise<void> {
-        assert(this.email !== '', 'No email was entered, but it should not be possible to submit the form then!');
+        Utils.assert(this.email !== '', 'No email was entered, but it should not be possible to submit the form then!');
         this.errorMessage = MGPOptional.empty();
         this.success = false;
         const result: MGPValidation = await this.connectedUserService.sendPasswordResetEmail(this.email);
diff --git a/src/app/components/normal-component/settings/settings.component.spec.ts b/src/app/components/normal-component/settings/settings.component.spec.ts
index f08894fde..0934ca4c9 100644
--- a/src/app/components/normal-component/settings/settings.component.spec.ts
+++ b/src/app/components/normal-component/settings/settings.component.spec.ts
@@ -1,10 +1,10 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { UserSettingsService } from 'src/app/services/UserSettingsService';
-import { LocaleUtils } from 'src/app/utils/LocaleUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { SettingsComponent } from './settings.component';
+import { LocaleUtils } from 'src/app/utils/LocaleUtils';

 describe('SettingsComponent', () => {

diff --git a/src/app/components/normal-component/verify-account/verify-account.component.spec.ts b/src/app/components/normal-component/verify-account/verify-account.component.spec.ts
index c2fe4e16f..7d1eee205 100644
--- a/src/app/components/normal-component/verify-account/verify-account.component.spec.ts
+++ b/src/app/components/normal-component/verify-account/verify-account.component.spec.ts
@@ -4,9 +4,8 @@ import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserSe
 import { expectValidRouting, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { VerifyAccountComponent } from './verify-account.component';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Router } from '@angular/router';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { LobbyComponent } from '../lobby/lobby.component';

 describe('VerifyAccountComponent', () => {
diff --git a/src/app/components/normal-component/verify-account/verify-account.component.ts b/src/app/components/normal-component/verify-account/verify-account.component.ts
index a52b9d1a6..be06b4f93 100644
--- a/src/app/components/normal-component/verify-account/verify-account.component.ts
+++ b/src/app/components/normal-component/verify-account/verify-account.component.ts
@@ -3,7 +3,7 @@ import { FormControl, FormGroup } from '@angular/forms';
 import { Router } from '@angular/router';
 import { Subscription } from 'rxjs';
 import { ConnectedUserService, AuthUser } from 'src/app/services/ConnectedUserService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';

 /**
  * Component to verify an account.
diff --git a/src/app/components/normal-component/welcome/welcome.component.spec.ts b/src/app/components/normal-component/welcome/welcome.component.spec.ts
index 47c3d224d..6aba16992 100644
--- a/src/app/components/normal-component/welcome/welcome.component.spec.ts
+++ b/src/app/components/normal-component/welcome/welcome.component.spec.ts
@@ -3,7 +3,7 @@ import { DebugElement } from '@angular/core';
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { Router } from '@angular/router';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { expectValidRouting, expectValidRoutingLink, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { LocalGameWrapperComponent } from '../../wrapper-components/local-game-wrapper/local-game-wrapper.component';
 import { TutorialGameWrapperComponent } from '../../wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component';
diff --git a/src/app/components/normal-component/welcome/welcome.component.ts b/src/app/components/normal-component/welcome/welcome.component.ts
index 93e143396..9797cc74e 100644
--- a/src/app/components/normal-component/welcome/welcome.component.ts
+++ b/src/app/components/normal-component/welcome/welcome.component.ts
@@ -3,10 +3,9 @@ import { Router } from '@angular/router';
 import { ThemeService } from 'src/app/services/ThemeService';
 import { GameInfo } from '../pick-game/pick-game.component';
 import { faNetworkWired, faDesktop, faBookOpen, IconDefinition } from '@fortawesome/free-solid-svg-icons';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';

 @Component({
     selector: 'app-welcome',
diff --git a/src/app/components/wrapper-components/GameWrapper.ts b/src/app/components/wrapper-components/GameWrapper.ts
index c0f124fa1..437f137ce 100644
--- a/src/app/components/wrapper-components/GameWrapper.ts
+++ b/src/app/components/wrapper-components/GameWrapper.ts
@@ -2,16 +2,12 @@ import { Component, ComponentRef, Type, ViewChild, ViewContainerRef } from '@ang
 import { ActivatedRoute, Router } from '@angular/router';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
 import { Move } from '../../jscaip/Move';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
+import { Comparable, MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameInfo } from '../normal-component/pick-game/pick-game.component';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Localized } from 'src/app/utils/LocaleUtils';
 import { AbstractGameComponent, BaseWrapperComponent } from '../game-components/game-component/GameComponent';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { Comparable } from 'src/app/utils/Comparable';
 import { RulesConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
 import { RulesConfigDescription } from './rules-configuration/RulesConfigDescription';

diff --git a/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.spec.ts b/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.spec.ts
index e49b68235..13c0662b1 100644
--- a/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.spec.ts
+++ b/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.spec.ts
@@ -8,14 +8,13 @@ import { P4Move } from 'src/app/games/p4/P4Move';
 import { P4State } from 'src/app/games/p4/P4State';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { AbstractRules } from 'src/app/jscaip/Rules';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { DemoCardWrapperComponent, DemoNodeInfo } from './demo-card-wrapper.component';
 import { RulesConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { AbstractGameComponent } from '../../game-components/game-component/GameComponent';
-import { Utils } from 'src/app/utils/utils';
 import { TutorialGameWrapperMessages } from '../tutorial-game-wrapper/tutorial-game-wrapper.component';

 describe('DemoCardComponent', () => {
diff --git a/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.ts b/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.ts
index 493282f04..1e867f7ae 100644
--- a/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.ts
+++ b/src/app/components/wrapper-components/demo-card-wrapper/demo-card-wrapper.component.ts
@@ -1,15 +1,13 @@
 import { AfterViewInit, ChangeDetectorRef, Component, Input, OnChanges, SimpleChanges, ViewChild, ViewContainerRef } from '@angular/core';
-import { AbstractNode } from 'src/app/jscaip/AI/GameNode';
-import { Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameWrapper } from '../../wrapper-components/GameWrapper';
 import { ActivatedRoute, Router } from '@angular/router';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { Move } from 'src/app/jscaip/Move';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { TutorialGameWrapperMessages } from '../tutorial-game-wrapper/tutorial-game-wrapper.component';
+import { AbstractNode } from 'src/app/jscaip/AI/GameNode';

 export type DemoNodeInfo = {
     name: string, // The name of the game
diff --git a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.spec.ts b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.spec.ts
index ac23bf09d..93e33fdcc 100644
--- a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.spec.ts
+++ b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.spec.ts
@@ -3,9 +3,7 @@ import { Router } from '@angular/router';
 import { DebugElement } from '@angular/core';
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';

-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { ComponentTestUtils, expectValidRouting } from 'src/app/utils/tests/TestUtils.spec';

 import { UserMocks } from 'src/app/domain/UserMocks.spec';
@@ -31,7 +29,6 @@ import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { P4MoveGenerator } from 'src/app/games/p4/P4MoveGenerator';
 import { P4Heuristic } from 'src/app/games/p4/P4Heuristic';
 import { P4Config, P4Rules } from 'src/app/games/p4/P4Rules';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const _: PlayerOrNone = PlayerOrNone.NONE;
@@ -342,7 +339,7 @@ describe('LocalGameWrapperComponent (game phase)', () => {
         }));

         it('Minimax proposing illegal move should log error and show it to the user', fakeAsync(async() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             // Given a board and a buggy AI (that performs an illegal move)
             const localGameWrapper: LocalGameWrapperComponent = testUtils.getWrapper() as LocalGameWrapperComponent;
             spyOn(testUtils.getGameComponent().rules, 'choose').and.returnValue(MGPFallible.failure('illegal'));
@@ -361,7 +358,7 @@ describe('LocalGameWrapperComponent (game phase)', () => {
             expect(result.isFailure()).toBeTrue();
             const errorMessage: string = 'AI chose illegal move';
             const errorData: JSONValue = { game: 'P4', name: 'Minimax', move: 'P4Move(0)', reason: 'illegal' };
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('LocalGameWrapper', errorMessage, errorData);
+            expect(Utils.logError).toHaveBeenCalledWith('LocalGameWrapper', errorMessage, errorData);
         }));

         it('should not do an AI move when the game is finished', fakeAsync(async() => {
diff --git a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.ts b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.ts
index 9c0560dba..fbf793c00 100644
--- a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.ts
+++ b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component.ts
@@ -7,19 +7,16 @@ import { AbstractNode, GameNodeStats } from 'src/app/jscaip/AI/GameNode';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
 import { GameWrapper } from 'src/app/components/wrapper-components/GameWrapper';
 import { Move } from 'src/app/jscaip/Move';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameState } from 'src/app/jscaip/GameState';
-import { SuperRules } from 'src/app/jscaip/Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { Player } from 'src/app/jscaip/Player';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { AbstractAI, AIOptions, AIStats } from 'src/app/jscaip/AI/AI';
+import { Debug } from 'src/app/utils/Debug';
 import { RulesConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
+import { AIOptions, AIStats, AbstractAI } from 'src/app/jscaip/AI/AI';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { SuperRules } from 'src/app/jscaip/Rules';

 @Component({
     selector: 'app-local-game-wrapper',
@@ -215,7 +212,7 @@ export class LocalGameWrapperComponent extends GameWrapper<string> implements Af
             return MGPValidation.SUCCESS;
         } else {
             this.messageDisplayer.criticalMessage($localize`The AI chose an illegal move! This is an unexpected situation that we logged, we will try to solve this as soon as possible. In the meantime, consider that you won!`);
-            return ErrorLoggerService.logError('LocalGameWrapper', 'AI chose illegal move', {
+            return Utils.logError('LocalGameWrapper', 'AI chose illegal move', {
                 game: this.getGameName(),
                 name: playingAI.name,
                 move: aiMove.toString(),
diff --git a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.rules-config-phase.component.spec.ts b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.rules-config-phase.component.spec.ts
index 380b4afbb..ab3dad31a 100644
--- a/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.rules-config-phase.component.spec.ts
+++ b/src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.rules-config-phase.component.spec.ts
@@ -1,5 +1,5 @@
 import { fakeAsync, TestBed } from '@angular/core/testing';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { P4Component } from 'src/app/games/p4/p4.component';
diff --git a/src/app/components/wrapper-components/online-game-wrapper/OGWCRequestManagerService.ts b/src/app/components/wrapper-components/online-game-wrapper/OGWCRequestManagerService.ts
index b0891ccd1..97d8f0755 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/OGWCRequestManagerService.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/OGWCRequestManagerService.ts
@@ -4,9 +4,7 @@ import { MinimalUser } from 'src/app/domain/MinimalUser';
 import { GameEventReply, GameEventRequest, RequestType } from 'src/app/domain/Part';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
 import { Localized } from 'src/app/utils/LocaleUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { Utils } from 'src/app/utils/utils';
+import { MGPOptional, MGPSet, Utils } from '@everyboard/lib';

 export interface RequestInfo {
     requestType: RequestType,
diff --git a/src/app/components/wrapper-components/online-game-wrapper/OGWCTimeManagerService.ts b/src/app/components/wrapper-components/online-game-wrapper/OGWCTimeManagerService.ts
index 3e44b79bf..194cb0619 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/OGWCTimeManagerService.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/OGWCTimeManagerService.ts
@@ -3,12 +3,10 @@ import { GameEventMove, GameEventAction } from '../../../domain/Part';
 import { CountDownComponent } from '../../normal-component/count-down/count-down.component';
 import { ConfigRoom } from 'src/app/domain/ConfigRoom';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { getMillisecondsElapsed, MGPOptional, Utils } from '@everyboard/lib';
 import { Timestamp } from 'firebase/firestore';
-import { getMillisecondsElapsed } from 'src/app/utils/TimeUtils';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
-import { Utils } from 'src/app/utils/utils';
+import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 /**
  * The time manager manages clocks of each player.
diff --git a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.html b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.html
index 9a022f604..1557f62c1 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.html
+++ b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.html
@@ -23,7 +23,7 @@
                    [ngClass]="getPlayerNameClass(Player.ZERO)"
                    class="player0-bg"
                    *ngIf="players[0].isPresent()">{{ players[0].get().name }}</p>
-                <p id="scoreZeroIndicator" *ngIf="currentPart !== null && gameComponent && gameComponent.scores.isPresent()" i18n>{{ gameComponent.scores.get().get(Player.ZERO) }} points</p>
+                <p id="scoreZeroIndicator" *ngIf="currentPart !== null && gameComponent && gameComponent.scores.isPresent()" i18n>{{ gameComponent.scores.get()[0] }} points</p>
                 <app-count-down #chronoZeroGlobal
                                 [dangerTimeLimit]="60*1000"
                                 [active]="(currentPart === null) ? false : currentPart.getTurn() % 2 === 0"
@@ -51,7 +51,7 @@
                    [ngClass]="getPlayerNameClass(Player.ONE)"
                    class="player1-bg"
                    *ngIf="players[1].isPresent()">{{ players[1].get().name }}</p>
-                <p id="scoreOneIndicator" *ngIf="currentPart !== null && gameComponent && gameComponent.scores.isPresent()" i18n>{{ gameComponent.scores.get().get(Player.ONE) }} points</p>
+                <p id="scoreOneIndicator" *ngIf="currentPart !== null && gameComponent && gameComponent.scores.isPresent()" i18n>{{ gameComponent.scores.get()[1] }} points</p>
                 <app-count-down #chronoOneGlobal
                                 [dangerTimeLimit]="60*1000"
                                 [active]="(currentPart === null) ? false : currentPart.getTurn() % 2 === 1"
diff --git a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.spec.ts b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.spec.ts
index 29e0bce38..8c3ef03e5 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.spec.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.spec.ts
@@ -21,7 +21,7 @@ import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { GameWrapperMessages } from '../GameWrapper';
 import { GameService } from 'src/app/services/GameService';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('OnlineGameWrapper for non-existing game', () => {

diff --git a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.ts b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.ts
index 247eeaed3..12eca6e9e 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.component.ts
@@ -12,12 +12,8 @@ import { CurrentGame } from '../../../domain/User';
 import { GameWrapper, GameWrapperMessages } from '../GameWrapper';
 import { ConfigRoom } from 'src/app/domain/ConfigRoom';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Debug, JSONValue, Utils } from 'src/app/utils/utils';
-import { AbstractRules, SuperRules } from 'src/app/jscaip/Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { JSONValue, MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameState } from 'src/app/jscaip/GameState';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
 import { Localized } from 'src/app/utils/LocaleUtils';
@@ -31,6 +27,8 @@ import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { OGWCRequestManagerService, RequestInfo } from './OGWCRequestManagerService';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { Debug } from 'src/app/utils/Debug';
+import { AbstractRules, SuperRules } from 'src/app/jscaip/Rules';

 export class OnlineGameWrapperMessages {

diff --git a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.games.component.spec.ts b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.games.component.spec.ts
index cdff73464..51510cac1 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.games.component.spec.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.games.component.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync, tick } from '@angular/core/testing';

-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { AbstractGameComponent } from '../../game-components/game-component/GameComponent';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
diff --git a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.quarto.component.spec.ts b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.quarto.component.spec.ts
index ae0822432..2e0b091fe 100644
--- a/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.quarto.component.spec.ts
+++ b/src/app/components/wrapper-components/online-game-wrapper/online-game-wrapper.quarto.component.spec.ts
@@ -2,7 +2,7 @@
 import { TestBed, fakeAsync, tick } from '@angular/core/testing';
 import { DebugElement } from '@angular/core';
 import { Router } from '@angular/router';
-import * as Firestore from '@firebase/firestore';
+import * as Firestore from '@angular/fire/firestore';
 import { Timestamp } from 'firebase/firestore';

 import { OnlineGameWrapperComponent, OnlineGameWrapperMessages } from './online-game-wrapper.component';
@@ -16,7 +16,7 @@ import { UserDAO } from 'src/app/dao/UserDAO';
 import { QuartoMove } from 'src/app/games/quarto/QuartoMove';
 import { QuartoPiece } from 'src/app/games/quarto/QuartoPiece';
 import { Action, MGPResult, Part, Reply, RequestType } from 'src/app/domain/Part';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { JSONValue, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { CurrentGame, User } from 'src/app/domain/User';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
@@ -24,9 +24,7 @@ import { QuartoComponent } from 'src/app/games/quarto/quarto.component';
 import { ComponentTestUtils, expectValidRouting } from 'src/app/utils/tests/TestUtils.spec';
 import { AuthUser } from 'src/app/services/ConnectedUserService';
 import { GameWrapperMessages } from '../GameWrapper';
-import { JSONValue, Utils } from 'src/app/utils/utils';
 import { GameService } from 'src/app/services/GameService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { NextGameLoadingComponent } from '../../normal-component/next-game-loading/next-game-loading.component';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { PartCreationComponent } from '../part-creation/part-creation.component';
diff --git a/src/app/components/wrapper-components/part-creation/part-creation.component.spec.ts b/src/app/components/wrapper-components/part-creation/part-creation.component.spec.ts
index b8c0efd67..96fc5f9b7 100644
--- a/src/app/components/wrapper-components/part-creation/part-creation.component.spec.ts
+++ b/src/app/components/wrapper-components/part-creation/part-creation.component.spec.ts
@@ -10,7 +10,6 @@ import { LobbyComponent } from '../../normal-component/lobby/lobby.component';
 import { ConfigRoomService } from 'src/app/services/ConfigRoomService';
 import { GameService } from 'src/app/services/GameService';
 import { ChatService } from 'src/app/services/ChatService';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { AuthUser, ConnectedUserService } from 'src/app/services/ConnectedUserService';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
@@ -20,10 +19,8 @@ import { PartDAO } from 'src/app/dao/PartDAO';
 import { ChatDAO } from 'src/app/dao/ChatDAO';
 import { UserDAO } from 'src/app/dao/UserDAO';

-import { ActivatedRouteStub } from 'src/app/utils/tests/TestUtils.spec';
-import { expectValidRouting, prepareUnsubscribeCheck, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { ActivatedRouteStub, expectValidRouting, prepareUnsubscribeCheck, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { MGPOptional, Utils } from '@everyboard/lib';

 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
 import { FirstPlayer, PartStatus, PartType, ConfigRoom } from 'src/app/domain/ConfigRoom';
@@ -288,7 +285,7 @@ describe('PartCreationComponent', () => {
         });
         describe('Candidate/ChosenOpponent removal', () => {
             it('should deselect candidate, remove it, and call logError when a candidate is removed from db', fakeAsync(async() => {
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
                 // Given a part with a candidate that has been chosen
                 awaitComponentInitialization();
                 await mockCandidateArrival();
@@ -304,7 +301,7 @@ describe('PartCreationComponent', () => {

                 // Then logError has been called as this is an unusual situation
                 const error: string = 'found no user while observing ' + UserMocks.OPPONENT_MINIMAL_USER.id + ' !';
-                expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('PartCreationComponent', error);
+                expect(Utils.logError).toHaveBeenCalledOnceWith('PartCreationComponent', error);
                 // and the candidate has been deselected
                 expectElementNotToExist('#selected_' + UserMocks.OPPONENT.username);
                 // and the candidate has been removed from the lobby
diff --git a/src/app/components/wrapper-components/part-creation/part-creation.component.ts b/src/app/components/wrapper-components/part-creation/part-creation.component.ts
index dc8bdd779..fdbb63647 100644
--- a/src/app/components/wrapper-components/part-creation/part-creation.component.ts
+++ b/src/app/components/wrapper-components/part-creation/part-creation.component.ts
@@ -8,16 +8,12 @@ import { FirstPlayer, IFirstPlayer, ConfigRoom, IPartType, PartStatus, PartType,
 import { GameService } from '../../../services/GameService';
 import { ConfigRoomService } from '../../../services/ConfigRoomService';
 import { ChatService } from '../../../services/ChatService';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { getMillisecondsElapsed, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { UserService } from 'src/app/services/UserService';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { AuthUser, ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
-import { getMillisecondsElapsed } from 'src/app/utils/TimeUtils';
 import { FirestoreTime } from 'src/app/domain/Time';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { CurrentGame, User, UserRoleInPart } from 'src/app/domain/User';
 import { Timestamp } from 'firebase/firestore';
 import { Subscription } from 'rxjs';
@@ -28,6 +24,7 @@ import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
 import { GameState } from 'src/app/jscaip/GameState';
 import { RulesConfigDescription } from '../rules-configuration/RulesConfigDescription';
 import { AbstractRules } from 'src/app/jscaip/Rules';
+import { Debug } from 'src/app/utils/Debug';

 type PartCreationViewInfo = {
     userIsCreator: boolean;
@@ -455,7 +452,7 @@ export class PartCreationComponent implements OnInit, OnDestroy {
         const lastChangedOpt: MGPOptional<FirestoreTime> = await this.userService.getUserLastUpdateTime(userId);
         if (lastChangedOpt.isAbsent()) {
             const error: string = 'found no user while observing ' + userId + ' !';
-            ErrorLoggerService.logError('PartCreationComponent', error);
+            Utils.logError('PartCreationComponent', error);
             return true;
         }
         const lastUpdateTime: Timestamp = lastChangedOpt.get() as Timestamp;
diff --git a/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.spec.ts b/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.spec.ts
index 8eb10d920..4cd448fa8 100644
--- a/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.spec.ts
+++ b/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.spec.ts
@@ -1,6 +1,6 @@
 import { RulesConfigDescription } from './RulesConfigDescription';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { DefaultConfigDescription, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe(`RulesConfigDescriptions`, () => {
diff --git a/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.ts b/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.ts
index fa38fdf3d..3cfdc4612 100644
--- a/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.ts
+++ b/src/app/components/wrapper-components/rules-configuration/RulesConfigDescription.ts
@@ -1,8 +1,7 @@
 import { MGPValidator, MGPValidators } from 'src/app/utils/MGPValidator';

 import { ConfigDescriptionType, DefaultConfigDescription, EmptyRulesConfig, NamedRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { Utils } from 'src/app/utils/utils';
+import { MGPSet, Utils } from '@everyboard/lib';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
 import { Localized } from 'src/app/utils/LocaleUtils';

diff --git a/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.spec.ts b/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.spec.ts
index 4e75228c8..d9ab1ed35 100644
--- a/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.spec.ts
+++ b/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.spec.ts
@@ -2,10 +2,9 @@
 import { fakeAsync, tick } from '@angular/core/testing';
 import { DebugElement } from '@angular/core';
 import { RulesConfigurationComponent } from './rules-configuration.component';
-import { ActivatedRouteStub, SimpleComponentTestUtils, TestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { ActivatedRouteStub, SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { MGPOptional, Utils, TestUtils } from '@everyboard/lib';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';
 import { KamisadoState } from 'src/app/games/kamisado/KamisadoState';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
 import { RulesConfigDescription, NumberConfig, BooleanConfig } from './RulesConfigDescription';
diff --git a/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.ts b/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.ts
index ee042eeb6..46e7fd9e3 100644
--- a/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.ts
+++ b/src/app/components/wrapper-components/rules-configuration/rules-configuration.component.ts
@@ -3,10 +3,8 @@ import { FormControl, FormGroup } from '@angular/forms';
 import { ActivatedRoute } from '@angular/router';

 import { ConfigDescriptionType, NamedRulesConfig, RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';
 import { BaseWrapperComponent } from '../../game-components/game-component/GameComponent';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { DemoNodeInfo } from '../demo-card-wrapper/demo-card-wrapper.component';
 import { GameState } from 'src/app/jscaip/GameState';
 import { AbstractNode, GameNode } from 'src/app/jscaip/AI/GameNode';
diff --git a/src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep.ts b/src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep.ts
index 0c591e66c..012e54d29 100644
--- a/src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep.ts
+++ b/src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep.ts
@@ -1,8 +1,6 @@
 import { Move } from 'src/app/jscaip/Move';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameState } from 'src/app/jscaip/GameState';
-import { assert } from 'src/app/utils/assert';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export type Click = string;

@@ -112,7 +110,7 @@ export class TutorialStepMove extends TutorialStepWithSolution {
                        private readonly failureMessage: string)
     {
         super(title, instruction, state, successMessage);
-        assert(acceptedMoves.length > 0, 'TutorialStepMove: At least one accepted move should be provided, otherwise use TutorialStepInformational');
+        Utils.assert(acceptedMoves.length > 0, 'TutorialStepMove: At least one accepted move should be provided, otherwise use TutorialStepInformational');
     }
     public override isMove(): this is TutorialStepMove {
         return true;
diff --git a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component.ts b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component.ts
index 5bf782366..19b4d7409 100644
--- a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component.ts
+++ b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.component.ts
@@ -1,21 +1,17 @@
-import {
-    AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,
-    Component } from '@angular/core';
+import { AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef, Component } from '@angular/core';
 import { ActivatedRoute, Router } from '@angular/router';
 import { GameWrapper } from 'src/app/components/wrapper-components/GameWrapper';
 import { AbstractNode, GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Move } from 'src/app/jscaip/Move';
 import { ConnectedUserService } from 'src/app/services/ConnectedUserService';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { Click, TutorialStep, TutorialStepClick, TutorialStepMove, TutorialStepWithSolution } from './TutorialStep';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { TutorialFailure } from './TutorialFailure';
 import { GameState } from 'src/app/jscaip/GameState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { Localized } from 'src/app/utils/LocaleUtils';
+import { Debug } from 'src/app/utils/Debug';

 export class TutorialGameWrapperMessages {

diff --git a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.games.component.spec.ts b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.games.component.spec.ts
index 71f905f9b..e38ffe191 100644
--- a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.games.component.spec.ts
+++ b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.games.component.spec.ts
@@ -1,21 +1,18 @@
 /* eslint-disable max-lines-per-function */
 import { TutorialGameWrapperComponent } from './tutorial-game-wrapper.component';
-import { ComponentTestUtils, TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { GameInfo } from '../../normal-component/pick-game/pick-game.component';
 import { fakeAsync } from '@angular/core/testing';
 import { GameWrapper } from '../GameWrapper';
 import { Click, TutorialPredicate, TutorialStep } from './TutorialStep';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { Comparable, MGPFallible, MGPOptional, MGPValidation, MGPValidationTestUtils, TestUtils, Utils } from '@everyboard/lib';
 import { Move } from 'src/app/jscaip/Move';
 import { Coord } from 'src/app/jscaip/Coord';
 import { AbstractRules, SuperRules } from 'src/app/jscaip/Rules';
 import { Direction } from 'src/app/jscaip/Direction';
 import { AbstractGameComponent } from '../../game-components/game-component/GameComponent';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameState } from 'src/app/jscaip/GameState';
-import { Utils } from 'src/app/utils/utils';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPFallible } from 'src/app/utils/MGPFallible';

 import { ApagosTutorial } from 'src/app/games/apagos/ApagosTutorial';
 import { ApagosRules } from 'src/app/games/apagos/ApagosRules';
@@ -86,9 +83,8 @@ import { YinshRules } from 'src/app/games/yinsh/YinshRules';
 import { YinshTutorial, YinshTutorialMessages } from 'src/app/games/yinsh/YinshTutorial';
 import { YinshCapture, YinshMove } from 'src/app/games/yinsh/YinshMove';

-import { TutorialStepMessage } from './TutorialStepMessage';
-import { Comparable } from 'src/app/utils/Comparable';
 import { RulesConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { TutorialStepMessage } from './TutorialStepMessage';

 describe('TutorialGameWrapperComponent (games)', () => {

@@ -338,7 +334,7 @@ describe('TutorialGameWrapperComponent (games)', () => {
                             .toEqual(validation);
                     } else {
                         const context: string = 'Move should be legal to reach predicate but failed in "' + step.title+ '" because';
-                        TestUtils.expectValidationSuccess(MGPValidation.ofFallible(moveResult), context);
+                        MGPValidationTestUtils.expectToBeSuccess(MGPValidation.ofFallible(moveResult), context);
                     }
                 } else {
                     throw new Error('This test expects only predicate steps, remove "' + step.title + '"');
diff --git a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.wrapper.component.spec.ts b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.wrapper.component.spec.ts
index e03ce861c..e66d535b0 100644
--- a/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.wrapper.component.spec.ts
+++ b/src/app/components/wrapper-components/tutorial-game-wrapper/tutorial-game-wrapper.wrapper.component.spec.ts
@@ -7,21 +7,18 @@ import { QuartoPiece } from 'src/app/games/quarto/QuartoPiece';
 import { ComponentTestUtils, expectValidRouting } from 'src/app/utils/tests/TestUtils.spec';
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { QuartoComponent } from '../../../games/quarto/quarto.component';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { Comparable, MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { TutorialFailure } from './TutorialFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Router } from '@angular/router';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { LocalGameWrapperComponent } from '../local-game-wrapper/local-game-wrapper.component';
 import { OnlineGameCreationComponent } from '../../normal-component/online-game-creation/online-game-creation.component';
 import { GameWrapperMessages } from '../GameWrapper';
 import { NotFoundComponent } from '../../normal-component/not-found/not-found.component';
 import { AbstractGameComponent } from '../../game-components/game-component/GameComponent';
-import { Comparable } from 'src/app/utils/Comparable';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
 import { QuartoRules } from 'src/app/games/quarto/QuartoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { TutorialStepMessage } from './TutorialStepMessage';

 describe('TutorialGameWrapperComponent for non-existing game', () => {
diff --git a/src/app/dao/ChatDAO.ts b/src/app/dao/ChatDAO.ts
index 6e095aedc..be40e92a3 100644
--- a/src/app/dao/ChatDAO.ts
+++ b/src/app/dao/ChatDAO.ts
@@ -1,7 +1,8 @@
 import { FirestoreDAO } from './FirestoreDAO';
 import { Injectable } from '@angular/core';
-import { Debug } from 'src/app/utils/utils';
 import { Chat } from '../domain/Chat';
+import { Firestore } from '@angular/fire/firestore';
+import { Debug } from '../utils/Debug';

 @Injectable({
     providedIn: 'root',
@@ -9,7 +10,7 @@ import { Chat } from '../domain/Chat';
 @Debug.log
 export class ChatDAO extends FirestoreDAO<Chat> {

-    public constructor() {
-        super('chats');
+    public constructor(firestore: Firestore) {
+        super('chats', firestore);
     }
 }
diff --git a/src/app/dao/ConfigRoomDAO.ts b/src/app/dao/ConfigRoomDAO.ts
index 1ec42cac1..0118fa241 100644
--- a/src/app/dao/ConfigRoomDAO.ts
+++ b/src/app/dao/ConfigRoomDAO.ts
@@ -1,7 +1,8 @@
 import { FirestoreDAO } from './FirestoreDAO';
 import { ConfigRoom } from '../domain/ConfigRoom';
 import { Injectable } from '@angular/core';
-import { Debug } from 'src/app/utils/utils';
+import { Firestore } from '@angular/fire/firestore';
+import { Debug } from '../utils/Debug';

 @Injectable({
     providedIn: 'root',
@@ -9,7 +10,7 @@ import { Debug } from 'src/app/utils/utils';
 @Debug.log
 export class ConfigRoomDAO extends FirestoreDAO<ConfigRoom> {

-    public constructor() {
-        super('config-room');
+    public constructor(firestore: Firestore) {
+        super('config-room', firestore);
     }
 }
diff --git a/src/app/dao/ErrorDAO.ts b/src/app/dao/ErrorDAO.ts
index d44c8d5f7..2cd6b6b0a 100644
--- a/src/app/dao/ErrorDAO.ts
+++ b/src/app/dao/ErrorDAO.ts
@@ -1,6 +1,7 @@
 import { Injectable } from '@angular/core';
+import { Firestore } from '@angular/fire/firestore';
 import { FirestoreTime } from '../domain/Time';
-import { JSONValue } from '../utils/utils';
+import { JSONValue } from '@everyboard/lib';
 import { FirestoreDocument, FirestoreDAO } from './FirestoreDAO';

 export type MGPError = {
@@ -26,7 +27,7 @@ export type ErrorDocument = FirestoreDocument<MGPError>;
 })
 // The DAO used to log the errors within firebase
 export class ErrorDAO extends FirestoreDAO<MGPError> {
-    public constructor() {
-        super('errors');
+    public constructor(firestore: Firestore) {
+        super('errors', firestore);
     }
 }
diff --git a/src/app/dao/FirestoreDAO.ts b/src/app/dao/FirestoreDAO.ts
index 4730118ea..f4955550a 100644
--- a/src/app/dao/FirestoreDAO.ts
+++ b/src/app/dao/FirestoreDAO.ts
@@ -1,8 +1,8 @@
-import { Debug, FirestoreJSONObject, Utils } from 'src/app/utils/utils';
-import { MGPOptional } from '../utils/MGPOptional';
-import * as Firestore from '@firebase/firestore';
+import { FirestoreJSONObject, MGPOptional, Utils } from '@everyboard/lib';
+import * as Firestore from '@angular/fire/firestore';
 import { FirestoreCollectionObserver } from './FirestoreCollectionObserver';
 import { Subscription } from 'rxjs';
+import { Debug } from '../utils/Debug';

 export interface FirestoreDocument<T> {
     id: string
@@ -45,7 +45,9 @@ export abstract class FirestoreDAO<T extends FirestoreJSONObject> implements IFi

     private readonly subDAOs: Record<string, IFirestoreDAO<FirestoreJSONObject>> = {};

-    public constructor(public readonly collectionName: string) {
+    public constructor(public readonly collectionName: string,
+                       protected readonly firestore: Firestore.Firestore)
+    {
         const genericConverter: Firestore.FirestoreDataConverter<T> = {
             fromFirestore(snapshot: Firestore.QueryDocumentSnapshot): T {
                 return snapshot.data() as T;
@@ -54,7 +56,6 @@ export abstract class FirestoreDAO<T extends FirestoreJSONObject> implements IFi
                 return data;
             },
         };
-        const firestore: Firestore.Firestore = Firestore.getFirestore();
         this.collection = Firestore.collection(firestore, this.collectionName).withConverter<T>(genericConverter);
     }
     public async create(newElement: T): Promise<string> {
@@ -169,10 +170,10 @@ export abstract class FirestoreDAO<T extends FirestoreJSONObject> implements IFi
             return this.subDAOs[fullPath] as IFirestoreDAO<T>;
         } else {
             const subDAO: FirestoreDAO<T> = new class extends FirestoreDAO<T> {
-                public constructor() {
-                    super(fullPath);
+                public constructor(firestore: Firestore.Firestore) {
+                    super(fullPath, firestore);
                 }
-            }();
+            }(this.firestore);
             this.subDAOs[fullPath] = subDAO;
             return subDAO;
         }
diff --git a/src/app/dao/PartDAO.ts b/src/app/dao/PartDAO.ts
index 67cad2322..2e7e81c98 100644
--- a/src/app/dao/PartDAO.ts
+++ b/src/app/dao/PartDAO.ts
@@ -1,7 +1,8 @@
 import { FirestoreDAO } from './FirestoreDAO';
 import { Part } from '../domain/Part';
 import { Injectable } from '@angular/core';
-import { Debug } from '../utils/utils';
+import { Firestore } from '@angular/fire/firestore';
+import { Debug } from '../utils/Debug';

 @Injectable({
     providedIn: 'root',
@@ -9,7 +10,7 @@ import { Debug } from '../utils/utils';
 @Debug.log
 export class PartDAO extends FirestoreDAO<Part> {

-    public constructor() {
-        super('parts');
+    public constructor(firestore: Firestore) {
+        super('parts', firestore);
     }
 }
diff --git a/src/app/dao/UserDAO.ts b/src/app/dao/UserDAO.ts
index 2e23aa2f7..ea192a2c4 100644
--- a/src/app/dao/UserDAO.ts
+++ b/src/app/dao/UserDAO.ts
@@ -1,7 +1,8 @@
 import { Injectable } from '@angular/core';
 import { FirestoreDAO } from './FirestoreDAO';
-import { Debug } from 'src/app/utils/utils';
 import { User } from '../domain/User';
+import { Firestore } from '@angular/fire/firestore';
+import { Debug } from '../utils/Debug';

 @Injectable({
     providedIn: 'root',
@@ -9,8 +10,9 @@ import { User } from '../domain/User';
 @Debug.log
 export class UserDAO extends FirestoreDAO<User> {

-    public constructor() {
-        super('users');
-    }
+    public static COLLECTION_NAME: string = 'users';

+    public constructor(firestore: Firestore) {
+        super(UserDAO.COLLECTION_NAME, firestore);
+    }
 }
diff --git a/src/app/dao/tests/ChatDAO.spec.ts b/src/app/dao/tests/ChatDAO.spec.ts
index e42503387..2ae895811 100644
--- a/src/app/dao/tests/ChatDAO.spec.ts
+++ b/src/app/dao/tests/ChatDAO.spec.ts
@@ -1,9 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { TestBed } from '@angular/core/testing';
-import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';
 import { ChatDAO } from '../ChatDAO';
-import * as FireAuth from '@firebase/auth';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import * as FireAuth from '@angular/fire/auth';
+import { MGPOptional } from '@everyboard/lib';
 import { Chat } from 'src/app/domain/Chat';
 import { serverTimestamp, Timestamp } from 'firebase/firestore';
 import { Message, MessageDocument } from 'src/app/domain/Message';
@@ -18,6 +17,7 @@ import { createConnectedUser } from 'src/app/services/tests/ConnectedUserService
 import { UserDAO } from '../UserDAO';
 import { ChatService } from 'src/app/services/ChatService';
 import { Subscription } from 'rxjs';
+import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';

 describe('ChatDAO', () => {

@@ -28,7 +28,7 @@ describe('ChatDAO', () => {
     let userDAO: UserDAO;

     function signOut(): Promise<void> {
-        return FireAuth.getAuth().signOut();
+        return TestBed.inject(FireAuth.Auth).signOut();
     }
     async function createPartAndConfigRoom(creator: MinimalUser): Promise<string> {
         const id: string = await partDAO.create({ ...PartMocks.INITIAL, playerZero: creator });
diff --git a/src/app/dao/tests/ChatDAOMock.spec.ts b/src/app/dao/tests/ChatDAOMock.spec.ts
index 0226b27aa..228d2b721 100644
--- a/src/app/dao/tests/ChatDAOMock.spec.ts
+++ b/src/app/dao/tests/ChatDAOMock.spec.ts
@@ -1,11 +1,9 @@
 /* eslint-disable max-lines-per-function */
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
+import { MGPMap, MGPOptional, ObservableSubject } from '@everyboard/lib';
 import { FirestoreDAOMock } from './FirestoreDAOMock.spec';
 import { Chat, ChatDocument } from 'src/app/domain/Chat';
-import { Debug } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MessageDocument } from 'src/app/domain/Message';
+import { Debug } from 'src/app/utils/Debug';

 type ChatOS = ObservableSubject<MGPOptional<ChatDocument>>;

diff --git a/src/app/dao/tests/ConfigRoomDAO.spec.ts b/src/app/dao/tests/ConfigRoomDAO.spec.ts
index 186259567..a1799c0c0 100644
--- a/src/app/dao/tests/ConfigRoomDAO.spec.ts
+++ b/src/app/dao/tests/ConfigRoomDAO.spec.ts
@@ -1,17 +1,17 @@
 /* eslint-disable max-lines-per-function */
 import { TestBed } from '@angular/core/testing';
-import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';
 import { ConfigRoomDAO } from '../ConfigRoomDAO';
 import { PartDAO } from '../PartDAO';
 import { PartMocks } from 'src/app/domain/PartMocks.spec';
 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
 import { FirstPlayer, ConfigRoom, PartStatus, PartType } from 'src/app/domain/ConfigRoom';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { createUnverifiedUser, createConnectedUser, reconnectUser, signOut } from 'src/app/services/tests/ConnectedUserService.spec';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { UserDAO } from '../UserDAO';
 import { Timestamp } from 'firebase/firestore';
+import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';

 interface TestOptions {
     signOut?: boolean,
diff --git a/src/app/dao/tests/ConfigRoomDAOMock.spec.ts b/src/app/dao/tests/ConfigRoomDAOMock.spec.ts
index fbf869ec5..a09ac6e7b 100644
--- a/src/app/dao/tests/ConfigRoomDAOMock.spec.ts
+++ b/src/app/dao/tests/ConfigRoomDAOMock.spec.ts
@@ -1,14 +1,12 @@
 /* eslint-disable max-lines-per-function */
 import { ConfigRoom, ConfigRoomDocument } from 'src/app/domain/ConfigRoom';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
-import { Debug } from 'src/app/utils/utils';
+import { MGPMap, MGPOptional, ObservableSubject } from '@everyboard/lib';
 import { FirestoreDAOMock } from './FirestoreDAOMock.spec';
 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
 import { fakeAsync } from '@angular/core/testing';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { Subscription } from 'rxjs';
+import { Debug } from 'src/app/utils/Debug';

 type ConfigRoomOS = ObservableSubject<MGPOptional<ConfigRoomDocument>>;

diff --git a/src/app/dao/tests/ErrorDAOMock.spec.ts b/src/app/dao/tests/ErrorDAOMock.spec.ts
index 812867683..19d70fa8a 100644
--- a/src/app/dao/tests/ErrorDAOMock.spec.ts
+++ b/src/app/dao/tests/ErrorDAOMock.spec.ts
@@ -1,8 +1,5 @@
 import { FirestoreDAOMock } from 'src/app/dao/tests/FirestoreDAOMock.spec';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPMap, MGPOptional, ObservableSubject } from '@everyboard/lib';
 import { ErrorDocument, MGPError } from '../ErrorDAO';

 type ErrorOS = ObservableSubject<MGPOptional<ErrorDocument>>;
diff --git a/src/app/dao/tests/FirestoreDAO.spec.ts b/src/app/dao/tests/FirestoreDAO.spec.ts
index 8ff9623b9..db5e44ead 100644
--- a/src/app/dao/tests/FirestoreDAO.spec.ts
+++ b/src/app/dao/tests/FirestoreDAO.spec.ts
@@ -2,9 +2,9 @@
 import { TestBed } from '@angular/core/testing';
 import { Injectable } from '@angular/core';
 import { FirestoreDocument, FirestoreDAO } from '../FirestoreDAO';
-import { FirestoreJSONObject } from 'src/app/utils/utils';
+import { FirestoreJSONObject, MGPOptional } from '@everyboard/lib';
 import { FirestoreCollectionObserver } from '../FirestoreCollectionObserver';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import * as Firestore from '@angular/fire/firestore';
 import { Subscription } from 'rxjs';
 import { setupEmulators } from 'src/app/utils/tests/TestUtils.spec';

@@ -18,8 +18,8 @@ type Foo = {
 })
 class FooDAO extends FirestoreDAO<Foo> {

-    public constructor() {
-        super('foo');
+    public constructor(firestore: Firestore.Firestore) {
+        super('foo', firestore);
     }
 }

diff --git a/src/app/dao/tests/FirestoreDAOMock.spec.ts b/src/app/dao/tests/FirestoreDAOMock.spec.ts
index 335aa4fad..86808aa98 100644
--- a/src/app/dao/tests/FirestoreDAOMock.spec.ts
+++ b/src/app/dao/tests/FirestoreDAOMock.spec.ts
@@ -1,14 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Observable, BehaviorSubject, Subscription } from 'rxjs';
-import { Debug, FirestoreJSONObject, FirestoreJSONValue, Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { FirestoreJSONObject, FirestoreJSONValue, MGPMap, MGPOptional, ObservableSubject, Utils } from '@everyboard/lib';
 import { FirestoreCollectionObserver } from '../FirestoreCollectionObserver';
 import { FirestoreCondition, FirestoreDocument, IFirestoreDAO } from '../FirestoreDAO';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
-import { FieldValue, UpdateData } from '@firebase/firestore';
+import { FieldValue, UpdateData } from '@angular/fire/firestore';
 import { Timestamp } from 'firebase/firestore';
+import { Debug } from 'src/app/utils/Debug';

 type DocumentSubject<T> = ObservableSubject<MGPOptional<FirestoreDocument<T>>>;

@@ -191,7 +188,7 @@ export abstract class FirestoreDAOMock<T extends FirestoreJSONObject> implements
     }
     private conditionsHold(conditions: FirestoreCondition[], doc: T): boolean {
         for (const condition of conditions) {
-            assert(condition[1] === '==', 'FirestoreDAOMock currently only supports == as a condition');
+            Utils.assert(condition[1] === '==', 'FirestoreDAOMock currently only supports == as a condition');
             if (doc[condition[0]] !== condition[2]) {
                 return false;
             }
diff --git a/src/app/dao/tests/PartDAO.spec.ts b/src/app/dao/tests/PartDAO.spec.ts
index 7c3a54ceb..507b83375 100644
--- a/src/app/dao/tests/PartDAO.spec.ts
+++ b/src/app/dao/tests/PartDAO.spec.ts
@@ -3,11 +3,10 @@ import { TestBed } from '@angular/core/testing';
 import { GameEvent, RequestType, Reply, Part, MGPResult, GameEventMove, GameEventRequest, GameEventReply, GameEventAction } from 'src/app/domain/Part';
 import { PartMocks } from 'src/app/domain/PartMocks.spec';
 import { createConnectedUser, createUnverifiedUser, signOut, reconnectUser, createDisconnectedUser } from 'src/app/services/tests/ConnectedUserService.spec';
-import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';
 import { PartDAO } from '../PartDAO';
 import { UserDAO } from '../UserDAO';
 import { serverTimestamp, Timestamp } from 'firebase/firestore';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, TimeUtils } from '@everyboard/lib';
 import { ConfigRoomDAO } from '../ConfigRoomDAO';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
@@ -18,7 +17,7 @@ import { CurrentGameMocks } from 'src/app/domain/mocks/CurrentGameMocks.spec';
 import { ConfigRoomService } from 'src/app/services/ConfigRoomService';
 import { GameEventService } from '../../services/GameEventService';
 import { IFirestoreDAO } from '../FirestoreDAO';
-import { TimeUtils } from 'src/app/utils/TimeUtils';
+import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';

 type PartInfo = {
     id: string,
diff --git a/src/app/dao/tests/PartDAOMock.spec.ts b/src/app/dao/tests/PartDAOMock.spec.ts
index 828899a3b..22279e587 100644
--- a/src/app/dao/tests/PartDAOMock.spec.ts
+++ b/src/app/dao/tests/PartDAOMock.spec.ts
@@ -1,10 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { Part, PartDocument } from 'src/app/domain/Part';
 import { FirestoreDAOMock } from './FirestoreDAOMock.spec';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { Debug } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPMap, MGPOptional, ObservableSubject } from '@everyboard/lib';
+import { Debug } from 'src/app/utils/Debug';

 type PartOS = ObservableSubject<MGPOptional<PartDocument>>;

diff --git a/src/app/dao/tests/UserDAO.spec.ts b/src/app/dao/tests/UserDAO.spec.ts
index 01d64a05e..561286ea5 100644
--- a/src/app/dao/tests/UserDAO.spec.ts
+++ b/src/app/dao/tests/UserDAO.spec.ts
@@ -1,12 +1,12 @@
 /* eslint-disable max-lines-per-function */
 import { TestBed } from '@angular/core/testing';
-import * as FireAuth from '@firebase/auth';
+import * as FireAuth from '@angular/fire/auth';
 import { User } from 'src/app/domain/User';
 import { UserDAO } from '../UserDAO';
-import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';
 import { createConnectedGoogleUser, createDisconnectedGoogleUser } from 'src/app/services/tests/ConnectedUserService.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { UserService } from 'src/app/services/UserService';
+import { expectPermissionToBeDenied, setupEmulators } from 'src/app/utils/tests/TestUtils.spec';

 describe('UserDAO', () => {

@@ -47,7 +47,7 @@ describe('UserDAO', () => {
             // Given an authenticated visitor without the corresponding user in DB
             const token: string = '{"sub": "foo@bar.com", "email": "foo@bar.com", "email_verified": true}';
             const credential: FireAuth.UserCredential =
-                await FireAuth.signInWithCredential(FireAuth.getAuth(),
+                await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                                     FireAuth.GoogleAuthProvider.credential(token));
             // When setting the user in DB
             const result: Promise<void> = userDAO.set(credential.user.uid, { verified: false, currentGame: null });
@@ -82,7 +82,7 @@ describe('UserDAO', () => {
             // Given a non-verified user, with a username
             const token: string = '{"sub": "foo@bar.com", "email": "foo@bar.com", "email_verified": true}';
             const credential: FireAuth.UserCredential =
-                await FireAuth.signInWithCredential(FireAuth.getAuth(),
+                await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                                     FireAuth.GoogleAuthProvider.credential(token));
             await userDAO.set(credential.user.uid, { verified: false, username: 'user', currentGame: null });

@@ -95,7 +95,7 @@ describe('UserDAO', () => {
             // Given a non-verified user, without a username
             const token: string = '{"sub": "foo@bar.com", "email": "foo@bar.com", "email_verified": true}';
             const credential: FireAuth.UserCredential =
-                await FireAuth.signInWithCredential(FireAuth.getAuth(),
+                await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                                     FireAuth.GoogleAuthProvider.credential(token));
             await userDAO.set(credential.user.uid, { verified: false, currentGame: null });

@@ -107,7 +107,7 @@ describe('UserDAO', () => {
         it('should forbid setting the user to verified if it has no verified email', async() => {
             // Given a email user that has not verified its email
             const credential: FireAuth.UserCredential =
-                await FireAuth.createUserWithEmailAndPassword(FireAuth.getAuth(),
+                await FireAuth.createUserWithEmailAndPassword(TestBed.inject(FireAuth.Auth),
                                                               'foo@bar.com',
                                                               'jeanjaja123');
             await userDAO.set(credential.user.uid, { verified: false, username: 'foo', currentGame: null });
diff --git a/src/app/dao/tests/UserDAOMock.spec.ts b/src/app/dao/tests/UserDAOMock.spec.ts
index c3d2fdc09..611ecf983 100644
--- a/src/app/dao/tests/UserDAOMock.spec.ts
+++ b/src/app/dao/tests/UserDAOMock.spec.ts
@@ -1,9 +1,7 @@
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { ObservableSubject } from 'src/app/utils/tests/ObservableSubject.spec';
+import { MGPMap, MGPOptional, ObservableSubject } from '@everyboard/lib';
 import { User, UserDocument } from 'src/app/domain/User';
-import { Debug } from 'src/app/utils/utils';
 import { FirestoreDAOMock } from './FirestoreDAOMock.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Debug } from 'src/app/utils/Debug';

 type UserOS = ObservableSubject<MGPOptional<UserDocument>>;

diff --git a/src/app/domain/Chat.ts b/src/app/domain/Chat.ts
index 21221bf6a..2200f10f0 100644
--- a/src/app/domain/Chat.ts
+++ b/src/app/domain/Chat.ts
@@ -1,5 +1,5 @@
 import { FirestoreDocument } from '../dao/FirestoreDAO';
-import { FirestoreJSONObject } from '../utils/utils';
+import { FirestoreJSONObject } from '@everyboard/lib';

 // A chat has no object, it only contains a sub collection with the messages
 export type Chat = FirestoreJSONObject
diff --git a/src/app/domain/ConfigRoom.ts b/src/app/domain/ConfigRoom.ts
index 1f9499772..9cf32153f 100644
--- a/src/app/domain/ConfigRoom.ts
+++ b/src/app/domain/ConfigRoom.ts
@@ -1,5 +1,5 @@
 import { FirestoreDocument } from '../dao/FirestoreDAO';
-import { assert } from 'src/app/utils/assert';
+import { Utils } from '@everyboard/lib';
 import { MinimalUser } from './MinimalUser';
 import { RulesConfig } from '../jscaip/RulesConfigUtil';

@@ -35,7 +35,7 @@ export class FirstPlayer {
             case 'CREATOR': return FirstPlayer.CREATOR;
             case 'RANDOM': return FirstPlayer.RANDOM;
             default:
-                assert(value === 'CHOSEN_PLAYER', 'Invalid value for FirstPlayer: ' + value + '.');
+                Utils.assert(value === 'CHOSEN_PLAYER', 'Invalid value for FirstPlayer: ' + value + '.');
                 return FirstPlayer.CHOSEN_PLAYER;
         }
     }
diff --git a/src/app/domain/ConfigRoomMocks.spec.ts b/src/app/domain/ConfigRoomMocks.spec.ts
index c52a70036..59886ca0e 100644
--- a/src/app/domain/ConfigRoomMocks.spec.ts
+++ b/src/app/domain/ConfigRoomMocks.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { RulesConfig } from '../jscaip/RulesConfigUtil';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { FirstPlayer, ConfigRoom, PartStatus, PartType } from './ConfigRoom';
 import { UserMocks } from './UserMocks.spec';

diff --git a/src/app/domain/Part.ts b/src/app/domain/Part.ts
index 921aa31ee..df6624fd4 100644
--- a/src/app/domain/Part.ts
+++ b/src/app/domain/Part.ts
@@ -1,9 +1,7 @@
-import { JSONValue, Utils } from 'src/app/utils/utils';
-import { assert } from '../utils/assert';
+import { JSONValue, MGPOptional, Utils } from '@everyboard/lib';
 import { FirestoreTime } from './Time';
 import { MinimalUser } from './MinimalUser';
 import { FirestoreDocument } from '../dao/FirestoreDAO';
-import { MGPOptional } from '../utils/MGPOptional';

 export type Part = {
     readonly typeGame: string; // the type of game
@@ -95,7 +93,7 @@ export class PartDocument implements FirestoreDocument<Part> {
         if (this.data.result === MGPResult.AGREED_DRAW_BY_ZERO.value) {
             return this.data.playerZero;
         } else {
-            assert(this.data.result === MGPResult.AGREED_DRAW_BY_ONE.value, 'should not access getDrawAccepter when no draw accepted!');
+            Utils.assert(this.data.result === MGPResult.AGREED_DRAW_BY_ONE.value, 'should not access getDrawAccepter when no draw accepted!');
             return Utils.getNonNullable(this.data.playerOne);
         }
     }
diff --git a/src/app/domain/Time.ts b/src/app/domain/Time.ts
index a5c832394..7370296ea 100644
--- a/src/app/domain/Time.ts
+++ b/src/app/domain/Time.ts
@@ -1,4 +1,4 @@
-import * as Firestore from '@firebase/firestore';
+import * as Firestore from '@angular/fire/firestore';

 /* For time handled by firestore:
  *   - when we send it in a document, we send a FieldValue
diff --git a/src/app/domain/UserMocks.spec.ts b/src/app/domain/UserMocks.spec.ts
index 7872fef6a..9ad5c9023 100644
--- a/src/app/domain/UserMocks.spec.ts
+++ b/src/app/domain/UserMocks.spec.ts
@@ -1,6 +1,6 @@
 import { Timestamp } from 'firebase/firestore';
 import { AuthUser } from '../services/ConnectedUserService';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MinimalUser } from './MinimalUser';
 import { User } from './User';

diff --git a/src/app/games/abalone/AbaloneMove.ts b/src/app/games/abalone/AbaloneMove.ts
index c6d84a260..dce3a54e3 100644
--- a/src/app/games/abalone/AbaloneMove.ts
+++ b/src/app/games/abalone/AbaloneMove.ts
@@ -1,12 +1,8 @@
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
+import { ArrayUtils, Encoder, MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';

 type AbaloneMoveFields = [Coord, HexaDirection, MGPOptional<Coord>];

diff --git a/src/app/games/abalone/AbaloneMoveGenerator.ts b/src/app/games/abalone/AbaloneMoveGenerator.ts
index d060bf38e..5c16a3788 100644
--- a/src/app/games/abalone/AbaloneMoveGenerator.ts
+++ b/src/app/games/abalone/AbaloneMoveGenerator.ts
@@ -2,8 +2,7 @@ import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPFallible, MGPSet } from '@everyboard/lib';
 import { AbaloneMove } from './AbaloneMove';
 import { AbaloneLegalityInformation, AbaloneNode, AbaloneRules } from './AbaloneRules';
 import { AbaloneState } from './AbaloneState';
diff --git a/src/app/games/abalone/AbaloneRules.ts b/src/app/games/abalone/AbaloneRules.ts
index 922d1e76d..36366cd07 100644
--- a/src/app/games/abalone/AbaloneRules.ts
+++ b/src/app/games/abalone/AbaloneRules.ts
@@ -4,14 +4,12 @@ import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { AbaloneFailure } from './AbaloneFailure';
 import { AbaloneState } from './AbaloneState';
 import { AbaloneMove } from './AbaloneMove';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { Player } from 'src/app/jscaip/Player';
diff --git a/src/app/games/abalone/abalone.component.ts b/src/app/games/abalone/abalone.component.ts
index b26a29466..2d925ae9a 100644
--- a/src/app/games/abalone/abalone.component.ts
+++ b/src/app/games/abalone/abalone.component.ts
@@ -9,21 +9,17 @@ import { PointyHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { ArrayUtils, MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { AbaloneFailure } from './AbaloneFailure';
 import { AbaloneState } from './AbaloneState';
 import { AbaloneMove } from './AbaloneMove';
 import { AbaloneLegalityInformation, AbaloneRules } from './AbaloneRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MCTS } from 'src/app/jscaip/AI/MCTS';
-import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { AbaloneScoreHeuristic } from './AbaloneScoreHeuristic';
 import { AbaloneMoveGenerator } from './AbaloneMoveGenerator';
-import { Utils } from 'src/app/utils/utils';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { Minimax } from 'src/app/jscaip/AI/Minimax';
+import { MCTS } from 'src/app/jscaip/AI/MCTS';

 type CapturedInfo = {
     coord: Coord,
diff --git a/src/app/games/abalone/tests/AbaloneMove.spec.ts b/src/app/games/abalone/tests/AbaloneMove.spec.ts
index 70b62cb49..e0e769e5e 100644
--- a/src/app/games/abalone/tests/AbaloneMove.spec.ts
+++ b/src/app/games/abalone/tests/AbaloneMove.spec.ts
@@ -5,7 +5,7 @@ import { AbaloneMove } from '../AbaloneMove';
 import { AbaloneRules } from '../AbaloneRules';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { AbaloneMoveGenerator } from '../AbaloneMoveGenerator';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';

 describe('AbaloneMove', () => {

diff --git a/src/app/games/abalone/tests/AbaloneMoveGenerator.spec.ts b/src/app/games/abalone/tests/AbaloneMoveGenerator.spec.ts
index 8ce64d7d6..83e5d6f2a 100644
--- a/src/app/games/abalone/tests/AbaloneMoveGenerator.spec.ts
+++ b/src/app/games/abalone/tests/AbaloneMoveGenerator.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { AbaloneMoveGenerator } from '../AbaloneMoveGenerator';
 import { AbaloneNode, AbaloneRules } from '../AbaloneRules';
 import { AbaloneState } from '../AbaloneState';
diff --git a/src/app/games/abalone/tests/AbaloneScoreHeuristic.spec.ts b/src/app/games/abalone/tests/AbaloneScoreHeuristic.spec.ts
index ee9e582ee..190de30e6 100644
--- a/src/app/games/abalone/tests/AbaloneScoreHeuristic.spec.ts
+++ b/src/app/games/abalone/tests/AbaloneScoreHeuristic.spec.ts
@@ -1,13 +1,13 @@
 /* eslint-disable max-lines-per-function */
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { AbaloneState } from '../AbaloneState';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { AbaloneScoreHeuristic } from '../AbaloneScoreHeuristic';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { AbaloneRules } from '../AbaloneRules';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 const _: FourStatePiece = FourStatePiece.EMPTY;
 const N: FourStatePiece = FourStatePiece.UNREACHABLE;
diff --git a/src/app/games/abalone/tests/abalone.component.spec.ts b/src/app/games/abalone/tests/abalone.component.spec.ts
index e0cdd6f5c..225630b93 100644
--- a/src/app/games/abalone/tests/abalone.component.spec.ts
+++ b/src/app/games/abalone/tests/abalone.component.spec.ts
@@ -4,7 +4,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { AbaloneComponent } from '../abalone.component';
 import { AbaloneFailure } from '../AbaloneFailure';
diff --git a/src/app/games/apagos/ApagosCoord.ts b/src/app/games/apagos/ApagosCoord.ts
index f66b60a14..c73f94770 100644
--- a/src/app/games/apagos/ApagosCoord.ts
+++ b/src/app/games/apagos/ApagosCoord.ts
@@ -1,5 +1,4 @@
-import { assert } from 'src/app/utils/assert';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';

 export class ApagosCoord {

@@ -22,7 +21,7 @@ export class ApagosCoord {
             case 1: return ApagosCoord.ONE;
             case 2: return ApagosCoord.TWO;
             default:
-                assert(x === 3, 'Invalid Apagos Coord ' + x);
+                Utils.assert(x === 3, 'Invalid Apagos Coord ' + x);
                 return ApagosCoord.THREE;
         }
     }
diff --git a/src/app/games/apagos/ApagosMove.ts b/src/app/games/apagos/ApagosMove.ts
index 5f6faa180..aa9450bfc 100644
--- a/src/app/games/apagos/ApagosMove.ts
+++ b/src/app/games/apagos/ApagosMove.ts
@@ -1,9 +1,6 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { Move } from 'src/app/jscaip/Move';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
 import { ApagosCoord } from './ApagosCoord';
 import { ApagosFailure } from './ApagosFailure';

diff --git a/src/app/games/apagos/ApagosRules.ts b/src/app/games/apagos/ApagosRules.ts
index f800dcce4..b8eed1ee4 100644
--- a/src/app/games/apagos/ApagosRules.ts
+++ b/src/app/games/apagos/ApagosRules.ts
@@ -2,14 +2,12 @@ import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from '../../utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { ApagosCoord } from './ApagosCoord';
 import { ApagosFailure } from './ApagosFailure';
 import { ApagosMove } from './ApagosMove';
 import { ApagosSquare } from './ApagosSquare';
 import { ApagosState } from './ApagosState';
-import { Utils } from 'src/app/utils/utils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/apagos/ApagosSquare.ts b/src/app/games/apagos/ApagosSquare.ts
index 830bc9e5e..4fea87351 100644
--- a/src/app/games/apagos/ApagosSquare.ts
+++ b/src/app/games/apagos/ApagosSquare.ts
@@ -1,6 +1,5 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPMap } from 'src/app/utils/MGPMap';
+import { MGPFallible, MGPMap } from '@everyboard/lib';

 export class ApagosSquare {

diff --git a/src/app/games/apagos/ApagosState.ts b/src/app/games/apagos/ApagosState.ts
index 00151d03c..e38d2cb20 100644
--- a/src/app/games/apagos/ApagosState.ts
+++ b/src/app/games/apagos/ApagosState.ts
@@ -1,9 +1,10 @@
 import { GameState } from 'src/app/jscaip/GameState';
 import { Player } from 'src/app/jscaip/Player';
-import { ArrayUtils, Table } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils } from '@everyboard/lib';
 import { ApagosCoord } from './ApagosCoord';
 import { ApagosSquare } from './ApagosSquare';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { Table } from 'src/app/jscaip/TableUtils';

 export class ApagosState extends GameState {

diff --git a/src/app/games/apagos/ApagosTutorial.ts b/src/app/games/apagos/ApagosTutorial.ts
index 2b7464e1c..492a1f1ca 100644
--- a/src/app/games/apagos/ApagosTutorial.ts
+++ b/src/app/games/apagos/ApagosTutorial.ts
@@ -3,7 +3,7 @@ import { ApagosState } from 'src/app/games/apagos/ApagosState';
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { ApagosCoord } from './ApagosCoord';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { ApagosRules } from './ApagosRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

diff --git a/src/app/games/apagos/apagos.component.ts b/src/app/games/apagos/apagos.component.ts
index e62da4e25..32638c1bc 100644
--- a/src/app/games/apagos/apagos.component.ts
+++ b/src/app/games/apagos/apagos.component.ts
@@ -5,8 +5,7 @@ import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { ApagosCoord } from './ApagosCoord';
 import { ApagosFailure } from './ApagosFailure';
 import { ApagosMove } from './ApagosMove';
diff --git a/src/app/games/apagos/tests/ApagosFullBoardHeuristic.spec.ts b/src/app/games/apagos/tests/ApagosFullBoardHeuristic.spec.ts
index f1297d699..c7d15854e 100644
--- a/src/app/games/apagos/tests/ApagosFullBoardHeuristic.spec.ts
+++ b/src/app/games/apagos/tests/ApagosFullBoardHeuristic.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { ApagosFullBoardHeuristic } from '../ApagosFullBoardHeuristic';
 import { ApagosState } from '../ApagosState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/apagos/tests/ApagosMove.spec.ts b/src/app/games/apagos/tests/ApagosMove.spec.ts
index 7b7e53cbf..189c5ddd6 100644
--- a/src/app/games/apagos/tests/ApagosMove.spec.ts
+++ b/src/app/games/apagos/tests/ApagosMove.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { ApagosCoord } from '../ApagosCoord';
 import { ApagosFailure } from '../ApagosFailure';
 import { ApagosMove } from '../ApagosMove';
diff --git a/src/app/games/apagos/tests/ApagosRightmostHeuristic.spec.ts b/src/app/games/apagos/tests/ApagosRightmostHeuristic.spec.ts
index 823566f52..9cb35ed32 100644
--- a/src/app/games/apagos/tests/ApagosRightmostHeuristic.spec.ts
+++ b/src/app/games/apagos/tests/ApagosRightmostHeuristic.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { ApagosRightmostHeuristic } from '../ApagosRightmostHeuristic';
 import { ApagosState } from '../ApagosState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { ApagosRules } from '../ApagosRules';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 describe('ApagosRightmostHeuristic', () => {

diff --git a/src/app/games/apagos/tests/ApagosSquare.spec.ts b/src/app/games/apagos/tests/ApagosSquare.spec.ts
index e65cc29d7..e7f8707ca 100644
--- a/src/app/games/apagos/tests/ApagosSquare.spec.ts
+++ b/src/app/games/apagos/tests/ApagosSquare.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible } from '@everyboard/lib';
 import { ApagosSquare } from '../ApagosSquare';

 describe('ApagosSquare', () => {
diff --git a/src/app/games/coerceo/CoerceoMove.ts b/src/app/games/coerceo/CoerceoMove.ts
index c68e3f7da..e5b5729e7 100644
--- a/src/app/games/coerceo/CoerceoMove.ts
+++ b/src/app/games/coerceo/CoerceoMove.ts
@@ -1,9 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Vector } from 'src/app/jscaip/Vector';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';
 import { CoerceoFailure } from './CoerceoFailure';
-import { Utils } from 'src/app/utils/utils';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { CoerceoState } from './CoerceoState';
diff --git a/src/app/games/coerceo/CoerceoOrderedMoveGenerator.ts b/src/app/games/coerceo/CoerceoOrderedMoveGenerator.ts
index 76871d6fc..a19d58262 100644
--- a/src/app/games/coerceo/CoerceoOrderedMoveGenerator.ts
+++ b/src/app/games/coerceo/CoerceoOrderedMoveGenerator.ts
@@ -2,7 +2,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { CoerceoMove } from './CoerceoMove';
 import { CoerceoState } from './CoerceoState';
 import { CoerceoNode } from './CoerceoRules';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils } from '@everyboard/lib';
 import { CoerceoMoveGenerator } from './CoerceoMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/coerceo/CoerceoPiecesThreatsTilesHeuristic.ts b/src/app/games/coerceo/CoerceoPiecesThreatsTilesHeuristic.ts
index 583d35421..949c40ddc 100644
--- a/src/app/games/coerceo/CoerceoPiecesThreatsTilesHeuristic.ts
+++ b/src/app/games/coerceo/CoerceoPiecesThreatsTilesHeuristic.ts
@@ -3,17 +3,15 @@ import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { PieceThreat } from 'src/app/jscaip/PieceThreat';
 import { Player } from 'src/app/jscaip/Player';
 import { TriangularCheckerBoard } from 'src/app/jscaip/TriangularCheckerBoard';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { CoerceoMove, CoerceoStep } from './CoerceoMove';
 import { CoerceoState } from './CoerceoState';
 import { CoerceoNode } from './CoerceoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
 import { Vector } from 'src/app/jscaip/Vector';
-import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';

 export class CoerceoPiecesThreatsTilesHeuristic extends PlayerMetricHeuristic<CoerceoMove, CoerceoState> {

diff --git a/src/app/games/coerceo/CoerceoRules.ts b/src/app/games/coerceo/CoerceoRules.ts
index 903f6a4f5..c0c12d33a 100644
--- a/src/app/games/coerceo/CoerceoRules.ts
+++ b/src/app/games/coerceo/CoerceoRules.ts
@@ -2,15 +2,14 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { CoerceoMove, CoerceoRegularMove, CoerceoTileExchangeMove } from './CoerceoMove';
 import { CoerceoState } from './CoerceoState';
 import { CoerceoFailure } from './CoerceoFailure';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { Debug } from 'src/app/utils/Debug';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { Player } from 'src/app/jscaip/Player';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/coerceo/CoerceoState.ts b/src/app/games/coerceo/CoerceoState.ts
index 0d11f4c94..59768bdc7 100644
--- a/src/app/games/coerceo/CoerceoState.ts
+++ b/src/app/games/coerceo/CoerceoState.ts
@@ -2,13 +2,12 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Vector } from 'src/app/jscaip/Vector';
 import { TriangularGameState } from 'src/app/jscaip/TriangularGameState';
 import { TriangularCheckerBoard } from 'src/app/jscaip/TriangularCheckerBoard';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { Utils } from 'src/app/utils/utils';
-import { Debug } from 'src/app/utils/utils';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { CoerceoRegularMove, CoerceoStep } from './CoerceoMove';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Debug } from 'src/app/utils/Debug';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';

diff --git a/src/app/games/coerceo/coerceo.component.ts b/src/app/games/coerceo/coerceo.component.ts
index 722651ef4..dde145de1 100644
--- a/src/app/games/coerceo/coerceo.component.ts
+++ b/src/app/games/coerceo/coerceo.component.ts
@@ -3,10 +3,9 @@ import { TriangularGameComponent }
     from 'src/app/components/game-components/game-component/TriangularGameComponent';
 import { CoerceoMove, CoerceoRegularMove, CoerceoTileExchangeMove } from 'src/app/games/coerceo/CoerceoMove';
 import { CoerceoState } from 'src/app/games/coerceo/CoerceoState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { CoerceoNode, CoerceoRules } from 'src/app/games/coerceo/CoerceoRules';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { CoerceoFailure } from 'src/app/games/coerceo/CoerceoFailure';
 import { Player } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
diff --git a/src/app/games/coerceo/tests/CoerceoCapturesAndFreedomHeuristic.spec.ts b/src/app/games/coerceo/tests/CoerceoCapturesAndFreedomHeuristic.spec.ts
index de79380f8..e78add2ee 100644
--- a/src/app/games/coerceo/tests/CoerceoCapturesAndFreedomHeuristic.spec.ts
+++ b/src/app/games/coerceo/tests/CoerceoCapturesAndFreedomHeuristic.spec.ts
@@ -1,14 +1,14 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { CoerceoState } from '../CoerceoState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { CoerceoCapturesAndFreedomHeuristic } from '../CoerceoCapturesAndFreedomHeuristic';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { CoerceoRules } from '../CoerceoRules';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 const _: FourStatePiece = FourStatePiece.EMPTY;
 const N: FourStatePiece = FourStatePiece.UNREACHABLE;
diff --git a/src/app/games/coerceo/tests/CoerceoMove.spec.ts b/src/app/games/coerceo/tests/CoerceoMove.spec.ts
index 2fab08bf6..e1c996b21 100644
--- a/src/app/games/coerceo/tests/CoerceoMove.spec.ts
+++ b/src/app/games/coerceo/tests/CoerceoMove.spec.ts
@@ -3,10 +3,9 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { CoerceoRules } from '../CoerceoRules';
 import { CoerceoFailure } from '../CoerceoFailure';
 import { CoerceoMove, CoerceoRegularMove, CoerceoStep, CoerceoTileExchangeMove } from '../CoerceoMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { CoerceoMoveGenerator } from '../CoerceoMoveGenerator';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('CoerceoMove', () => {

diff --git a/src/app/games/coerceo/tests/CoerceoPiecesThreatsTilesHeuristic.spec.ts b/src/app/games/coerceo/tests/CoerceoPiecesThreatsTilesHeuristic.spec.ts
index e8a03ffdc..304b0b508 100644
--- a/src/app/games/coerceo/tests/CoerceoPiecesThreatsTilesHeuristic.spec.ts
+++ b/src/app/games/coerceo/tests/CoerceoPiecesThreatsTilesHeuristic.spec.ts
@@ -3,17 +3,15 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { PieceThreat } from 'src/app/jscaip/PieceThreat';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { CoerceoState } from '../CoerceoState';
 import { CoerceoNode, CoerceoRules } from '../CoerceoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { CoerceoPiecesThreatsTilesHeuristic } from '../CoerceoPiecesThreatsTilesHeuristic';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 describe('CoerceoPiecesThreatTilesHeuristic', () => {

diff --git a/src/app/games/coerceo/tests/CoerceoRules.spec.ts b/src/app/games/coerceo/tests/CoerceoRules.spec.ts
index 241b819b2..82450066d 100644
--- a/src/app/games/coerceo/tests/CoerceoRules.spec.ts
+++ b/src/app/games/coerceo/tests/CoerceoRules.spec.ts
@@ -8,7 +8,7 @@ import { CoerceoNode, CoerceoRules } from '../CoerceoRules';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/coerceo/tests/CoerceoState.spec.ts b/src/app/games/coerceo/tests/CoerceoState.spec.ts
index 8aa4d0931..af20178d2 100644
--- a/src/app/games/coerceo/tests/CoerceoState.spec.ts
+++ b/src/app/games/coerceo/tests/CoerceoState.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { CoerceoState } from '../CoerceoState';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/coerceo/tests/coerceo.component.spec.ts b/src/app/games/coerceo/tests/coerceo.component.spec.ts
index 34890c6a0..bb849ba15 100644
--- a/src/app/games/coerceo/tests/coerceo.component.spec.ts
+++ b/src/app/games/coerceo/tests/coerceo.component.spec.ts
@@ -4,7 +4,7 @@ import { CoerceoMove, CoerceoRegularMove, CoerceoTileExchangeMove } from 'src/ap
 import { Coord } from 'src/app/jscaip/Coord';
 import { CoerceoFailure } from 'src/app/games/coerceo/CoerceoFailure';
 import { CoerceoState } from 'src/app/games/coerceo/CoerceoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { fakeAsync } from '@angular/core/testing';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
diff --git a/src/app/games/connect-six/ConnectSixAlignmentHeuristic.ts b/src/app/games/connect-six/ConnectSixAlignmentHeuristic.ts
index 962126d71..41c95688e 100644
--- a/src/app/games/connect-six/ConnectSixAlignmentHeuristic.ts
+++ b/src/app/games/connect-six/ConnectSixAlignmentHeuristic.ts
@@ -3,7 +3,7 @@ import { Heuristic } from 'src/app/jscaip/AI/Minimax';
 import { ConnectSixMove } from './ConnectSixMove';
 import { ConnectSixNode, ConnectSixRules } from './ConnectSixRules';
 import { ConnectSixState } from './ConnectSixState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';

 export class ConnectSixAlignmentHeuristic extends Heuristic<ConnectSixMove, ConnectSixState, BoardValue, GobanConfig> {
diff --git a/src/app/games/connect-six/ConnectSixMove.ts b/src/app/games/connect-six/ConnectSixMove.ts
index 582306934..5cd8cb55a 100644
--- a/src/app/games/connect-six/ConnectSixMove.ts
+++ b/src/app/games/connect-six/ConnectSixMove.ts
@@ -1,8 +1,7 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Utils } from 'src/app/utils/utils';

 export class ConnectSixFirstMove extends MoveCoord {

diff --git a/src/app/games/connect-six/ConnectSixMoveGenerator.ts b/src/app/games/connect-six/ConnectSixMoveGenerator.ts
index e561af158..890e77ed1 100644
--- a/src/app/games/connect-six/ConnectSixMoveGenerator.ts
+++ b/src/app/games/connect-six/ConnectSixMoveGenerator.ts
@@ -4,12 +4,11 @@ import { ConnectSixMove } from './ConnectSixMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { ConnectSixFirstMove } from './ConnectSixMove';
 import { ConnectSixDrops } from './ConnectSixMove';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MoveGenerator } from 'src/app/jscaip/AI/AI';
+import { MGPOptional, MGPSet } from '@everyboard/lib';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MoveGenerator } from 'src/app/jscaip/AI/AI';

 export class ConnectSixMoveGenerator extends MoveGenerator<ConnectSixMove, ConnectSixState, GobanConfig> {

diff --git a/src/app/games/connect-six/ConnectSixRules.ts b/src/app/games/connect-six/ConnectSixRules.ts
index 861aa2274..216a64c7d 100644
--- a/src/app/games/connect-six/ConnectSixRules.ts
+++ b/src/app/games/connect-six/ConnectSixRules.ts
@@ -1,18 +1,16 @@
 import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { ConnectSixState } from './ConnectSixState';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation, MGPOptional, Utils } from '@everyboard/lib';
 import { ConnectSixDrops, ConnectSixFirstMove, ConnectSixMove } from './ConnectSixMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { NInARowHelper } from 'src/app/jscaip/NInARowHelper';
-import { Utils } from 'src/app/utils/utils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
 import { RulesConfigDescription, RulesConfigDescriptions } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';

 export class ConnectSixNode extends GameNode<ConnectSixMove, ConnectSixState> {}

diff --git a/src/app/games/connect-six/ConnectSixTutorial.ts b/src/app/games/connect-six/ConnectSixTutorial.ts
index e69260477..630704f6b 100644
--- a/src/app/games/connect-six/ConnectSixTutorial.ts
+++ b/src/app/games/connect-six/ConnectSixTutorial.ts
@@ -4,7 +4,7 @@ import { ConnectSixDrops, ConnectSixFirstMove } from './ConnectSixMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { ConnectSixRules } from './ConnectSixRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

diff --git a/src/app/games/connect-six/connect-six.component.ts b/src/app/games/connect-six/connect-six.component.ts
index be0d9fc39..f862ab4eb 100644
--- a/src/app/games/connect-six/connect-six.component.ts
+++ b/src/app/games/connect-six/connect-six.component.ts
@@ -4,8 +4,7 @@ import { ConnectSixDrops, ConnectSixFirstMove, ConnectSixMove } from './ConnectS
 import { ConnectSixState } from './ConnectSixState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { GobanGameComponent } from 'src/app/components/game-components/goban-game-component/GobanGameComponent';
diff --git a/src/app/games/connect-six/tests/ConnectSixAlignmentMinimax.spec.ts b/src/app/games/connect-six/tests/ConnectSixAlignmentMinimax.spec.ts
index 18b124371..b399ab9cb 100644
--- a/src/app/games/connect-six/tests/ConnectSixAlignmentMinimax.spec.ts
+++ b/src/app/games/connect-six/tests/ConnectSixAlignmentMinimax.spec.ts
@@ -4,12 +4,12 @@ import { ConnectSixDrops, ConnectSixMove } from '../ConnectSixMove';
 import { ConnectSixNode, ConnectSixRules } from '../ConnectSixRules';
 import { ConnectSixState } from '../ConnectSixState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { ConnectSixAlignmentMinimax } from '../ConnectSixAlignmentMinimax';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('ConnectSixAlignmentMinimax', () => {

diff --git a/src/app/games/connect-six/tests/ConnectSixMove.spec.ts b/src/app/games/connect-six/tests/ConnectSixMove.spec.ts
index 858a8cee2..aeec1d0e9 100644
--- a/src/app/games/connect-six/tests/ConnectSixMove.spec.ts
+++ b/src/app/games/connect-six/tests/ConnectSixMove.spec.ts
@@ -1,8 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { ConnectSixDrops, ConnectSixFirstMove, ConnectSixMove } from '../ConnectSixMove';
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';

 describe('ConnectSixMove', () => {

diff --git a/src/app/games/connect-six/tests/ConnectSixMoveGenerator.spec.ts b/src/app/games/connect-six/tests/ConnectSixMoveGenerator.spec.ts
index e956f6071..4df9d0d93 100644
--- a/src/app/games/connect-six/tests/ConnectSixMoveGenerator.spec.ts
+++ b/src/app/games/connect-six/tests/ConnectSixMoveGenerator.spec.ts
@@ -4,10 +4,10 @@ import { ConnectSixFirstMove, ConnectSixMove } from '../ConnectSixMove';
 import { ConnectSixNode, ConnectSixRules } from '../ConnectSixRules';
 import { ConnectSixState } from '../ConnectSixState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ConnectSixMoveGenerator } from '../ConnectSixMoveGenerator';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('ConnectSixMoveGenerator', () => {

diff --git a/src/app/games/connect-six/tests/ConnectSixRules.spec.ts b/src/app/games/connect-six/tests/ConnectSixRules.spec.ts
index c958b9a08..9393d8082 100644
--- a/src/app/games/connect-six/tests/ConnectSixRules.spec.ts
+++ b/src/app/games/connect-six/tests/ConnectSixRules.spec.ts
@@ -7,8 +7,7 @@ import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, TestUtils } from '@everyboard/lib';

 describe('ConnectSixRules', () => {
     /**
@@ -74,7 +73,7 @@ describe('ConnectSixRules', () => {
             RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
         });

-        it('should refuse move that drop two pieces on first turn', () => {
+        it('should refuse move that drops two pieces on first turn', () => {
             // Given the first turn
             const state: ConnectSixState = ConnectSixRules.get().getInitialState(defaultConfig);
             // When dropping two pieces
diff --git a/src/app/games/conspirateurs/ConspirateursMove.ts b/src/app/games/conspirateurs/ConspirateursMove.ts
index c35ab4fb6..dc81526b8 100644
--- a/src/app/games/conspirateurs/ConspirateursMove.ts
+++ b/src/app/games/conspirateurs/ConspirateursMove.ts
@@ -1,15 +1,12 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
 import { Move } from 'src/app/jscaip/Move';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
+import { Encoder, ArrayUtils, MGPFallible, MGPSet } from '@everyboard/lib';
 import { ConspirateursFailure } from './ConspirateursFailure';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
+import { CoordSet } from 'src/app/jscaip/CoordSet';

 export class ConspirateursMoveDrop extends MoveCoord {

diff --git a/src/app/games/conspirateurs/ConspirateursMoveGenerator.ts b/src/app/games/conspirateurs/ConspirateursMoveGenerator.ts
index 2753b8ef8..bc1009af3 100644
--- a/src/app/games/conspirateurs/ConspirateursMoveGenerator.ts
+++ b/src/app/games/conspirateurs/ConspirateursMoveGenerator.ts
@@ -1,10 +1,9 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPSet } from '@everyboard/lib';
 import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, ConspirateursMoveSimple } from './ConspirateursMove';
 import { ConspirateursNode, ConspirateursRules } from './ConspirateursRules';
 import { ConspirateursState } from './ConspirateursState';
-import { MGPSet } from 'src/app/utils/MGPSet';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/conspirateurs/ConspirateursRules.ts b/src/app/games/conspirateurs/ConspirateursRules.ts
index aa16a64cf..793366743 100644
--- a/src/app/games/conspirateurs/ConspirateursRules.ts
+++ b/src/app/games/conspirateurs/ConspirateursRules.ts
@@ -4,15 +4,12 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from '../../utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { ConspirateursFailure } from './ConspirateursFailure';
 import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, ConspirateursMoveSimple } from './ConspirateursMove';
 import { ConspirateursState } from './ConspirateursState';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class ConspirateursNode extends GameNode<ConspirateursMove, ConspirateursState> {}
diff --git a/src/app/games/conspirateurs/ConspirateursState.ts b/src/app/games/conspirateurs/ConspirateursState.ts
index 7338a318c..c3d6809a4 100644
--- a/src/app/games/conspirateurs/ConspirateursState.ts
+++ b/src/app/games/conspirateurs/ConspirateursState.ts
@@ -1,8 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPSet } from '@everyboard/lib';

 export class ConspirateursState extends GameStateWithTable<PlayerOrNone> {

@@ -45,18 +44,12 @@ export class ConspirateursState extends GameStateWithTable<PlayerOrNone> {
         return this.turn < 40;
     }

-    public getSidePieces(): PlayerNumberMap {
+    public getSidePieces(): [number, number] {
         if (this.turn % 2 === 0) {
-            return PlayerNumberMap.of(
-                20 - (this.turn / 2),
-                20 - (this.turn / 2),
-            );
+            return [20 - (this.turn / 2), 20 - (this.turn / 2)];
         } else {
             // Player 0 plays on even turn, so has one less piece on odd turns
-            return PlayerNumberMap.of(
-                20 - ((this.turn - 1) / 2) - 1,
-                20 - ((this.turn - 1) / 2),
-            );
+            return [20 - ((this.turn - 1) / 2) - 1, 20 - ((this.turn - 1) / 2)];
         }
     }
 }
diff --git a/src/app/games/conspirateurs/ConspirateursTutorial.ts b/src/app/games/conspirateurs/ConspirateursTutorial.ts
index 661207907..41dd86d12 100644
--- a/src/app/games/conspirateurs/ConspirateursTutorial.ts
+++ b/src/app/games/conspirateurs/ConspirateursTutorial.ts
@@ -1,7 +1,7 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, ConspirateursMoveSimple } from './ConspirateursMove';
 import { ConspirateursState } from './ConspirateursState';
 import { ConspirateursRules } from './ConspirateursRules';
diff --git a/src/app/games/conspirateurs/conspirateurs.component.html b/src/app/games/conspirateurs/conspirateurs.component.html
index 0a80a2a73..18a461805 100644
--- a/src/app/games/conspirateurs/conspirateurs.component.html
+++ b/src/app/games/conspirateurs/conspirateurs.component.html
@@ -42,13 +42,13 @@
               [attr.height]="SPACE_SIZE - (3 * STROKE_WIDTH)"
         />
     </g>
-    <circle *ngFor="let y of ArrayUtils.range(viewInfo.sidePieces.get(Player.ZERO))"
+    <circle *ngFor="let y of ArrayUtils.range(viewInfo.sidePieces[0])"
             id="sidePiece_0_{{ y }}"
             [attr.cx]="-PIECE_RADIUS"
             [attr.cy]="1670 - y * PIECE_RADIUS"
             [attr.r]="PIECE_RADIUS - 5"
             class="base mid-stroke player0-fill"/>
-    <circle *ngFor="let y of ArrayUtils.range(viewInfo.sidePieces.get(Player.ONE))"
+    <circle *ngFor="let y of ArrayUtils.range(viewInfo.sidePieces[1])"
             id="sidePiece_1_{{ y }}"
             [attr.cx]="1715 + PIECE_RADIUS"
             [attr.cy]="1670 - y * PIECE_RADIUS"
diff --git a/src/app/games/conspirateurs/conspirateurs.component.ts b/src/app/games/conspirateurs/conspirateurs.component.ts
index 1201d99d5..2262125b5 100644
--- a/src/app/games/conspirateurs/conspirateurs.component.ts
+++ b/src/app/games/conspirateurs/conspirateurs.component.ts
@@ -5,9 +5,7 @@ import { Vector } from 'src/app/jscaip/Vector';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, ConspirateursMoveSimple } from './ConspirateursMove';
 import { ConspirateursRules } from './ConspirateursRules';
 import { ConspirateursState } from './ConspirateursState';
@@ -15,14 +13,13 @@ import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { ConspirateursMoveGenerator } from './ConspirateursMoveGenerator';
 import { ConspirateursJumpMinimax } from './ConspirateursJumpMinimax';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 interface ViewInfo {
     boardInfo: SquareInfo[][],
     dropPhase: boolean,
     victory: Coord[],
     lastMoveArrow: string,
-    sidePieces: PlayerNumberMap,
+    sidePieces: [number, number],
 }

 interface SquareInfo {
@@ -54,7 +51,7 @@ export class ConspirateursComponent extends GameComponent<ConspirateursRules, Co
         boardInfo: [],
         victory: [],
         lastMoveArrow: '',
-        sidePieces: PlayerNumberMap.of(20, 20),
+        sidePieces: [20, 20],
     };
     private selected: MGPOptional<Coord> = MGPOptional.empty();

diff --git a/src/app/games/conspirateurs/tests/ConspirateursHeuristic.spec.ts b/src/app/games/conspirateurs/tests/ConspirateursHeuristic.spec.ts
index 9dedc79cb..d973c76c2 100644
--- a/src/app/games/conspirateurs/tests/ConspirateursHeuristic.spec.ts
+++ b/src/app/games/conspirateurs/tests/ConspirateursHeuristic.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { ConspirateursHeuristic } from '../ConspirateursHeuristic';
 import { ConspirateursState } from '../ConspirateursState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/conspirateurs/tests/ConspirateursMove.spec.ts b/src/app/games/conspirateurs/tests/ConspirateursMove.spec.ts
index 31572737b..fd59c6708 100644
--- a/src/app/games/conspirateurs/tests/ConspirateursMove.spec.ts
+++ b/src/app/games/conspirateurs/tests/ConspirateursMove.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { ConspirateursFailure } from '../ConspirateursFailure';
 import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, ConspirateursMoveSimple } from '../ConspirateursMove';

diff --git a/src/app/games/conspirateurs/tests/ConspirateursRules.spec.ts b/src/app/games/conspirateurs/tests/ConspirateursRules.spec.ts
index 4d2e9fab5..b8049c46f 100644
--- a/src/app/games/conspirateurs/tests/ConspirateursRules.spec.ts
+++ b/src/app/games/conspirateurs/tests/ConspirateursRules.spec.ts
@@ -8,7 +8,7 @@ import { ConspirateursMove, ConspirateursMoveDrop, ConspirateursMoveJump, Conspi
 import { ConspirateursNode, ConspirateursRules } from '../ConspirateursRules';
 import { ConspirateursState } from '../ConspirateursState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';

 describe('ConspirateursRules', () => {
     const _: PlayerOrNone = PlayerOrNone.NONE;
diff --git a/src/app/games/diaballik/DiaballikFilteredMoveGenerator.ts b/src/app/games/diaballik/DiaballikFilteredMoveGenerator.ts
index 37236a5ab..a121a038e 100644
--- a/src/app/games/diaballik/DiaballikFilteredMoveGenerator.ts
+++ b/src/app/games/diaballik/DiaballikFilteredMoveGenerator.ts
@@ -1,4 +1,4 @@
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { DiaballikMove } from './DiaballikMove';
 import { DiaballikMoveGenerator, DiaballikMoveInConstruction } from './DiaballikMoveGenerator';
 import { DiaballikNode } from './DiaballikRules';
diff --git a/src/app/games/diaballik/DiaballikMove.ts b/src/app/games/diaballik/DiaballikMove.ts
index 21e7115cb..272cf81fe 100644
--- a/src/app/games/diaballik/DiaballikMove.ts
+++ b/src/app/games/diaballik/DiaballikMove.ts
@@ -1,9 +1,6 @@
 import { Move } from 'src/app/jscaip/Move';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Vector } from 'src/app/jscaip/Vector';
diff --git a/src/app/games/diaballik/DiaballikMoveGenerator.ts b/src/app/games/diaballik/DiaballikMoveGenerator.ts
index 827ac6b34..5348cfe73 100644
--- a/src/app/games/diaballik/DiaballikMoveGenerator.ts
+++ b/src/app/games/diaballik/DiaballikMoveGenerator.ts
@@ -5,12 +5,7 @@ import { DiaballikNode, DiaballikRules } from './DiaballikRules';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction, Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { ComparableObject } from 'src/app/utils/Comparable';
+import { ArrayUtils, ComparableObject, MGPFallible, MGPOptional, MGPSet, Utils } from '@everyboard/lib';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export class DiaballikMoveInConstruction implements ComparableObject {
diff --git a/src/app/games/diaballik/DiaballikRules.ts b/src/app/games/diaballik/DiaballikRules.ts
index f9bfcce62..617d9446b 100644
--- a/src/app/games/diaballik/DiaballikRules.ts
+++ b/src/app/games/diaballik/DiaballikRules.ts
@@ -1,21 +1,17 @@
 import { Rules } from 'src/app/jscaip/Rules';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { DiaballikMove, DiaballikBallPass, DiaballikSubMove, DiaballikTranslation } from './DiaballikMove';
 import { DiaballikPiece, DiaballikState } from './DiaballikState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction, Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPFallible, MGPOptional, MGPSet, Utils } from '@everyboard/lib';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { DiaballikFailure } from './DiaballikFailure';
-import { Utils } from 'src/app/utils/utils';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { CoordFailure } from '../../jscaip/Coord';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerMap } from 'src/app/jscaip/PlayerMap';

 export class VictoryOrDefeatCoords {
     protected constructor(public readonly winner: Player) {}
@@ -219,16 +215,16 @@ export class DiaballikRules extends Rules<DiaballikMove, DiaballikState, Diaball
         // and that if three opponent's pieces are touching the line, then the blocker loses
         // We check this one player at a time.
         // In case both players form a line, the one that just moved wins.
-        const blocking: PlayerMap<MGPOptional<DefeatCoords>> = PlayerMap.ofValues(
+        const blocking: [MGPOptional<DefeatCoords>, MGPOptional<DefeatCoords>] = [
             this.getBlockerCoords(state, Player.ZERO),
             this.getBlockerCoords(state, Player.ONE),
-        );
-        if (blocking.get(Player.ZERO).isPresent() && blocking.get(Player.ONE).isPresent()) {
+        ];
+        if (blocking[0].isPresent() && blocking[1].isPresent()) {
             // Both players form a line, so the current player loses
-            return blocking.get(state.getCurrentPlayer());
+            return blocking[state.getCurrentPlayer().getValue()];
         }
-        if (blocking.get(Player.ZERO).isPresent()) return blocking.get(Player.ZERO);
-        if (blocking.get(Player.ONE).isPresent()) return blocking.get(Player.ONE);
+        if (blocking[0].isPresent()) return blocking[0];
+        if (blocking[1].isPresent()) return blocking[1];
         return MGPOptional.empty();
     }

diff --git a/src/app/games/diaballik/DiaballikState.ts b/src/app/games/diaballik/DiaballikState.ts
index 9b1451a8f..dc20dae53 100644
--- a/src/app/games/diaballik/DiaballikState.ts
+++ b/src/app/games/diaballik/DiaballikState.ts
@@ -1,7 +1,7 @@
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { TableUtils } from '../../utils/ArrayUtils';
+import { ComparableObject } from '@everyboard/lib';
+import { TableUtils } from 'src/app/jscaip/TableUtils';

 export class DiaballikPiece implements ComparableObject {

@@ -24,6 +24,6 @@ export class DiaballikPiece implements ComparableObject {
 export class DiaballikState extends GameStateWithTable<DiaballikPiece> {

     public equals(other: DiaballikState): boolean {
-        return TableUtils.compare(this.board, other.board);
+        return TableUtils.equals(this.board, other.board);
     }
 }
diff --git a/src/app/games/diaballik/DiaballikTutorial.ts b/src/app/games/diaballik/DiaballikTutorial.ts
index ea5f6238b..5010f3cde 100644
--- a/src/app/games/diaballik/DiaballikTutorial.ts
+++ b/src/app/games/diaballik/DiaballikTutorial.ts
@@ -2,7 +2,7 @@ import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tu
 import { DiaballikPiece, DiaballikState } from './DiaballikState';
 import { DiaballikMove, DiaballikBallPass, DiaballikTranslation } from './DiaballikMove';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { DiaballikRules } from './DiaballikRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

diff --git a/src/app/games/diaballik/diaballik.component.ts b/src/app/games/diaballik/diaballik.component.ts
index 125b7959e..eae8fbae3 100644
--- a/src/app/games/diaballik/diaballik.component.ts
+++ b/src/app/games/diaballik/diaballik.component.ts
@@ -3,15 +3,12 @@ import { DefeatCoords, DiaballikRules, VictoryCoord, VictoryOrDefeatCoords } fro
 import { DiaballikMove, DiaballikBallPass, DiaballikSubMove, DiaballikTranslation } from './DiaballikMove';
 import { DiaballikPiece, DiaballikState } from './DiaballikState';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { DiaballikMinimax } from './DiaballikMinimax';
 import { DiaballikMoveGenerator } from './DiaballikMoveGenerator';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
-import { Utils } from 'src/app/utils/utils';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
 import { DiaballikFailure } from './DiaballikFailure';
 import { Line } from 'src/app/jscaip/Line';
diff --git a/src/app/games/diaballik/tests/DiaballikDistanceHeuristic.spec.ts b/src/app/games/diaballik/tests/DiaballikDistanceHeuristic.spec.ts
index 90fe10cf4..950dc935c 100644
--- a/src/app/games/diaballik/tests/DiaballikDistanceHeuristic.spec.ts
+++ b/src/app/games/diaballik/tests/DiaballikDistanceHeuristic.spec.ts
@@ -1,4 +1,4 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { DiaballikDistanceHeuristic } from '../DiaballikDistanceHeuristic';
 import { DiaballikPiece, DiaballikState } from '../DiaballikState';
 import { Player } from 'src/app/jscaip/Player';
diff --git a/src/app/games/diaballik/tests/DiaballikMove.spec.ts b/src/app/games/diaballik/tests/DiaballikMove.spec.ts
index f150025f4..ab8ee6702 100644
--- a/src/app/games/diaballik/tests/DiaballikMove.spec.ts
+++ b/src/app/games/diaballik/tests/DiaballikMove.spec.ts
@@ -1,11 +1,8 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPFallible, MGPOptional, TestUtils } from '@everyboard/lib';
 import { DiaballikMove, DiaballikBallPass, DiaballikTranslation } from '../DiaballikMove';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { DiaballikFailure } from '../DiaballikFailure';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('DiaballikMove', () => {

diff --git a/src/app/games/diaballik/tests/DiaballikMoveGenerator.spec.ts b/src/app/games/diaballik/tests/DiaballikMoveGenerator.spec.ts
index fb07ee697..9914941e6 100644
--- a/src/app/games/diaballik/tests/DiaballikMoveGenerator.spec.ts
+++ b/src/app/games/diaballik/tests/DiaballikMoveGenerator.spec.ts
@@ -1,12 +1,10 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional, MGPSet } from '@everyboard/lib';
 import { DiaballikBallPass, DiaballikMove, DiaballikSubMove, DiaballikTranslation } from '../DiaballikMove';
 import { DiaballikMoveGenerator, DiaballikMoveInConstruction } from '../DiaballikMoveGenerator';
 import { DiaballikNode, DiaballikRules } from '../DiaballikRules';
 import { DiaballikPiece, DiaballikState } from '../DiaballikState';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('DiaballikMoveInConstruction', () => {
diff --git a/src/app/games/diaballik/tests/DiaballikRules.spec.ts b/src/app/games/diaballik/tests/DiaballikRules.spec.ts
index 58362b975..1b054bf1d 100644
--- a/src/app/games/diaballik/tests/DiaballikRules.spec.ts
+++ b/src/app/games/diaballik/tests/DiaballikRules.spec.ts
@@ -3,12 +3,11 @@ import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { DiaballikMove, DiaballikBallPass, DiaballikTranslation, DiaballikSubMove } from '../DiaballikMove';
 import { DiaballikNode, DiaballikRules } from '../DiaballikRules';
 import { DiaballikPiece, DiaballikState } from '../DiaballikState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, TestUtils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Player } from 'src/app/jscaip/Player';
 import { DiaballikFailure } from '../DiaballikFailure';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { CoordFailure } from '../../../jscaip/Coord';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/diaballik/tests/diaballik.component.spec.ts b/src/app/games/diaballik/tests/diaballik.component.spec.ts
index 26b2def1a..3493e22c4 100644
--- a/src/app/games/diaballik/tests/diaballik.component.spec.ts
+++ b/src/app/games/diaballik/tests/diaballik.component.spec.ts
@@ -3,7 +3,7 @@ import { fakeAsync } from '@angular/core/testing';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { DiaballikComponent } from '../diaballik.component';
 import { DiaballikMove, DiaballikBallPass, DiaballikTranslation } from '../DiaballikMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { DiaballikPiece, DiaballikState } from '../DiaballikState';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
diff --git a/src/app/games/diam/DiamMove.ts b/src/app/games/diam/DiamMove.ts
index b719c56e4..dd8877d0e 100644
--- a/src/app/games/diam/DiamMove.ts
+++ b/src/app/games/diam/DiamMove.ts
@@ -1,7 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Move } from 'src/app/jscaip/Move';
 import { DiamPiece } from './DiamPiece';
-import { Encoder } from '../../utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 export abstract class DiamMove extends Move {

diff --git a/src/app/games/diam/DiamPiece.ts b/src/app/games/diam/DiamPiece.ts
index 57f67b756..e68ec509a 100644
--- a/src/app/games/diam/DiamPiece.ts
+++ b/src/app/games/diam/DiamPiece.ts
@@ -1,4 +1,4 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';

 export class DiamPiece {
diff --git a/src/app/games/diam/DiamRules.ts b/src/app/games/diam/DiamRules.ts
index cd157a0eb..552b894cd 100644
--- a/src/app/games/diam/DiamRules.ts
+++ b/src/app/games/diam/DiamRules.ts
@@ -3,15 +3,13 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { ArrayUtils, Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { ArrayUtils, MGPValidation, MGPOptional, Utils } from '@everyboard/lib';
 import { DiamFailure } from './DiamFailure';
 import { DiamMove, DiamMoveDrop, DiamMoveShift } from './DiamMove';
 import { DiamPiece } from './DiamPiece';
 import { DiamState } from './DiamState';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { Utils } from 'src/app/utils/utils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export class DiamNode extends GameNode<DiamMove, DiamState> {}
diff --git a/src/app/games/diam/DiamState.ts b/src/app/games/diam/DiamState.ts
index 4bb6b2794..a193b8188 100644
--- a/src/app/games/diam/DiamState.ts
+++ b/src/app/games/diam/DiamState.ts
@@ -1,7 +1,6 @@
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { Utils } from '@everyboard/lib';
 import { DiamPiece } from './DiamPiece';

 export class DiamState extends GameStateWithTable<DiamPiece> {
@@ -21,8 +20,8 @@ export class DiamState extends GameStateWithTable<DiamPiece> {
                 }
             }
         }
-        assert(pieces.every((remaining: number) => 0 <= remaining),
-               'Invalid DiamState representation uses too many pieces');
+        Utils.assert(pieces.every((remaining: number) => 0 <= remaining),
+                     'Invalid DiamState representation uses too many pieces');
         return new DiamState(board, pieces, turn);
     }
     public static pieceIndex(piece: DiamPiece): number {
diff --git a/src/app/games/diam/diam.component.ts b/src/app/games/diam/diam.component.ts
index 22032bd20..48f2a3280 100644
--- a/src/app/games/diam/diam.component.ts
+++ b/src/app/games/diam/diam.component.ts
@@ -5,14 +5,12 @@ import { Vector } from 'src/app/jscaip/Vector';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPMap, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { DiamFailure } from './DiamFailure';
 import { DiamMove, DiamMoveDrop, DiamMoveEncoder, DiamMoveShift } from './DiamMove';
 import { DiamPiece } from './DiamPiece';
 import { DiamRules } from './DiamRules';
 import { DiamState } from './DiamState';
-import { MGPMap } from 'src/app/utils/MGPMap';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { DummyHeuristic, Minimax } from 'src/app/jscaip/AI/Minimax';
 import { DiamMoveGenerator } from './DiamMoveGenerator';
diff --git a/src/app/games/diam/tests/DiamMove.spec.ts b/src/app/games/diam/tests/DiamMove.spec.ts
index 863730e68..38c002a0d 100644
--- a/src/app/games/diam/tests/DiamMove.spec.ts
+++ b/src/app/games/diam/tests/DiamMove.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { DiamMove, DiamMoveDrop, DiamMoveEncoder, DiamMoveShift } from '../DiamMove';
 import { DiamPiece } from '../DiamPiece';

diff --git a/src/app/games/diam/tests/DiamPiece.spec.ts b/src/app/games/diam/tests/DiamPiece.spec.ts
index af9ef1177..b4cb12b6f 100644
--- a/src/app/games/diam/tests/DiamPiece.spec.ts
+++ b/src/app/games/diam/tests/DiamPiece.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { DiamPiece } from '../DiamPiece';

 describe('DiamPiece', () => {
@@ -15,4 +15,10 @@ describe('DiamPiece', () => {
         expect(DiamPiece.ZERO_FIRST.toString()).toBe('DiamPiece(PLAYER_ZERO, false)');
     });

+    describe('equals', () => {
+        it('should detect equal pieces', () => {
+            expect(DiamPiece.ZERO_FIRST.equals(DiamPiece.ZERO_FIRST)).toBeTrue();
+            expect(DiamPiece.ZERO_FIRST.equals(DiamPiece.ZERO_SECOND)).toBeFalse();
+        });
+    });
 });
diff --git a/src/app/games/dvonn/DvonnMove.ts b/src/app/games/dvonn/DvonnMove.ts
index c01e3512f..75b425c0b 100644
--- a/src/app/games/dvonn/DvonnMove.ts
+++ b/src/app/games/dvonn/DvonnMove.ts
@@ -1,9 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPFallible } from '@everyboard/lib';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { DvonnState } from './DvonnState';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { DvonnFailure } from './DvonnFailure';

 export class DvonnMove extends MoveCoordToCoord {
diff --git a/src/app/games/dvonn/DvonnMoveGenerator.ts b/src/app/games/dvonn/DvonnMoveGenerator.ts
index 7cc96f367..1675ef055 100644
--- a/src/app/games/dvonn/DvonnMoveGenerator.ts
+++ b/src/app/games/dvonn/DvonnMoveGenerator.ts
@@ -2,7 +2,7 @@ import { DvonnMove } from './DvonnMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { DvonnNode, DvonnRules } from './DvonnRules';
 import { DvonnState } from './DvonnState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/dvonn/DvonnOrderedMoveGenerator.ts b/src/app/games/dvonn/DvonnOrderedMoveGenerator.ts
index 9b4fdbe69..61c07b73f 100644
--- a/src/app/games/dvonn/DvonnOrderedMoveGenerator.ts
+++ b/src/app/games/dvonn/DvonnOrderedMoveGenerator.ts
@@ -3,8 +3,7 @@ import { DvonnNode } from './DvonnRules';
 import { DvonnPieceStack } from './DvonnPieceStack';
 import { Player } from 'src/app/jscaip/Player';
 import { DvonnMove } from './DvonnMove';
-import { assert } from 'src/app/utils/assert';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, Utils } from '@everyboard/lib';
 import { DvonnMoveGenerator } from './DvonnMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

@@ -18,7 +17,7 @@ export class DvonnOrderedMoveGenerator extends DvonnMoveGenerator {
         const opponent: Player = state.getCurrentOpponent();
         ArrayUtils.sortByDescending(moves, (move: DvonnMove): number => {
             // We can't have DvonnMove.PASS here, because it would be the single move of the list
-            assert(move !== DvonnMove.PASS, 'Cannot sort with DvonnMove.PASS');
+            Utils.assert(move !== DvonnMove.PASS, 'Cannot sort with DvonnMove.PASS');

             const stack: DvonnPieceStack = state.getPieceAt(move.getEnd());
             const opponentPieces: number = stack.belongsTo(opponent) ? stack.getSize() : 0;
diff --git a/src/app/games/dvonn/DvonnPieceStack.ts b/src/app/games/dvonn/DvonnPieceStack.ts
index 1126ca56c..9de4919e2 100644
--- a/src/app/games/dvonn/DvonnPieceStack.ts
+++ b/src/app/games/dvonn/DvonnPieceStack.ts
@@ -1,5 +1,5 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 export class DvonnPieceStack {

diff --git a/src/app/games/dvonn/DvonnRules.ts b/src/app/games/dvonn/DvonnRules.ts
index ca1359da7..551703d97 100644
--- a/src/app/games/dvonn/DvonnRules.ts
+++ b/src/app/games/dvonn/DvonnRules.ts
@@ -4,17 +4,14 @@ import { DvonnPieceStack } from './DvonnPieceStack';
 import { DvonnMove } from './DvonnMove';
 import { Rules } from 'src/app/jscaip/Rules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { DvonnFailure } from './DvonnFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { Utils } from 'src/app/utils/utils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export class DvonnNode extends GameNode<DvonnMove, DvonnState> {}
diff --git a/src/app/games/dvonn/DvonnState.ts b/src/app/games/dvonn/DvonnState.ts
index 7299e2b67..7c047ff4b 100644
--- a/src/app/games/dvonn/DvonnState.ts
+++ b/src/app/games/dvonn/DvonnState.ts
@@ -1,8 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexagonalGameState } from 'src/app/jscaip/HexagonalGameState';
-import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { DvonnPieceStack } from './DvonnPieceStack';
+import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';

 export class DvonnState extends HexagonalGameState<DvonnPieceStack> {

diff --git a/src/app/games/dvonn/DvonnTutorial.ts b/src/app/games/dvonn/DvonnTutorial.ts
index d5ddbcf03..f49a8f05c 100644
--- a/src/app/games/dvonn/DvonnTutorial.ts
+++ b/src/app/games/dvonn/DvonnTutorial.ts
@@ -4,8 +4,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { DvonnPieceStack } from 'src/app/games/dvonn/DvonnPieceStack';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { assert } from 'src/app/utils/assert';
+import { MGPValidation, Utils } from '@everyboard/lib';
 import { DvonnRules } from './DvonnRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

@@ -56,7 +55,7 @@ export class DvonnTutorial extends Tutorial {
                 if (move.getEnd().equals(new Coord(3, 0))) {
                     return MGPValidation.failure($localize`You have successfully disconnected the stack of 4 pieces of your opponent, but on the next move your opponent will be able to move on your new stack, and to win the game! There exists a better outcome of this situation, try to find it.`);
                 } else {
-                    assert(move.getEnd().equals(new Coord(2, 0)), 'player made an impossible move'); // this is the only valid move remaining
+                    Utils.assert(move.getEnd().equals(new Coord(2, 0)), 'player made an impossible move'); // this is the only valid move remaining
                     return MGPValidation.SUCCESS;
                 }
             },
diff --git a/src/app/games/dvonn/dvonn.component.ts b/src/app/games/dvonn/dvonn.component.ts
index 40731e78a..b1fba0aea 100644
--- a/src/app/games/dvonn/dvonn.component.ts
+++ b/src/app/games/dvonn/dvonn.component.ts
@@ -4,21 +4,18 @@ import { DvonnMove } from 'src/app/games/dvonn/DvonnMove';
 import { DvonnState } from 'src/app/games/dvonn/DvonnState';
 import { DvonnRules } from 'src/app/games/dvonn/DvonnRules';
 import { DvonnPieceStack } from 'src/app/games/dvonn/DvonnPieceStack';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
 import { PointyHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { HexagonalGameComponent }
     from 'src/app/components/game-components/game-component/HexagonalGameComponent';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { DvonnScoreHeuristic } from './DvonnScoreHeuristic';
 import { DvonnOrderedMoveGenerator } from './DvonnOrderedMoveGenerator';
 import { DvonnMaxStacksHeuristic } from './DvonnMaxStacksHeuristic';
 import { DvonnMoveGenerator } from './DvonnMoveGenerator';
-import { Utils } from 'src/app/utils/utils';

 @Component({
     selector: 'app-dvonn',
diff --git a/src/app/games/dvonn/tests/DvonnMaxStacksHeuristic.spec.ts b/src/app/games/dvonn/tests/DvonnMaxStacksHeuristic.spec.ts
index 409fb949a..82b25bd90 100644
--- a/src/app/games/dvonn/tests/DvonnMaxStacksHeuristic.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnMaxStacksHeuristic.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { DvonnMaxStacksHeuristic } from '../DvonnMaxStacksHeuristic';
 import { DvonnPieceStack } from '../DvonnPieceStack';
diff --git a/src/app/games/dvonn/tests/DvonnMove.spec.ts b/src/app/games/dvonn/tests/DvonnMove.spec.ts
index a5d775ffe..aeff77e42 100644
--- a/src/app/games/dvonn/tests/DvonnMove.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnMove.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { DvonnMove } from '../DvonnMove';
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';

 describe('DvonnMove', () => {

diff --git a/src/app/games/dvonn/tests/DvonnMoveGenerator.spec.ts b/src/app/games/dvonn/tests/DvonnMoveGenerator.spec.ts
index 0cdf08b9c..fe87a6b10 100644
--- a/src/app/games/dvonn/tests/DvonnMoveGenerator.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnMoveGenerator.spec.ts
@@ -1,8 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { DvonnMove } from '../DvonnMove';
 import { DvonnMoveGenerator } from '../DvonnMoveGenerator';
 import { DvonnPieceStack } from '../DvonnPieceStack';
diff --git a/src/app/games/dvonn/tests/DvonnPieceStack.spec.ts b/src/app/games/dvonn/tests/DvonnPieceStack.spec.ts
index 66738da90..b34e907b7 100644
--- a/src/app/games/dvonn/tests/DvonnPieceStack.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnPieceStack.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { DvonnPieceStack } from '../DvonnPieceStack';

 describe('DvonnPieceStack', () => {
@@ -95,4 +95,12 @@ describe('DvonnPieceStack', () => {

     });

+    describe('equals', () => {
+        it('should detect equal stacks', () => {
+            expect(DvonnPieceStack.PLAYER_ZERO.equals(DvonnPieceStack.PLAYER_ZERO)).toBeTrue();
+            expect(DvonnPieceStack.PLAYER_ZERO.equals(DvonnPieceStack.PLAYER_ONE)).toBeFalse();
+            expect(DvonnPieceStack.PLAYER_ZERO.equals(DvonnPieceStack.SOURCE)).toBeFalse();
+            expect(DvonnPieceStack.PLAYER_ZERO.equals(stack4)).toBeFalse();
+        });
+    });
 });
diff --git a/src/app/games/dvonn/tests/DvonnRules.spec.ts b/src/app/games/dvonn/tests/DvonnRules.spec.ts
index d9fc27d08..74ca7dbb2 100644
--- a/src/app/games/dvonn/tests/DvonnRules.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnRules.spec.ts
@@ -9,8 +9,8 @@ import { DvonnNode, DvonnRules } from '../DvonnRules';
 import { DvonnFailure } from '../DvonnFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { Utils } from '@everyboard/lib';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

@@ -274,10 +274,10 @@ describe('DvonnRules', () => {
     describe('isMovablePiece', () => {

         it('should fail if the coord is not on the board', fakeAsync(() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             expect(() => rules.isMovablePiece(DvonnRules.get().getInitialState(), new Coord(-1, -1)))
                 .toThrowError('Assertion failure: piece is not on the board');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'piece is not on the board');
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', 'piece is not on the board', undefined);
         }));

     });
diff --git a/src/app/games/dvonn/tests/DvonnScoreHeuristic.spec.ts b/src/app/games/dvonn/tests/DvonnScoreHeuristic.spec.ts
index 57542dca0..a7fcd15cc 100644
--- a/src/app/games/dvonn/tests/DvonnScoreHeuristic.spec.ts
+++ b/src/app/games/dvonn/tests/DvonnScoreHeuristic.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { DvonnPieceStack } from '../DvonnPieceStack';
 import { DvonnNode, DvonnRules } from '../DvonnRules';
 import { DvonnScoreHeuristic } from '../DvonnScoreHeuristic';
diff --git a/src/app/games/dvonn/tests/dvonn.component.spec.ts b/src/app/games/dvonn/tests/dvonn.component.spec.ts
index ec1610343..de61083e8 100644
--- a/src/app/games/dvonn/tests/dvonn.component.spec.ts
+++ b/src/app/games/dvonn/tests/dvonn.component.spec.ts
@@ -8,7 +8,7 @@ import { Player } from 'src/app/jscaip/Player';
 import { fakeAsync } from '@angular/core/testing';
 import { DvonnFailure } from 'src/app/games/dvonn/DvonnFailure';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('DvonnComponent', () => {

diff --git a/src/app/games/encapsule/EncapsuleMove.ts b/src/app/games/encapsule/EncapsuleMove.ts
index 586a1f921..c8023eb4b 100644
--- a/src/app/games/encapsule/EncapsuleMove.ts
+++ b/src/app/games/encapsule/EncapsuleMove.ts
@@ -1,9 +1,7 @@
 import { Move } from 'src/app/jscaip/Move';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Encoder, MGPOptional, Utils } from '@everyboard/lib';
 import { EncapsulePiece } from './EncapsulePiece';
-import { Encoder } from 'src/app/utils/Encoder';
-import { Utils } from 'src/app/utils/utils';

 type EncapsuleMoveFields = [MGPOptional<Coord>, Coord, MGPOptional<EncapsulePiece>];

diff --git a/src/app/games/encapsule/EncapsuleMoveGenerator.ts b/src/app/games/encapsule/EncapsuleMoveGenerator.ts
index 843b54d3e..a3669d575 100644
--- a/src/app/games/encapsule/EncapsuleMoveGenerator.ts
+++ b/src/app/games/encapsule/EncapsuleMoveGenerator.ts
@@ -1,12 +1,11 @@
 import { EncapsuleState, EncapsuleSpace } from './EncapsuleState';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Sets } from 'src/app/utils/Sets';
+import { MGPFallible, Sets } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { EncapsuleMove } from './EncapsuleMove';
 import { EncapsulePiece } from './EncapsulePiece';
 import { EncapsuleRules, EncapsuleNode, EncapsuleLegalityInformation } from './EncapsuleRules';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/encapsule/EncapsulePiece.ts b/src/app/games/encapsule/EncapsulePiece.ts
index d4ecac9c5..9610fe142 100644
--- a/src/app/games/encapsule/EncapsulePiece.ts
+++ b/src/app/games/encapsule/EncapsulePiece.ts
@@ -1,7 +1,5 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { Encoder } from 'src/app/utils/Encoder';
-import { Utils } from 'src/app/utils/utils';
+import { ComparableObject, Encoder, Utils } from '@everyboard/lib';

 export enum Size {
     NONE = 0,
diff --git a/src/app/games/encapsule/EncapsuleRules.ts b/src/app/games/encapsule/EncapsuleRules.ts
index bbbc3f79d..a05a99777 100644
--- a/src/app/games/encapsule/EncapsuleRules.ts
+++ b/src/app/games/encapsule/EncapsuleRules.ts
@@ -3,15 +3,14 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { EncapsuleState, EncapsuleSpace } from './EncapsuleState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { EncapsuleMove } from './EncapsuleMove';
 import { EncapsulePiece } from './EncapsulePiece';
 import { EncapsuleFailure } from './EncapsuleFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { Debug } from 'src/app/utils/utils';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { Debug } from 'src/app/utils/Debug';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export type EncapsuleLegalityInformation = EncapsuleSpace;
diff --git a/src/app/games/encapsule/EncapsuleState.ts b/src/app/games/encapsule/EncapsuleState.ts
index b23685e1c..a17b36dfc 100644
--- a/src/app/games/encapsule/EncapsuleState.ts
+++ b/src/app/games/encapsule/EncapsuleState.ts
@@ -1,10 +1,8 @@
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { EncapsulePiece, Size } from 'src/app/games/encapsule/EncapsulePiece';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { ArrayUtils, Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { ArrayUtils, MGPOptional, Utils } from '@everyboard/lib';

 export class EncapsuleState extends GameStateWithTable<EncapsuleSpace> {

@@ -114,12 +112,12 @@ export class EncapsuleSpace {
             case Size.BIG:
                 return new EncapsuleSpace(this.small, this.medium, piecePlayer);
             case Size.MEDIUM:
-                assert(this.big === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
+                Utils.assert(this.big === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
                 return new EncapsuleSpace(this.small, piecePlayer, this.big);
             default:
                 Utils.expectToBe(size, Size.SMALL);
-                assert(this.big === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
-                assert(this.medium === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
+                Utils.assert(this.big === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
+                Utils.assert(this.medium === PlayerOrNone.NONE, 'Cannot put a piece on top of a bigger one');
                 return new EncapsuleSpace(piecePlayer, this.medium, this.big);
         }
     }
diff --git a/src/app/games/encapsule/EncapsuleTutorial.ts b/src/app/games/encapsule/EncapsuleTutorial.ts
index 1cf23b8aa..182870d77 100644
--- a/src/app/games/encapsule/EncapsuleTutorial.ts
+++ b/src/app/games/encapsule/EncapsuleTutorial.ts
@@ -3,7 +3,7 @@ import { EncapsulePiece } from 'src/app/games/encapsule/EncapsulePiece';
 import { EncapsuleSpace, EncapsuleState } from 'src/app/games/encapsule/EncapsuleState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { EncapsuleRules } from './EncapsuleRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
diff --git a/src/app/games/encapsule/encapsule.component.ts b/src/app/games/encapsule/encapsule.component.ts
index 88a9fbc64..90a7aacf3 100644
--- a/src/app/games/encapsule/encapsule.component.ts
+++ b/src/app/games/encapsule/encapsule.component.ts
@@ -6,13 +6,9 @@ import { EncapsuleMove } from 'src/app/games/encapsule/EncapsuleMove';
 import { EncapsulePiece, Size } from 'src/app/games/encapsule/EncapsulePiece';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { EncapsuleFailure } from './EncapsuleFailure';
-import { Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
-import { MGPMap } from 'src/app/utils/MGPMap';
+import { MGPMap, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { DummyHeuristic, Minimax } from 'src/app/jscaip/AI/Minimax';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';
@@ -164,7 +160,7 @@ export class EncapsuleComponent extends RectangularGameComponent<EncapsuleRules,

     private getPieceStrokeClass(piece: EncapsulePiece): string {
         const player: PlayerOrNone = piece.getPlayer();
-        assert(player.isPlayer(), 'EncapsuleComponent.getPieceStrokeClass should only be called with actual pieces!');
+        Utils.assert(player.isPlayer(), 'EncapsuleComponent.getPieceStrokeClass should only be called with actual pieces!');
         return 'player' + player.getValue() + '-stroke';
     }

diff --git a/src/app/games/encapsule/tests/EncapsuleMove.spec.ts b/src/app/games/encapsule/tests/EncapsuleMove.spec.ts
index a9d222c8e..8912590c3 100644
--- a/src/app/games/encapsule/tests/EncapsuleMove.spec.ts
+++ b/src/app/games/encapsule/tests/EncapsuleMove.spec.ts
@@ -3,7 +3,7 @@ import { EncapsuleRules } from '../EncapsuleRules';
 import { Coord } from 'src/app/jscaip/Coord';
 import { EncapsulePiece } from '../EncapsulePiece';
 import { EncapsuleMove } from '../EncapsuleMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { EncapsuleMoveGenerator } from '../EncapsuleMoveGenerator';

diff --git a/src/app/games/encapsule/tests/EncapsuleRules.spec.ts b/src/app/games/encapsule/tests/EncapsuleRules.spec.ts
index 6ca197d13..179ab6e73 100644
--- a/src/app/games/encapsule/tests/EncapsuleRules.spec.ts
+++ b/src/app/games/encapsule/tests/EncapsuleRules.spec.ts
@@ -5,11 +5,11 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { EncapsuleSpace, EncapsuleState } from '../EncapsuleState';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { EncapsulePiece } from '../EncapsulePiece';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { EncapsuleFailure } from '../EncapsuleFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('EncapsuleRules', () => {
diff --git a/src/app/games/encapsule/tests/EncapsuleState.spec.ts b/src/app/games/encapsule/tests/EncapsuleState.spec.ts
index 884d26acb..2adae27cc 100644
--- a/src/app/games/encapsule/tests/EncapsuleState.spec.ts
+++ b/src/app/games/encapsule/tests/EncapsuleState.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { EncapsulePiece } from 'src/app/games/encapsule/EncapsulePiece';
 import { EncapsuleSpace, EncapsuleState } from '../EncapsuleState';

diff --git a/src/app/games/epaminondas/EpaminondasAttackHeuristic.ts b/src/app/games/epaminondas/EpaminondasAttackHeuristic.ts
index 9e9c7266c..7ef7cf7e5 100644
--- a/src/app/games/epaminondas/EpaminondasAttackHeuristic.ts
+++ b/src/app/games/epaminondas/EpaminondasAttackHeuristic.ts
@@ -5,7 +5,7 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { EpaminondasState } from './EpaminondasState';
 import { EpaminondasConfig, EpaminondasNode } from './EpaminondasRules';
 import { EpaminondasHeuristic } from './EpaminondasHeuristic';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class EpaminondasAttackHeuristic extends EpaminondasHeuristic {

diff --git a/src/app/games/epaminondas/EpaminondasMove.ts b/src/app/games/epaminondas/EpaminondasMove.ts
index 241f06aec..03d2e6a8a 100644
--- a/src/app/games/epaminondas/EpaminondasMove.ts
+++ b/src/app/games/epaminondas/EpaminondasMove.ts
@@ -1,8 +1,7 @@
 import { Direction } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Utils } from 'src/app/utils/utils';

 type EpaminondasMoveFields = [Coord, number, number, Direction];

diff --git a/src/app/games/epaminondas/EpaminondasMoveGenerator.ts b/src/app/games/epaminondas/EpaminondasMoveGenerator.ts
index f403dab6f..4f316011c 100644
--- a/src/app/games/epaminondas/EpaminondasMoveGenerator.ts
+++ b/src/app/games/epaminondas/EpaminondasMoveGenerator.ts
@@ -4,9 +4,8 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { EpaminondasMove } from './EpaminondasMove';
 import { EpaminondasState } from './EpaminondasState';
 import { EpaminondasNode, EpaminondasLegalityInformation, EpaminondasRules, EpaminondasConfig } from './EpaminondasRules';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class EpaminondasMoveGenerator extends MoveGenerator<EpaminondasMove, EpaminondasState, EpaminondasConfig> {

diff --git a/src/app/games/epaminondas/EpaminondasOrderedMoveGenerator.ts b/src/app/games/epaminondas/EpaminondasOrderedMoveGenerator.ts
index a627b4922..34f43d57f 100644
--- a/src/app/games/epaminondas/EpaminondasOrderedMoveGenerator.ts
+++ b/src/app/games/epaminondas/EpaminondasOrderedMoveGenerator.ts
@@ -1,8 +1,7 @@
 import { EpaminondasMove } from './EpaminondasMove';
-import { EpaminondasConfig, EpaminondasNode } from './EpaminondasRules';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { EpaminondasNode } from './EpaminondasRules';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { EpaminondasMoveGenerator } from './EpaminondasMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class EpaminondasOrderedMoveGenerator extends EpaminondasMoveGenerator {

diff --git a/src/app/games/epaminondas/EpaminondasPhalanxSizeAndFilterMoveGenerator.ts b/src/app/games/epaminondas/EpaminondasPhalanxSizeAndFilterMoveGenerator.ts
index 90bcf7ba5..c7357d318 100644
--- a/src/app/games/epaminondas/EpaminondasPhalanxSizeAndFilterMoveGenerator.ts
+++ b/src/app/games/epaminondas/EpaminondasPhalanxSizeAndFilterMoveGenerator.ts
@@ -1,10 +1,9 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { EpaminondasMove } from './EpaminondasMove';
 import { EpaminondasState } from './EpaminondasState';
 import { EpaminondasConfig, EpaminondasNode } from './EpaminondasRules';
 import { EpaminondasMoveGenerator } from './EpaminondasMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class EpaminondasPhalanxSizeAndFilterMoveGenerator extends EpaminondasMoveGenerator {

diff --git a/src/app/games/epaminondas/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.ts b/src/app/games/epaminondas/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.ts
index e75d411ee..12c5c75aa 100644
--- a/src/app/games/epaminondas/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.ts
+++ b/src/app/games/epaminondas/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.ts
@@ -3,7 +3,7 @@ import { Direction } from 'src/app/jscaip/Direction';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { EpaminondasConfig, EpaminondasNode } from './EpaminondasRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { EpaminondasHeuristic } from './EpaminondasHeuristic';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/epaminondas/EpaminondasPositionalHeuristic.ts b/src/app/games/epaminondas/EpaminondasPositionalHeuristic.ts
index de77ab756..9be4e693e 100644
--- a/src/app/games/epaminondas/EpaminondasPositionalHeuristic.ts
+++ b/src/app/games/epaminondas/EpaminondasPositionalHeuristic.ts
@@ -6,7 +6,7 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { EpaminondasMove } from './EpaminondasMove';
 import { EpaminondasState } from './EpaminondasState';
 import { EpaminondasConfig, EpaminondasNode } from './EpaminondasRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class EpaminondasPositionalHeuristic
     extends Heuristic<EpaminondasMove, EpaminondasState, BoardValue, EpaminondasConfig>
diff --git a/src/app/games/epaminondas/EpaminondasRules.ts b/src/app/games/epaminondas/EpaminondasRules.ts
index 7e1a842a2..fb0b758dd 100644
--- a/src/app/games/epaminondas/EpaminondasRules.ts
+++ b/src/app/games/epaminondas/EpaminondasRules.ts
@@ -1,5 +1,4 @@
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { GameNode } from 'src/app/jscaip/AI/GameNode';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { ConfigurableRules } from 'src/app/jscaip/Rules';
@@ -7,12 +6,11 @@ import { EpaminondasMove } from './EpaminondasMove';
 import { EpaminondasState } from './EpaminondasState';
 import { EpaminondasFailure } from './EpaminondasFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
+import { GameNode } from 'src/app/jscaip/AI/GameNode';

 export type EpaminondasConfig = {
     width: number;
diff --git a/src/app/games/epaminondas/EpaminondasTutorial.ts b/src/app/games/epaminondas/EpaminondasTutorial.ts
index 0dcc265a8..378f4b9b7 100644
--- a/src/app/games/epaminondas/EpaminondasTutorial.ts
+++ b/src/app/games/epaminondas/EpaminondasTutorial.ts
@@ -2,10 +2,9 @@ import { EpaminondasMove } from 'src/app/games/epaminondas/EpaminondasMove';
 import { EpaminondasState } from 'src/app/games/epaminondas/EpaminondasState';
 import { Direction } from 'src/app/jscaip/Direction';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { EpaminondasConfig, EpaminondasRules } from './EpaminondasRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/epaminondas/epaminondas.component.ts b/src/app/games/epaminondas/epaminondas.component.ts
index d3640a762..7e2d1e73a 100644
--- a/src/app/games/epaminondas/epaminondas.component.ts
+++ b/src/app/games/epaminondas/epaminondas.component.ts
@@ -1,6 +1,5 @@
 import { Component } from '@angular/core';
-
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { EpaminondasMove } from 'src/app/games/epaminondas/EpaminondasMove';
 import { EpaminondasState } from 'src/app/games/epaminondas/EpaminondasState';
 import { EpaminondasConfig, EpaminondasLegalityInformation, EpaminondasNode, EpaminondasRules } from 'src/app/games/epaminondas/EpaminondasRules';
@@ -11,8 +10,6 @@ import { RectangularGameComponent } from '../../components/game-components/recta
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { EpaminondasFailure } from './EpaminondasFailure';
-import { Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { EpaminondasMoveGenerator } from './EpaminondasMoveGenerator';
 import { EpaminondasAttackMinimax } from './EpaminondasAttackMinimax';
diff --git a/src/app/games/epaminondas/tests/EpaminondasAttackHeuristic.spec.ts b/src/app/games/epaminondas/tests/EpaminondasAttackHeuristic.spec.ts
index 8e9468331..ab3912106 100644
--- a/src/app/games/epaminondas/tests/EpaminondasAttackHeuristic.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasAttackHeuristic.spec.ts
@@ -1,9 +1,9 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { EpaminondasState } from '../EpaminondasState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { EpaminondasAttackHeuristic } from '../EpaminondasAttackHeuristic';
 import { EpaminondasConfig, EpaminondasRules } from '../EpaminondasRules';

diff --git a/src/app/games/epaminondas/tests/EpaminondasAttackMinimax.spec.ts b/src/app/games/epaminondas/tests/EpaminondasAttackMinimax.spec.ts
index c92c20928..bed7e39b0 100644
--- a/src/app/games/epaminondas/tests/EpaminondasAttackMinimax.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasAttackMinimax.spec.ts
@@ -1,14 +1,14 @@
 /* eslint-disable max-lines-per-function */
 import { Direction } from 'src/app/jscaip/Direction';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { EpaminondasMove } from '../EpaminondasMove';
 import { EpaminondasState } from '../EpaminondasState';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { EpaminondasConfig, EpaminondasLegalityInformation, EpaminondasNode, EpaminondasRules } from '../EpaminondasRules';
 import { EpaminondasAttackMinimax } from '../EpaminondasAttackMinimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/epaminondas/tests/EpaminondasMinimax.spec.ts b/src/app/games/epaminondas/tests/EpaminondasMinimax.spec.ts
index 49ad46151..b1227232f 100644
--- a/src/app/games/epaminondas/tests/EpaminondasMinimax.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasMinimax.spec.ts
@@ -3,13 +3,13 @@ import { Direction } from 'src/app/jscaip/Direction';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { EpaminondasConfig, EpaminondasLegalityInformation, EpaminondasRules } from '../EpaminondasRules';
 import { EpaminondasMove } from '../EpaminondasMove';
 import { EpaminondasState } from '../EpaminondasState';
 import { EpaminondasNode } from '../EpaminondasRules';
 import { EpaminondasMinimax } from '../EpaminondasMinimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/epaminondas/tests/EpaminondasMove.spec.ts b/src/app/games/epaminondas/tests/EpaminondasMove.spec.ts
index be3e40a47..068a56793 100644
--- a/src/app/games/epaminondas/tests/EpaminondasMove.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasMove.spec.ts
@@ -4,7 +4,7 @@ import { EpaminondasRules } from '../EpaminondasRules';
 import { EpaminondasMove } from '../EpaminondasMove';
 import { EpaminondasMoveGenerator } from '../EpaminondasMoveGenerator';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';

 describe('EpaminondasMove: ', () => {

diff --git a/src/app/games/epaminondas/tests/EpaminondasMoveGenerator.spec.ts b/src/app/games/epaminondas/tests/EpaminondasMoveGenerator.spec.ts
index fddaa282e..09c16c0fd 100644
--- a/src/app/games/epaminondas/tests/EpaminondasMoveGenerator.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasMoveGenerator.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { EpaminondasMoveGenerator } from '../EpaminondasMoveGenerator';
 import { EpaminondasConfig, EpaminondasNode, EpaminondasRules } from '../EpaminondasRules';

diff --git a/src/app/games/epaminondas/tests/EpaminondasPhalanxSizeAndFilterMoveGenerator.spec.ts b/src/app/games/epaminondas/tests/EpaminondasPhalanxSizeAndFilterMoveGenerator.spec.ts
index e26554621..97d7f8014 100644
--- a/src/app/games/epaminondas/tests/EpaminondasPhalanxSizeAndFilterMoveGenerator.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasPhalanxSizeAndFilterMoveGenerator.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { EpaminondasMove } from '../EpaminondasMove';
 import { EpaminondasState } from '../EpaminondasState';
 import { EpaminondasConfig, EpaminondasNode, EpaminondasRules } from '../EpaminondasRules';
 import { EpaminondasPhalanxSizeAndFilterMoveGenerator } from '../EpaminondasPhalanxSizeAndFilterMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/epaminondas/tests/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.spec.ts b/src/app/games/epaminondas/tests/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.spec.ts
index c83f335d4..8fea30d9b 100644
--- a/src/app/games/epaminondas/tests/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic } from '../EpaminondasPieceThenRowDominationThenAlignementThenRowPresenceHeuristic';
 import { EpaminondasState } from '../EpaminondasState';
 import { EpaminondasConfig, EpaminondasRules } from '../EpaminondasRules';
diff --git a/src/app/games/epaminondas/tests/EpaminondasPositionalHeuristic.spec.ts b/src/app/games/epaminondas/tests/EpaminondasPositionalHeuristic.spec.ts
index c26af7ef4..a3f316bfc 100644
--- a/src/app/games/epaminondas/tests/EpaminondasPositionalHeuristic.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasPositionalHeuristic.spec.ts
@@ -1,9 +1,9 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { EpaminondasPositionalHeuristic } from '../EpaminondasPositionalHeuristic';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { EpaminondasState } from '../EpaminondasState';
 import { EpaminondasConfig, EpaminondasRules } from '../EpaminondasRules';

diff --git a/src/app/games/epaminondas/tests/EpaminondasPositionalMinimax.spec.ts b/src/app/games/epaminondas/tests/EpaminondasPositionalMinimax.spec.ts
index 625753d99..70ca3ae95 100644
--- a/src/app/games/epaminondas/tests/EpaminondasPositionalMinimax.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasPositionalMinimax.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
@@ -8,7 +8,7 @@ import { EpaminondasState } from '../EpaminondasState';
 import { EpaminondasConfig, EpaminondasLegalityInformation, EpaminondasNode, EpaminondasRules } from '../EpaminondasRules';
 import { EpaminondasMove } from '../EpaminondasMove';
 import { EpaminondasPositionalMinimax } from '../EpaminondasPositionalMinimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/epaminondas/tests/EpaminondasRules.spec.ts b/src/app/games/epaminondas/tests/EpaminondasRules.spec.ts
index 57d64fb1d..bee8930dd 100644
--- a/src/app/games/epaminondas/tests/EpaminondasRules.spec.ts
+++ b/src/app/games/epaminondas/tests/EpaminondasRules.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { EpaminondasMove } from '../EpaminondasMove';
@@ -8,7 +8,7 @@ import { EpaminondasConfig, EpaminondasNode, EpaminondasRules } from '../Epamino
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { EpaminondasFailure } from '../EpaminondasFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';

 describe('EpaminondasRules', () => {
diff --git a/src/app/games/epaminondas/tests/epaminondas.component.spec.ts b/src/app/games/epaminondas/tests/epaminondas.component.spec.ts
index 4ed14bfc1..dcb681393 100644
--- a/src/app/games/epaminondas/tests/epaminondas.component.spec.ts
+++ b/src/app/games/epaminondas/tests/epaminondas.component.spec.ts
@@ -9,7 +9,7 @@ import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { fakeAsync } from '@angular/core/testing';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { EpaminondasFailure } from '../EpaminondasFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('EpaminondasComponent', () => {

diff --git a/src/app/games/gipf/GipfMove.ts b/src/app/games/gipf/GipfMove.ts
index 42b52bf52..909b7f795 100644
--- a/src/app/games/gipf/GipfMove.ts
+++ b/src/app/games/gipf/GipfMove.ts
@@ -1,9 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { ArrayUtils, Encoder, MGPOptional } from '@everyboard/lib';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { Move } from 'src/app/jscaip/Move';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';

 type GipfPlacementFields = [Coord, MGPOptional<HexaDirection>];
diff --git a/src/app/games/gipf/GipfMoveGenerator.ts b/src/app/games/gipf/GipfMoveGenerator.ts
index 27f2497df..01b206a53 100644
--- a/src/app/games/gipf/GipfMoveGenerator.ts
+++ b/src/app/games/gipf/GipfMoveGenerator.ts
@@ -1,4 +1,4 @@
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GipfMove, GipfPlacement } from './GipfMove';
 import { GipfState } from './GipfState';
 import { GipfRules, GipfNode } from './GipfRules';
diff --git a/src/app/games/gipf/GipfRules.ts b/src/app/games/gipf/GipfRules.ts
index 5c5217620..63dc1fe86 100644
--- a/src/app/games/gipf/GipfRules.ts
+++ b/src/app/games/gipf/GipfRules.ts
@@ -5,19 +5,15 @@ import { FlatHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GipfMove, GipfPlacement } from './GipfMove';
 import { GipfState } from './GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { GipfFailure } from './GipfFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';
-import { Utils } from 'src/app/utils/utils';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export type GipfLegalityInformation = GipfState

@@ -48,7 +44,7 @@ export class GipfRules extends Rules<GipfMove, GipfState, GipfLegalityInformatio
             [_, _, _, _, _, N, N],
             [X, _, _, O, N, N, N],
         ];
-        return new GipfState(board, 0, PlayerNumberMap.of(12, 12), PlayerNumberMap.of(0, 0));
+        return new GipfState(board, 0, [12, 12], [0, 0]);
     }

     public override applyLegalMove(_move: GipfMove,
@@ -76,15 +72,15 @@ export class GipfRules extends Rules<GipfMove, GipfState, GipfLegalityInformatio
     public static applyCapture(capture: GipfCapture, state: GipfState): GipfState {
         const player: Player = state.getCurrentPlayer();
         let newState: GipfState = state;
-        const sidePieces: PlayerNumberMap = state.sidePieces.getCopy();
-        const capturedPieces: PlayerNumberMap = state.capturedPieces.getCopy();
+        const sidePieces: [number, number] = [state.sidePieces[0], state.sidePieces[1]];
+        const capturedPieces: [number, number] = [state.capturedPieces[0], state.capturedPieces[1]];
         capture.forEach((coord: Coord) => {
             const piece: FourStatePiece = state.getPieceAt(coord);
             newState = newState.setAt(coord, FourStatePiece.EMPTY);
             if (piece.is(player)) {
-                sidePieces.add(player, 1);
+                sidePieces[player.getValue()] += 1;
             } else {
-                capturedPieces.add(player, 1);
+                capturedPieces[player.getValue()] += 1;
             }
         });
         return new GipfState(newState.board, state.turn, sidePieces, capturedPieces);
@@ -139,8 +135,8 @@ export class GipfRules extends Rules<GipfMove, GipfState, GipfLegalityInformatio
                 prevPiece = curPiece;
             }
         }
-        const sidePieces: PlayerNumberMap = state.sidePieces.getCopy();
-        sidePieces.add(player, -1);
+        const sidePieces: [number, number] = [state.sidePieces[0], state.sidePieces[1]];
+        sidePieces[player.getValue()] -= 1;
         return new GipfState(newState.board, state.turn, sidePieces, state.capturedPieces);
     }

diff --git a/src/app/games/gipf/GipfState.ts b/src/app/games/gipf/GipfState.ts
index ce1de9e60..1d1fc6621 100644
--- a/src/app/games/gipf/GipfState.ts
+++ b/src/app/games/gipf/GipfState.ts
@@ -1,33 +1,34 @@
 import { Player } from 'src/app/jscaip/Player';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { HexagonalGameState } from 'src/app/jscaip/HexagonalGameState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class GipfState extends HexagonalGameState<FourStatePiece> {

     public constructor(board: Table<FourStatePiece>,
                        turn: number,
-                       public readonly sidePieces: PlayerNumberMap,
-                       public readonly capturedPieces: PlayerNumberMap)
+                       public readonly sidePieces: [number, number],
+                       public readonly capturedPieces: [number, number])
     {
         super(turn, board, 7, 7, [3, 2, 1], FourStatePiece.EMPTY);
     }

     public equals(other: GipfState): boolean {
         if (this.turn !== other.turn) return false;
-        if (this.sidePieces.equals(other.sidePieces) === false) return false;
-        if (this.capturedPieces.equals(other.capturedPieces) === false) return false;
-        return TableUtils.compare(this.board, other.board);
+        if (this.sidePieces[0] !== other.sidePieces[0]) return false;
+        if (this.sidePieces[1] !== other.sidePieces[1]) return false;
+        if (this.capturedPieces[0] !== other.capturedPieces[0]) return false;
+        if (this.capturedPieces[1] !== other.capturedPieces[1]) return false;
+        return TableUtils.equals(this.board, other.board);
     }

     public getNumberOfPiecesToPlace(player: Player): number {
-        return this.sidePieces.get(player);
+        return this.sidePieces[player.getValue()];
     }

     public getNumberOfPiecesCaptured(player: Player): number {
-        return this.capturedPieces.get(player);
+        return this.capturedPieces[player.getValue()];
     }

     public setAtUnsafe(coord: Coord, v: FourStatePiece): this {
diff --git a/src/app/games/gipf/GipfTutorial.ts b/src/app/games/gipf/GipfTutorial.ts
index 3565c4cae..92ef84ba5 100644
--- a/src/app/games/gipf/GipfTutorial.ts
+++ b/src/app/games/gipf/GipfTutorial.ts
@@ -3,12 +3,11 @@ import { GipfState } from 'src/app/games/gipf/GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';
 import { GipfRules } from './GipfRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const N: FourStatePiece = FourStatePiece.UNREACHABLE;
 const _: FourStatePiece = FourStatePiece.EMPTY;
@@ -67,7 +66,7 @@ export class GipfTutorial extends Tutorial {
                 [X, _, _, _, _, _, N],
                 [_, _, _, X, _, N, N],
                 [_, _, _, X, N, N, N],
-            ], 42, PlayerNumberMap.of(8, 8), PlayerNumberMap.of(0, 0)),
+            ], 42, [8, 8], [0, 0]),
             [new GipfMove(
                 new GipfPlacement(new Coord(0, 3), MGPOptional.of(HexaDirection.RIGHT)),
                 [],
@@ -100,7 +99,7 @@ export class GipfTutorial extends Tutorial {
                 [_, _, _, O, _, _, N],
                 [_, _, _, O, _, N, N],
                 [_, _, _, X, N, N, N],
-            ], 42, PlayerNumberMap.of(8, 4), PlayerNumberMap.of(2, 3)),
+            ], 42, [8, 4], [2, 3]),
             [new GipfMove(
                 new GipfPlacement(new Coord(0, 3), MGPOptional.of(HexaDirection.RIGHT)),
                 [],
@@ -133,7 +132,7 @@ export class GipfTutorial extends Tutorial {
                 [_, _, _, O, _, _, N],
                 [O, O, O, X, X, N, N],
                 [_, _, _, O, N, N, N],
-            ], 42, PlayerNumberMap.of(3, 4), PlayerNumberMap.of(2, 3)),
+            ], 42, [3, 4], [2, 3]),
             [
                 new GipfMove(
                     new GipfPlacement(new Coord(3, 6), MGPOptional.of(HexaDirection.UP)),
diff --git a/src/app/games/gipf/gipf.component.ts b/src/app/games/gipf/gipf.component.ts
index cd2fb1fb5..1190088db 100644
--- a/src/app/games/gipf/gipf.component.ts
+++ b/src/app/games/gipf/gipf.component.ts
@@ -5,18 +5,14 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
 import { FlatHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
-import { HexagonalGameComponent }
-    from '../../components/game-components/game-component/HexagonalGameComponent';
+import { HexagonalGameComponent } from '../../components/game-components/game-component/HexagonalGameComponent';
 import { GipfMove, GipfPlacement } from 'src/app/games/gipf/GipfMove';
 import { GipfState } from 'src/app/games/gipf/GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { Arrow } from 'src/app/jscaip/Arrow';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { GipfMoveGenerator } from './GipfMoveGenerator';
diff --git a/src/app/games/gipf/tests/GipfMove.spec.ts b/src/app/games/gipf/tests/GipfMove.spec.ts
index b8f3105be..8e987537e 100644
--- a/src/app/games/gipf/tests/GipfMove.spec.ts
+++ b/src/app/games/gipf/tests/GipfMove.spec.ts
@@ -2,9 +2,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { HexaLine } from 'src/app/jscaip/HexaLine';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { EncoderTestUtils, MGPOptional } from '@everyboard/lib';
 import { GipfMove, GipfPlacement } from '../GipfMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';

 describe('GipfCapture', () => {
diff --git a/src/app/games/gipf/tests/GipfMoveGenerator.spec.ts b/src/app/games/gipf/tests/GipfMoveGenerator.spec.ts
index 8268c7ad2..5556cb797 100644
--- a/src/app/games/gipf/tests/GipfMoveGenerator.spec.ts
+++ b/src/app/games/gipf/tests/GipfMoveGenerator.spec.ts
@@ -2,10 +2,9 @@
 import { GipfState } from '../GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { GipfNode, GipfRules } from '../GipfRules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GipfMoveGenerator } from '../GipfMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const N: FourStatePiece = FourStatePiece.UNREACHABLE;
 const _: FourStatePiece = FourStatePiece.EMPTY;
@@ -41,7 +40,7 @@ describe('GipfMoveGenerator', () => {
                 [X, _, X, _, _, N, N],
                 [_, X, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, 0, PlayerNumberMap.of(0, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 0, [0, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state);
             expect(moveGenerator.getListMoves(node, defaultConfig).length).toBe(0);
         });
@@ -56,7 +55,7 @@ describe('GipfMoveGenerator', () => {
                 [_, _, X, O, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 0, [5, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state);
             expect(moveGenerator.getListMoves(node, defaultConfig).length).toBe(19);
         });
@@ -72,7 +71,7 @@ describe('GipfMoveGenerator', () => {
                 [_, _, _, X, _, N, N],
                 [_, _, _, O, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 0, [5, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state);
             expect(moveGenerator.getListMoves(node, defaultConfig).length).toBe(20);
         });
@@ -88,7 +87,7 @@ describe('GipfMoveGenerator', () => {
                 [X, _, _, _, O, N, N],
                 [O, X, O, X, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 0, [5, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state);
             expect(moveGenerator.getListMoves(node, defaultConfig).length).toBe(30);
         });
@@ -104,7 +103,7 @@ describe('GipfMoveGenerator', () => {
                 [_, _, X, O, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 0, [5, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state);
             expect(moveGenerator.getListMoves(node, defaultConfig).length).toBe(38);
         });
diff --git a/src/app/games/gipf/tests/GipfRules.spec.ts b/src/app/games/gipf/tests/GipfRules.spec.ts
index 6d4ce81e8..8639dc6bf 100644
--- a/src/app/games/gipf/tests/GipfRules.spec.ts
+++ b/src/app/games/gipf/tests/GipfRules.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { GipfMove, GipfPlacement } from '../GipfMove';
 import { GipfState } from '../GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
@@ -9,11 +9,9 @@ import { GipfLegalityInformation, GipfNode, GipfRules } from '../GipfRules';
 import { GipfFailure } from '../GipfFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 describe('GipfRules', () => {

@@ -83,7 +81,7 @@ describe('GipfRules', () => {
                 [_, _, _, _, _, _, N],
                 [_, _, _, _, _, N, N],
                 [B, _, _, A, N, N, N],
-            ], state.turn + 1, PlayerNumberMap.of(11, 12), state.capturedPieces);
+            ], state.turn + 1, [11, 12], state.capturedPieces);

             RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
         });
@@ -99,7 +97,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, B, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             const placement: GipfPlacement = new GipfPlacement(new Coord(1, 6),
                                                                MGPOptional.of(HexaDirection.UP_RIGHT));
             const move: GipfMove = new GipfMove(placement, [], []);
@@ -114,8 +112,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, A, _, _, N, N, N],
             ];
-            const expectedState: GipfState =
-                new GipfState(expectedBoard, P1Turn, PlayerNumberMap.of(4, 5), PlayerNumberMap.of(0, 0));
+            const expectedState: GipfState = new GipfState(expectedBoard, P1Turn, [4, 5], [0, 0]);

             RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
         });
@@ -131,7 +128,7 @@ describe('GipfRules', () => {
                 [B, A, B, B, _, N, N],
                 [B, A, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             const invalidPlacements: GipfPlacement[] = [
                 new GipfPlacement(new Coord(3, 0), MGPOptional.of(HexaDirection.RIGHT)),
                 new GipfPlacement(new Coord(0, 3), MGPOptional.of(HexaDirection.RIGHT)),
@@ -157,7 +154,7 @@ describe('GipfRules', () => {
                 [_, A, _, B, _, N, N],
                 [_, A, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             const placement: GipfPlacement = new GipfPlacement(new Coord(1, 6), MGPOptional.of(HexaDirection.LEFT));
             const move: GipfMove = new GipfMove(placement, [], []);
             const reason: string = GipfFailure.INVALID_PLACEMENT_DIRECTION();
@@ -183,8 +180,7 @@ describe('GipfRules', () => {
                     [_, _, _, _, _, N, N],
                     [_, _, _, _, N, N, N],
                 ];
-                const state: GipfState =
-                    new GipfState(board, P1Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+                const state: GipfState = new GipfState(board, P1Turn, [5, 5], [0, 0]);
                 const capture: GipfCapture = new GipfCapture(capturePositions.map((q: number) => new Coord(q, 3)));
                 const placement: GipfPlacement = new GipfPlacement(new Coord(3, 0), MGPOptional.empty());
                 const move: GipfMove = new GipfMove(placement, [capture], []);
@@ -199,8 +195,8 @@ describe('GipfRules', () => {
                 ];
                 const expectedState: GipfState = new GipfState(expectedBoard,
                                                                P1Turn + 1,
-                                                               PlayerNumberMap.of(5, 4 + capturedSelf),
-                                                               PlayerNumberMap.of(0, capturedOpponent));
+                                                               [5, 4 + capturedSelf],
+                                                               [0, capturedOpponent]);
                 RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
             }
         });
@@ -216,7 +212,7 @@ describe('GipfRules', () => {
                 [_, B, A, _, _, N, N],
                 [A, A, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             const firstPlacement: GipfPlacement = new GipfPlacement(new Coord(1, 6),
                                                                     MGPOptional.of(HexaDirection.UP_RIGHT));
             const move: GipfMove = new GipfMove(firstPlacement, [], []);
@@ -252,7 +248,7 @@ describe('GipfRules', () => {
                 [A, _, B, _, _, N, N],
                 [_, _, B, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P1Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P1Turn, [5, 5], [0, 0]);

             const placement: GipfPlacement = new GipfPlacement(new Coord(3, 0),
                                                                MGPOptional.of(HexaDirection.DOWN));
@@ -292,7 +288,7 @@ describe('GipfRules', () => {
                 [_, _, A, _, _, N, N],
                 [_, A, A, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);

             const placementA: GipfPlacement = new GipfPlacement(new Coord(0, 4),
                                                                 MGPOptional.of(HexaDirection.RIGHT));
@@ -336,7 +332,7 @@ describe('GipfRules', () => {
                 [_, _, A, _, _, N, N],
                 [_, A, A, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);

             const placement: GipfPlacement = new GipfPlacement(new Coord(-3, 1),
                                                                MGPOptional.of(HexaDirection.RIGHT));
@@ -358,7 +354,7 @@ describe('GipfRules', () => {
                 [_, _, _, _, _, N, N],
                 [_, A, A, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);

             const placement: GipfPlacement = new GipfPlacement(new Coord(-3, 1),
                                                                MGPOptional.of(HexaDirection.RIGHT));
@@ -381,7 +377,7 @@ describe('GipfRules', () => {
                 [_, _, A, _, _, N, N],
                 [_, A, A, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);

             const placement: GipfPlacement = new GipfPlacement(new Coord(0, 4),
                                                                MGPOptional.of(HexaDirection.RIGHT));
@@ -403,7 +399,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, B, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             const placement: GipfPlacement = new GipfPlacement(new Coord(1, 6),
                                                                MGPOptional.of(HexaDirection.UP_RIGHT));
             const move: GipfMove = new GipfMove(placement, [], []);
@@ -417,8 +413,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, A, _, _, N, N, N],
             ];
-            const expectedState: GipfState =
-                new GipfState(expectedBoard, P1Turn, PlayerNumberMap.of(4, 5), PlayerNumberMap.of(0, 0));
+            const expectedState: GipfState = new GipfState(expectedBoard, P1Turn, [4, 5], [0, 0]);

             RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
         });
@@ -450,7 +445,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, B, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P1Turn, PlayerNumberMap.of(5, 0), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P1Turn, [5, 0], [0, 0]);
             const node: GipfNode = new GipfNode(state, MGPOptional.empty(), MGPOptional.of(dummyMove));
             RulesUtils.expectToBeVictoryFor(rules, node, Player.ZERO, defaultConfig);
         });
@@ -465,7 +460,7 @@ describe('GipfRules', () => {
                 [B, _, B, _, _, N, N],
                 [_, B, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(0, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [0, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state, MGPOptional.empty(), MGPOptional.of(dummyMove));
             RulesUtils.expectToBeVictoryFor(rules, node, Player.ONE, defaultConfig);
         });
@@ -480,7 +475,7 @@ describe('GipfRules', () => {
                 [_, _, _, A, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(0, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [0, 5], [0, 0]);
             const node: GipfNode = new GipfNode(state, MGPOptional.empty(), MGPOptional.of(dummyMove));
             // Then it should be considered as ongoing
             RulesUtils.expectToBeOngoing(rules, node, defaultConfig);
diff --git a/src/app/games/gipf/tests/GipfScoreHeuristic.spec.ts b/src/app/games/gipf/tests/GipfScoreHeuristic.spec.ts
index 7a762bce7..f3cbbbddc 100644
--- a/src/app/games/gipf/tests/GipfScoreHeuristic.spec.ts
+++ b/src/app/games/gipf/tests/GipfScoreHeuristic.spec.ts
@@ -1,14 +1,13 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { GipfState } from '../GipfState';
 import { GipfScoreHeuristic } from '../GipfScoreHeuristic';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { GipfRules } from '../GipfRules';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const N: FourStatePiece = FourStatePiece.UNREACHABLE;
 const _: FourStatePiece = FourStatePiece.EMPTY;
@@ -35,10 +34,10 @@ describe('GipfScoreHeuristic', () => {
             [X, _, X, _, _, N, N],
             [_, X, _, _, N, N, N],
         ];
-        const capturedPieces: PlayerNumberMap = PlayerNumberMap.of(0, 3);
-        const moreCapturedPieces: PlayerNumberMap = PlayerNumberMap.of(0, 7);
-        const weakState: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), capturedPieces);
-        const strongState: GipfState = new GipfState(board, 0, PlayerNumberMap.of(5, 5), moreCapturedPieces);
+        const capturedPieces: [number, number] = [0, 3];
+        const moreCapturedPieces: [number, number] = [0, 7];
+        const weakState: GipfState = new GipfState(board, 0, [5, 5], capturedPieces);
+        const strongState: GipfState = new GipfState(board, 0, [5, 5], moreCapturedPieces);
         // When computing their values
         // Then it should prefer having more captured pieces
         HeuristicUtils.expectSecondStateToBeBetterThanFirstFor(heuristic,
@@ -59,10 +58,10 @@ describe('GipfScoreHeuristic', () => {
             [X, _, X, _, _, N, N],
             [_, X, _, _, N, N, N],
         ];
-        const piecesToPlay: PlayerNumberMap = PlayerNumberMap.of(5, 5);
-        const morePiecesToPlay: PlayerNumberMap = PlayerNumberMap.of(5, 7);
-        const weakState: GipfState = new GipfState(board, 0, piecesToPlay, PlayerNumberMap.of(0, 0));
-        const strongState: GipfState = new GipfState(board, 0, morePiecesToPlay, PlayerNumberMap.of(0, 0));
+        const piecesToPlay: [number, number] = [5, 5];
+        const morePiecesToPlay: [number, number] = [5, 7];
+        const weakState: GipfState = new GipfState(board, 0, piecesToPlay, [0, 0]);
+        const strongState: GipfState = new GipfState(board, 0, morePiecesToPlay, [0, 0]);
         // When computing their minimax values
         // Then it should prefer having more pieces to place
         HeuristicUtils.expectSecondStateToBeBetterThanFirstFor(heuristic,
diff --git a/src/app/games/gipf/tests/GipfState.spec.ts b/src/app/games/gipf/tests/GipfState.spec.ts
index 4ad3ed3bb..436cfec91 100644
--- a/src/app/games/gipf/tests/GipfState.spec.ts
+++ b/src/app/games/gipf/tests/GipfState.spec.ts
@@ -3,9 +3,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { GipfState } from '../GipfState';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GipfRules } from '../GipfRules';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 describe('GipfState', () => {

@@ -60,7 +59,7 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, B, _, _, _, _, _],
             ];
-            const state: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, 5, [5, 5], [0, 0]);
             expect(state.equals(state)).toBeTrue();
         });

@@ -74,7 +73,7 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, B, _, _, _, _, _],
             ];
-            const state1: GipfState = new GipfState(board1, 6, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state1: GipfState = new GipfState(board1, 6, [5, 5], [0, 0]);

             const board2: Table<FourStatePiece> = [
                 [_, _, _, _, A, _, _],
@@ -85,7 +84,7 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, A, _, _, _, _, _],
             ];
-            const state2: GipfState = new GipfState(board2, 6, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state2: GipfState = new GipfState(board2, 6, [5, 5], [0, 0]);
             expect(state1.equals(state2)).toBeFalse();
         });

@@ -99,8 +98,8 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, B, _, _, _, _, _],
             ];
-            const state1: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
-            const state2: GipfState = new GipfState(board, 6, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state1: GipfState = new GipfState(board, 5, [5, 5], [0, 0]);
+            const state2: GipfState = new GipfState(board, 6, [5, 5], [0, 0]);
             expect(state1.equals(state2)).toBeFalse();
         });

@@ -114,10 +113,10 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, B, _, _, _, _, _],
             ];
-            const state1: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
-            const state2: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 6), PlayerNumberMap.of(0, 0));
+            const state1: GipfState = new GipfState(board, 5, [5, 5], [0, 0]);
+            const state2: GipfState = new GipfState(board, 5, [5, 6], [0, 0]);
             expect(state1.equals(state2)).toBeFalse();
-            const state3: GipfState = new GipfState(board, 5, PlayerNumberMap.of(6, 5), PlayerNumberMap.of(0, 0));
+            const state3: GipfState = new GipfState(board, 5, [6, 5], [0, 0]);
             expect(state1.equals(state3)).toBeFalse();
         });

@@ -131,10 +130,10 @@ describe('GipfState', () => {
                 [B, _, B, _, _, _, _],
                 [_, B, _, _, _, _, _],
             ];
-            const state1: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
-            const state2: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 1));
+            const state1: GipfState = new GipfState(board, 5, [5, 5], [0, 0]);
+            const state2: GipfState = new GipfState(board, 5, [5, 5], [0, 1]);
             expect(state1.equals(state2)).toBeFalse();
-            const state3: GipfState = new GipfState(board, 5, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(1, 0));
+            const state3: GipfState = new GipfState(board, 5, [5, 5], [1, 0]);
             expect(state1.equals(state3)).toBeFalse();
         });

diff --git a/src/app/games/gipf/tests/gipf.component.spec.ts b/src/app/games/gipf/tests/gipf.component.spec.ts
index e541cac7f..f46e9f19b 100644
--- a/src/app/games/gipf/tests/gipf.component.spec.ts
+++ b/src/app/games/gipf/tests/gipf.component.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { GipfComponent } from '../gipf.component';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { GipfFailure } from 'src/app/games/gipf/GipfFailure';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
@@ -9,11 +9,10 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { GipfMove, GipfPlacement } from 'src/app/games/gipf/GipfMove';
 import { GipfState } from 'src/app/games/gipf/GipfState';
 import { Arrow } from 'src/app/jscaip/Arrow';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { Player } from 'src/app/jscaip/Player';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 describe('GipfComponent', () => {

@@ -82,7 +81,7 @@ describe('GipfComponent', () => {
                 [_, _, B, A, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             await testUtils.setupState(state);

             // When clicking on a space/piece not part of a capture
@@ -101,7 +100,7 @@ describe('GipfComponent', () => {
                 [_, _, _, A, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             await testUtils.setupState(state);

             // When clicking a piece amongst the capturable one
@@ -125,7 +124,7 @@ describe('GipfComponent', () => {
                 [_, _, B, A, _, N, N],
                 [_, _, _, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             await testUtils.setupState(state);

             // When clicking on a piece part of the capture
@@ -149,7 +148,7 @@ describe('GipfComponent', () => {
                 [A, _, B, _, _, N, N],
                 [_, _, B, _, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P1Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P1Turn, [5, 5], [0, 0]);
             await testUtils.setupState(state);

             // When clicking on that space
@@ -168,7 +167,7 @@ describe('GipfComponent', () => {
                 [A, A, _, _, _, N, N],
                 [B, A, B, A, N, N, N],
             ];
-            const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+            const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
             await testUtils.setupState(state);

             // When clicking on that space
@@ -188,7 +187,7 @@ describe('GipfComponent', () => {
             [_, _, B, A, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_3_3');
@@ -209,7 +208,7 @@ describe('GipfComponent', () => {
             [A, _, B, _, _, N, N],
             [_, _, B, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P1Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P1Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         // Perform the placement to prepare for final capture
@@ -228,7 +227,7 @@ describe('GipfComponent', () => {
             [A, _, B, _, _, N, N],
             [_, _, B, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P1Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P1Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_0_3');
@@ -253,7 +252,7 @@ describe('GipfComponent', () => {
             [_, _, _, _, _, N, N],
             [_, B, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         const placement: GipfPlacement = new GipfPlacement(new Coord(1, 6), MGPOptional.of(HexaDirection.UP_RIGHT));
@@ -276,7 +275,7 @@ describe('GipfComponent', () => {
             [_, _, B, A, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         expect(testUtils.getGameComponent().possibleCaptures).toContain(new GipfCapture([
@@ -297,7 +296,7 @@ describe('GipfComponent', () => {
             [_, _, B, A, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_3_3');
@@ -324,7 +323,7 @@ describe('GipfComponent', () => {
             [_, _, B, A, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_3_3');
@@ -349,7 +348,7 @@ describe('GipfComponent', () => {
             [_, _, B, _, _, N, N],
             [_, B, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_1_6');
@@ -367,7 +366,7 @@ describe('GipfComponent', () => {
             [_, _, _, _, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         const move: GipfMove = new GipfMove(new GipfPlacement(new Coord(6, 3),
@@ -398,7 +397,7 @@ describe('GipfComponent', () => {
             [_, _, _, _, _, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         const move: GipfMove = new GipfMove(new GipfPlacement(new Coord(5, 4),
@@ -431,7 +430,7 @@ describe('GipfComponent', () => {
             [_, _, _, A, A, N, N],
             [_, _, _, _, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(5, 5), PlayerNumberMap.of(0, 0));
+        const state: GipfState = new GipfState(board, P0Turn, [5, 5], [0, 0]);
         await testUtils.setupState(state);

         await testUtils.expectClickSuccess('#click_3_3');
@@ -454,7 +453,7 @@ describe('GipfComponent', () => {
             [A, A, A, B, B, N, N],
             [_, _, _, A, N, N, N],
         ];
-        const state: GipfState = new GipfState(board, P0Turn, PlayerNumberMap.of(8, 4), PlayerNumberMap.of(2, 3));
+        const state: GipfState = new GipfState(board, P0Turn, [8, 4], [2, 3]);
         await testUtils.setupState(state);

         const move: GipfMove = new GipfMove(
diff --git a/src/app/games/go/GoGroupsDatas.ts b/src/app/games/go/GoGroupsDatas.ts
index e2cb28903..89224d82a 100644
--- a/src/app/games/go/GoGroupsDatas.ts
+++ b/src/app/games/go/GoGroupsDatas.ts
@@ -1,8 +1,6 @@
 import { GroupDatas } from 'src/app/jscaip/BoardDatas';
 import { Coord } from 'src/app/jscaip/Coord';
-import { assert } from 'src/app/utils/assert';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { Utils } from 'src/app/utils/utils';
+import { MGPMap, Utils } from '@everyboard/lib';
 import { GoPiece } from './GoState';

 export class GoGroupDatas extends GroupDatas<GoPiece> {
@@ -38,7 +36,7 @@ export class GoGroupDatas extends GroupDatas<GoPiece> {
         return allCoords.some((c: Coord) => c.equals(coord));
     }
     public addPawn(coord: Coord, color: GoPiece): void {
-        assert(this.contains(coord) === false, 'This group already contains ' + coord.toString());
+        Utils.assert(this.contains(coord) === false, 'This group already contains ' + coord.toString());

         switch (color) {
             case GoPiece.DARK:
diff --git a/src/app/games/go/GoHeuristic.ts b/src/app/games/go/GoHeuristic.ts
index 5ea8caf03..38f5abc14 100644
--- a/src/app/games/go/GoHeuristic.ts
+++ b/src/app/games/go/GoHeuristic.ts
@@ -5,7 +5,7 @@ import { Player } from 'src/app/jscaip/Player';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { GoConfig, GoNode, GoRules } from './GoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class GoHeuristic extends PlayerMetricHeuristic<GoMove, GoState, GoConfig> {

diff --git a/src/app/games/go/GoMove.ts b/src/app/games/go/GoMove.ts
index 19e499a3c..c6aca2489 100644
--- a/src/app/games/go/GoMove.ts
+++ b/src/app/games/go/GoMove.ts
@@ -1,4 +1,4 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { Coord } from 'src/app/jscaip/Coord';

diff --git a/src/app/games/go/GoMoveGenerator.ts b/src/app/games/go/GoMoveGenerator.ts
index 5a0cfe142..9237913cb 100644
--- a/src/app/games/go/GoMoveGenerator.ts
+++ b/src/app/games/go/GoMoveGenerator.ts
@@ -1,12 +1,11 @@
 import { GoState, GoPiece, Phase } from './GoState';
 import { GoMove } from './GoMove';
-import { Debug } from 'src/app/utils/utils';
 import { GoConfig, GoLegalityInformation, GoNode, GoRules } from './GoRules';
 import { GoGroupDatas } from './GoGroupsDatas';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Debug } from 'src/app/utils/Debug';

 @Debug.log
 export class GoMoveGenerator extends MoveGenerator<GoMove, GoState, GoConfig> {
diff --git a/src/app/games/go/GoRules.ts b/src/app/games/go/GoRules.ts
index d75d87315..da3ae8c4e 100644
--- a/src/app/games/go/GoRules.ts
+++ b/src/app/games/go/GoRules.ts
@@ -4,15 +4,14 @@ import { Orthogonal } from 'src/app/jscaip/Direction';
 import { GoMove } from './GoMove';
 import { Player } from 'src/app/jscaip/Player';
 import { GoGroupDatas } from './GoGroupsDatas';
-import { Debug, Utils } from 'src/app/utils/utils';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { Coord } from 'src/app/jscaip/Coord';
 import { GoGroupDatasFactory } from './GoGroupDatasFactory';
 import { GoFailure } from './GoFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { Debug } from 'src/app/utils/Debug';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { GobanConfig } from 'src/app/jscaip/GobanConfig';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
diff --git a/src/app/games/go/GoState.ts b/src/app/games/go/GoState.ts
index c1032feaa..f2520e17b 100644
--- a/src/app/games/go/GoState.ts
+++ b/src/app/games/go/GoState.ts
@@ -1,12 +1,10 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { ComparableObject, MGPOptional, Utils } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GoConfig } from './GoRules';
-import { Utils } from 'src/app/utils/utils';

 type PieceType = 'alive' | 'dead' | 'territory' | 'empty';

diff --git a/src/app/games/go/GoTutorial.ts b/src/app/games/go/GoTutorial.ts
index 83a64e7e6..634af4403 100644
--- a/src/app/games/go/GoTutorial.ts
+++ b/src/app/games/go/GoTutorial.ts
@@ -1,6 +1,6 @@
 import { GoMove } from 'src/app/games/go/GoMove';
 import { GoState, GoPiece, Phase } from 'src/app/games/go/GoState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { GoConfig, GoRules } from './GoRules';
diff --git a/src/app/games/go/go.component.ts b/src/app/games/go/go.component.ts
index 3736e5642..9d16bde32 100644
--- a/src/app/games/go/go.component.ts
+++ b/src/app/games/go/go.component.ts
@@ -3,9 +3,7 @@ import { GoMove } from 'src/app/games/go/GoMove';
 import { GoConfig, GoLegalityInformation, GoRules } from 'src/app/games/go/GoRules';
 import { GoState, Phase, GoPiece } from 'src/app/games/go/GoState';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Debug, Utils } from 'src/app/utils/utils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GroupDatas } from 'src/app/jscaip/BoardDatas';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { GobanGameComponent } from 'src/app/components/game-components/goban-game-component/GobanGameComponent';
@@ -13,6 +11,7 @@ import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { GoHeuristic } from './GoHeuristic';
 import { GoMoveGenerator } from './GoMoveGenerator';
+import { Debug } from 'src/app/utils/Debug';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 @Component({
diff --git a/src/app/games/go/tests/GoBoardDatas.spec.ts b/src/app/games/go/tests/GoBoardDatas.spec.ts
index 3c97617c7..aeff7c850 100644
--- a/src/app/games/go/tests/GoBoardDatas.spec.ts
+++ b/src/app/games/go/tests/GoBoardDatas.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { BoardDatas, GroupInfos } from '../../../jscaip/BoardDatas';
 import { GoState, GoPiece } from '../GoState';
-import { TableUtils, Table } from 'src/app/utils/ArrayUtils';
+import { TableUtils, Table } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
 import { GoGroupDatasFactory } from '../GoGroupDatasFactory';
 import { GoConfig } from '../GoRules';
diff --git a/src/app/games/go/tests/GoGroupDatas.spec.ts b/src/app/games/go/tests/GoGroupDatas.spec.ts
index 93735e613..b1f61e1d8 100644
--- a/src/app/games/go/tests/GoGroupDatas.spec.ts
+++ b/src/app/games/go/tests/GoGroupDatas.spec.ts
@@ -2,10 +2,9 @@
 import { GoPiece } from '../GoState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { GoGroupDatas } from 'src/app/games/go/GoGroupsDatas';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
+import { Utils, TestUtils } from '@everyboard/lib';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { fakeAsync } from '@angular/core/testing';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('GoGroupDatas', () => {

@@ -36,7 +35,7 @@ describe('GoGroupDatas', () => {
         // When adding the coord again
         // Then it should throw
         const expectedError: string = 'This group already contains (0, 0)';
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         expect(() => group.addPawn(coord, GoPiece.DARK)).toThrowError('Assertion failure: ' + expectedError);
     }));

diff --git a/src/app/games/go/tests/GoHeuristic.spec.ts b/src/app/games/go/tests/GoHeuristic.spec.ts
index 30cf0b3a5..3ffccd010 100644
--- a/src/app/games/go/tests/GoHeuristic.spec.ts
+++ b/src/app/games/go/tests/GoHeuristic.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { GoState, GoPiece, Phase } from '../GoState';
 import { GoConfig, GoNode, GoRules } from '../GoRules';
 import { GoHeuristic } from '../GoHeuristic';
diff --git a/src/app/games/go/tests/GoMove.spec.ts b/src/app/games/go/tests/GoMove.spec.ts
index 017715980..52aa4c35a 100644
--- a/src/app/games/go/tests/GoMove.spec.ts
+++ b/src/app/games/go/tests/GoMove.spec.ts
@@ -1,9 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { GoConfig, GoNode, GoRules } from '../GoRules';
 import { GoMove } from '../GoMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPOptional } from '@everyboard/lib';
 import { GoMoveGenerator } from '../GoMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 const defaultConfig: MGPOptional<GoConfig> = GoRules.get().getDefaultRulesConfig();

diff --git a/src/app/games/go/tests/GoMoveGenerator.spec.ts b/src/app/games/go/tests/GoMoveGenerator.spec.ts
index 70d1ffda0..ae6e69df5 100644
--- a/src/app/games/go/tests/GoMoveGenerator.spec.ts
+++ b/src/app/games/go/tests/GoMoveGenerator.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { GoMove } from '../GoMove';
 import { GoState, GoPiece, Phase } from '../GoState';
 import { GoConfig, GoNode, GoRules } from '../GoRules';
diff --git a/src/app/games/go/tests/GoRules.spec.ts b/src/app/games/go/tests/GoRules.spec.ts
index 860e4a7ad..c5db4cb5d 100644
--- a/src/app/games/go/tests/GoRules.spec.ts
+++ b/src/app/games/go/tests/GoRules.spec.ts
@@ -1,9 +1,9 @@
 /* eslint-disable max-lines-per-function */
 import { GoMove } from '../GoMove';
 import { Phase, GoState, GoPiece } from '../GoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { GoConfig, GoNode, GoRules } from '../GoRules';
 import { GoFailure } from '../GoFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
diff --git a/src/app/games/go/tests/GoState.spec.ts b/src/app/games/go/tests/GoState.spec.ts
index 9ddac182d..8e882587e 100644
--- a/src/app/games/go/tests/GoState.spec.ts
+++ b/src/app/games/go/tests/GoState.spec.ts
@@ -2,7 +2,7 @@
 import { Player } from 'src/app/jscaip/Player';
 import { GoPiece, GoState, Phase } from '../GoState';
 import { GoConfig, GoRules } from '../GoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const O: GoPiece = GoPiece.DARK;
diff --git a/src/app/games/go/tests/go.component.spec.ts b/src/app/games/go/tests/go.component.spec.ts
index 7ba8d95a7..d8f89c8d1 100644
--- a/src/app/games/go/tests/go.component.spec.ts
+++ b/src/app/games/go/tests/go.component.spec.ts
@@ -3,9 +3,9 @@ import { fakeAsync } from '@angular/core/testing';
 import { GoComponent } from '../go.component';
 import { GoMove } from 'src/app/games/go/GoMove';
 import { GoState, GoPiece, Phase } from 'src/app/games/go/GoState';
-import { TableUtils, Table } from 'src/app/utils/ArrayUtils';
+import { TableUtils, Table } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { GoConfig, GoRules } from '../GoRules';
diff --git a/src/app/games/hive/HiveHeuristic.ts b/src/app/games/hive/HiveHeuristic.ts
index d1359f3c8..896a8ece9 100644
--- a/src/app/games/hive/HiveHeuristic.ts
+++ b/src/app/games/hive/HiveHeuristic.ts
@@ -2,8 +2,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPOptional, MGPSet } from '@everyboard/lib';
 import { HiveMove, HiveCoordToCoordMove } from './HiveMove';
 import { HiveNode, HiveRules } from './HiveRules';
 import { HiveState } from './HiveState';
diff --git a/src/app/games/hive/HiveMove.ts b/src/app/games/hive/HiveMove.ts
index 6b3b59bb8..497be7622 100644
--- a/src/app/games/hive/HiveMove.ts
+++ b/src/app/games/hive/HiveMove.ts
@@ -3,8 +3,7 @@ import { Move } from 'src/app/jscaip/Move';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible } from '@everyboard/lib';
 import { HivePiece } from './HivePiece';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';

diff --git a/src/app/games/hive/HivePiece.ts b/src/app/games/hive/HivePiece.ts
index 0374edae7..057afe8f9 100644
--- a/src/app/games/hive/HivePiece.ts
+++ b/src/app/games/hive/HivePiece.ts
@@ -1,8 +1,5 @@
 import { Player } from 'src/app/jscaip/Player';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { Encoder } from 'src/app/utils/Encoder';
-import { JSONValueWithoutArray, Utils } from 'src/app/utils/utils';
+import { ArrayUtils, ComparableObject, Encoder, JSONValueWithoutArray, Utils } from '@everyboard/lib';

 export type HivePieceKind = 'QueenBee' | 'Beetle' | 'Grasshopper' | 'Spider' | 'SoldierAnt';

diff --git a/src/app/games/hive/HivePieceRules.ts b/src/app/games/hive/HivePieceRules.ts
index 26307ad8a..00c464b86 100644
--- a/src/app/games/hive/HivePieceRules.ts
+++ b/src/app/games/hive/HivePieceRules.ts
@@ -1,15 +1,11 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
-import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPSet, MGPValidation, Utils } from '@everyboard/lib';
 import { HiveFailure } from './HiveFailure';
 import { HiveCoordToCoordMove, HiveSpiderMove } from './HiveMove';
 import { HivePiece, HivePieceKind, HivePieceStack } from './HivePiece';
 import { HiveState } from './HiveState';
-import { MGPFallible } from '../../utils/MGPFallible';
+import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';

 export abstract class HivePieceRules {

diff --git a/src/app/games/hive/HiveRules.ts b/src/app/games/hive/HiveRules.ts
index c08fd6bca..86c8606ad 100644
--- a/src/app/games/hive/HiveRules.ts
+++ b/src/app/games/hive/HiveRules.ts
@@ -1,19 +1,17 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { HiveFailure } from './HiveFailure';
 import { HiveDropMove, HiveMove, HiveCoordToCoordMove } from './HiveMove';
 import { HivePiece, HivePieceStack } from './HivePiece';
 import { HivePieceRules } from './HivePieceRules';
 import { HiveState } from './HiveState';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/hive/HiveState.ts b/src/app/games/hive/HiveState.ts
index a90ba967f..a07fc098d 100644
--- a/src/app/games/hive/HiveState.ts
+++ b/src/app/games/hive/HiveState.ts
@@ -1,15 +1,11 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Vector } from 'src/app/jscaip/Vector';
 import { OpenHexagonalGameState } from 'src/app/jscaip/OpenHexagonalGameState';
-import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { MGPMap, ReversibleMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { ComparableObject, MGPMap, MGPOptional, MGPSet, ReversibleMap, Utils } from '@everyboard/lib';
 import { HivePiece, HivePieceStack } from './HivePiece';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';

 export class HiveRemainingPieces implements ComparableObject {

diff --git a/src/app/games/hive/HiveTutorial.ts b/src/app/games/hive/HiveTutorial.ts
index e6c59604a..52eae2176 100644
--- a/src/app/games/hive/HiveTutorial.ts
+++ b/src/app/games/hive/HiveTutorial.ts
@@ -6,7 +6,7 @@ import { HiveMove } from './HiveMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Move } from 'src/app/jscaip/Move';
 import { GameState } from 'src/app/jscaip/GameState';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { HiveRules } from './HiveRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

diff --git a/src/app/games/hive/hive.component.ts b/src/app/games/hive/hive.component.ts
index 25c9b8386..ca6b4d40b 100644
--- a/src/app/games/hive/hive.component.ts
+++ b/src/app/games/hive/hive.component.ts
@@ -1,6 +1,5 @@
 import { Component } from '@angular/core';
 import { HexagonalGameComponent } from 'src/app/components/game-components/game-component/HexagonalGameComponent';
-import { ViewBox } from 'src/app/components/game-components/GameComponentUtils';
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
@@ -10,13 +9,8 @@ import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { ArrayUtils, TableWithPossibleNegativeIndices } from 'src/app/utils/ArrayUtils';
-import { assert } from 'src/app/utils/assert';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
+import { TableWithPossibleNegativeIndices } from 'src/app/jscaip/TableUtils';
+import { ArrayUtils, MGPFallible, MGPOptional, MGPSet, MGPValidation, Utils } from '@everyboard/lib';
 import { HiveFailure } from './HiveFailure';
 import { HiveHeuristic } from './HiveHeuristic';
 import { HiveMove, HiveCoordToCoordMove, HiveDropMove, HiveSpiderMove } from './HiveMove';
@@ -25,6 +19,7 @@ import { HivePiece, HivePieceStack } from './HivePiece';
 import { HiveSpiderRules } from './HivePieceRules';
 import { HiveRules } from './HiveRules';
 import { HiveState } from './HiveState';
+import { ViewBox } from 'src/app/components/game-components/GameComponentUtils';

 interface GroundInfo {
     spaceClasses: string[];
@@ -378,7 +373,7 @@ export class HiveComponent extends HexagonalGameComponent<HiveRules, HiveMove, H
         } else {
             const move: MGPFallible<HiveMove> = HiveMove.move(this.selectedStart.get(), coord);
             // static moves are prevented in selectSpace
-            assert(move.isSuccess(), 'Hive: the only forbidden moves are static moves');
+            Utils.assert(move.isSuccess(), 'Hive: the only forbidden moves are static moves');
             return this.chooseMove(move.get());
         }
     }
diff --git a/src/app/games/hive/tests/HiveHeuristic.spec.ts b/src/app/games/hive/tests/HiveHeuristic.spec.ts
index c737b64df..c022f7758 100644
--- a/src/app/games/hive/tests/HiveHeuristic.spec.ts
+++ b/src/app/games/hive/tests/HiveHeuristic.spec.ts
@@ -3,7 +3,7 @@ import { HiveHeuristic } from '../HiveHeuristic';
 import { HiveNode, HiveRules } from '../HiveRules';
 import { HiveState } from '../HiveState';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { HivePiece } from '../HivePiece';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/hive/tests/HiveMove.spec.ts b/src/app/games/hive/tests/HiveMove.spec.ts
index 047bfbf1c..0851ef778 100644
--- a/src/app/games/hive/tests/HiveMove.spec.ts
+++ b/src/app/games/hive/tests/HiveMove.spec.ts
@@ -2,8 +2,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { HiveMove } from '../HiveMove';
 import { HivePiece } from '../HivePiece';

diff --git a/src/app/games/hive/tests/HivePieceRules.spec.ts b/src/app/games/hive/tests/HivePieceRules.spec.ts
index 7b055d276..ac8579d42 100644
--- a/src/app/games/hive/tests/HivePieceRules.spec.ts
+++ b/src/app/games/hive/tests/HivePieceRules.spec.ts
@@ -2,8 +2,8 @@

 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPValidation } from '../../../utils/MGPValidation';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPValidation } from '@everyboard/lib';
 import { HiveMove } from '../HiveMove';
 import { HivePiece } from '../HivePiece';
 import { HivePieceRules, HiveSpiderRules } from '../HivePieceRules';
diff --git a/src/app/games/hive/tests/HiveRules.spec.ts b/src/app/games/hive/tests/HiveRules.spec.ts
index b9c2134f3..be98d6220 100644
--- a/src/app/games/hive/tests/HiveRules.spec.ts
+++ b/src/app/games/hive/tests/HiveRules.spec.ts
@@ -3,15 +3,13 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional, MGPSet, Utils } from '@everyboard/lib';
 import { HiveFailure } from '../HiveFailure';
 import { HiveMove, HiveCoordToCoordMove } from '../HiveMove';
 import { HivePiece } from '../HivePiece';
 import { HiveNode, HiveRules } from '../HiveRules';
 import { HiveState } from '../HiveState';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

@@ -614,7 +612,7 @@ describe('HiveRules', () => {
         });

         it('should forbid moving the spider by a regular move instead of a spider move', () => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             // Given a board with a spider
             const board: Table<HivePiece[]> = [
                 [[Q], [S], [q]],
@@ -627,7 +625,7 @@ describe('HiveRules', () => {

             // Then it should fail and an error should be logged
             expect(() => rules.isLegal(move, state)).toThrow();
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'HiveSpiderRules: move should be a spider move');
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', 'HiveSpiderRules: move should be a spider move', undefined);
         });

         it('should allow the spider to move by 3 spaces', () => {
diff --git a/src/app/games/kamisado/KamisadoBoard.ts b/src/app/games/kamisado/KamisadoBoard.ts
index 3f75f0285..dff4058f6 100644
--- a/src/app/games/kamisado/KamisadoBoard.ts
+++ b/src/app/games/kamisado/KamisadoBoard.ts
@@ -1,6 +1,6 @@
 import { KamisadoColor } from './KamisadoColor';
 import { KamisadoPiece } from './KamisadoPiece';
-import { TableUtils, Table } from 'src/app/utils/ArrayUtils';
+import { TableUtils, Table } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';

diff --git a/src/app/games/kamisado/KamisadoColor.ts b/src/app/games/kamisado/KamisadoColor.ts
index ad4318370..235f42d15 100644
--- a/src/app/games/kamisado/KamisadoColor.ts
+++ b/src/app/games/kamisado/KamisadoColor.ts
@@ -1,4 +1,4 @@
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';

 export class KamisadoColor {
     public static readonly ANY: KamisadoColor = new KamisadoColor(0, 'any', '#000');
diff --git a/src/app/games/kamisado/KamisadoHeuristic.ts b/src/app/games/kamisado/KamisadoHeuristic.ts
index 1223ad2a4..0f3dd2d6c 100644
--- a/src/app/games/kamisado/KamisadoHeuristic.ts
+++ b/src/app/games/kamisado/KamisadoHeuristic.ts
@@ -4,18 +4,16 @@ import { KamisadoMove } from './KamisadoMove';
 import { KamisadoNode, KamisadoRules } from './KamisadoRules';
 import { KamisadoState } from './KamisadoState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Player } from 'src/app/jscaip/Player';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class KamisadoHeuristic extends PlayerMetricHeuristic<KamisadoMove, KamisadoState> {

     public override getMetrics(node: KamisadoNode, _config: NoConfig): PlayerNumberTable {
         const state: KamisadoState = node.gameState;
         // Metric is how far a player's piece is from the end line
-        const furthest: PlayerNumberMap = KamisadoRules.getFurthestPiecePositions(state);
+        const [furthest0, furthest1]: [number, number] = KamisadoRules.getFurthestPiecePositions(state);
         return PlayerNumberTable.ofSingle(
-            7 - furthest.get(Player.ZERO),
-            furthest.get(Player.ONE),
+            7 - furthest0,
+            furthest1,
         );
     }

diff --git a/src/app/games/kamisado/KamisadoMove.ts b/src/app/games/kamisado/KamisadoMove.ts
index 3c4819cf8..4fcd27161 100644
--- a/src/app/games/kamisado/KamisadoMove.ts
+++ b/src/app/games/kamisado/KamisadoMove.ts
@@ -1,10 +1,9 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { KamisadoState } from './KamisadoState';
 import { Move } from 'src/app/jscaip/Move';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Utils } from 'src/app/utils/utils';

 export type KamisadoMove = KamisadoPieceMove | KamisadoPassMove;

diff --git a/src/app/games/kamisado/KamisadoMoveGenerator.ts b/src/app/games/kamisado/KamisadoMoveGenerator.ts
index cbba8d805..0a9bdec9f 100644
--- a/src/app/games/kamisado/KamisadoMoveGenerator.ts
+++ b/src/app/games/kamisado/KamisadoMoveGenerator.ts
@@ -1,11 +1,10 @@
 import { KamisadoMove } from './KamisadoMove';
 import { KamisadoState } from './KamisadoState';
 import { KamisadoNode, KamisadoRules } from './KamisadoRules';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { KamisadoBoard } from './KamisadoBoard';
-import { Utils } from 'src/app/utils/utils';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/kamisado/KamisadoPiece.ts b/src/app/games/kamisado/KamisadoPiece.ts
index a41522db0..8bcdcc241 100644
--- a/src/app/games/kamisado/KamisadoPiece.ts
+++ b/src/app/games/kamisado/KamisadoPiece.ts
@@ -1,4 +1,4 @@
-import { ComparableObject } from 'src/app/utils/Comparable';
+import { ComparableObject } from '@everyboard/lib';
 import { KamisadoColor } from './KamisadoColor';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';

diff --git a/src/app/games/kamisado/KamisadoRules.ts b/src/app/games/kamisado/KamisadoRules.ts
index dbc1a4409..28de03c06 100644
--- a/src/app/games/kamisado/KamisadoRules.ts
+++ b/src/app/games/kamisado/KamisadoRules.ts
@@ -5,18 +5,14 @@ import { KamisadoColor } from './KamisadoColor';
 import { KamisadoMove } from './KamisadoMove';
 import { KamisadoState } from './KamisadoState';
 import { KamisadoPiece } from './KamisadoPiece';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { KamisadoFailure } from './KamisadoFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
-import { Utils } from 'src/app/utils/utils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class KamisadoNode extends GameNode<KamisadoMove, KamisadoState> {}

@@ -96,7 +92,7 @@ export class KamisadoRules extends Rules<KamisadoMove, KamisadoState> {
         return this.getMovablePieces(state).length === 0;
     }

-    public static getFurthestPiecePositions(state: KamisadoState): PlayerNumberMap {
+    public static getFurthestPiecePositions(state: KamisadoState): [number, number] {
         let furthest0: number = 7; // player 0 goes from bottom (7) to top (0)
         let furthest1: number = 0; // player 1 goes from top (0) to bottom (7)

@@ -109,7 +105,7 @@ export class KamisadoRules extends Rules<KamisadoMove, KamisadoState> {
                 furthest0 = Math.min(furthest0, c.y);
             }
         });
-        return PlayerNumberMap.of(furthest0, furthest1);
+        return [furthest0, furthest1];
     }

     public static isLegal(move: KamisadoMove, state: KamisadoState): MGPValidation {
@@ -217,11 +213,11 @@ export class KamisadoRules extends Rules<KamisadoMove, KamisadoState> {
             return GameStatus.getDefeat(player);
         }

-        const furthest: PlayerNumberMap = KamisadoRules.getFurthestPiecePositions(state);
+        const [furthest0, furthest1]: [number, number] = KamisadoRules.getFurthestPiecePositions(state);
         // Board value is how far my piece is - how far my opponent piece is, except in case of victory
-        if (furthest.get(Player.ONE) === 7) {
+        if (furthest1 === 7) {
             return GameStatus.ONE_WON;
-        } else if (furthest.get(Player.ZERO) === 0) {
+        } else if (furthest0 === 0) {
             return GameStatus.ZERO_WON;
         } else {
             return GameStatus.ONGOING;
diff --git a/src/app/games/kamisado/KamisadoState.ts b/src/app/games/kamisado/KamisadoState.ts
index f648ca8f7..ff93d354b 100644
--- a/src/app/games/kamisado/KamisadoState.ts
+++ b/src/app/games/kamisado/KamisadoState.ts
@@ -1,9 +1,9 @@
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { KamisadoBoard } from './KamisadoBoard';
 import { KamisadoColor } from './KamisadoColor';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { KamisadoPiece } from './KamisadoPiece';

 export class KamisadoState extends GameStateWithTable<KamisadoPiece> {
diff --git a/src/app/games/kamisado/KamisadoTutorial.ts b/src/app/games/kamisado/KamisadoTutorial.ts
index 300a2d12f..96313424b 100644
--- a/src/app/games/kamisado/KamisadoTutorial.ts
+++ b/src/app/games/kamisado/KamisadoTutorial.ts
@@ -3,7 +3,7 @@ import { KamisadoColor } from 'src/app/games/kamisado/KamisadoColor';
 import { KamisadoState } from 'src/app/games/kamisado/KamisadoState';
 import { KamisadoPiece } from 'src/app/games/kamisado/KamisadoPiece';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { KamisadoRules } from './KamisadoRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
diff --git a/src/app/games/kamisado/kamisado.component.ts b/src/app/games/kamisado/kamisado.component.ts
index c88bd6376..f7054a767 100644
--- a/src/app/games/kamisado/kamisado.component.ts
+++ b/src/app/games/kamisado/kamisado.component.ts
@@ -8,11 +8,9 @@ import { KamisadoPiece } from 'src/app/games/kamisado/KamisadoPiece';
 import { KamisadoRules } from 'src/app/games/kamisado/KamisadoRules';
 import { KamisadoFailure } from 'src/app/games/kamisado/KamisadoFailure';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { assert } from 'src/app/utils/assert';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
@@ -88,7 +86,7 @@ export class KamisadoComponent extends RectangularGameComponent<KamisadoRules,
     }

     public override async pass(): Promise<MGPValidation> {
-        assert(this.canPass, 'KamisadoComponent: pass() must be called only if canPass is true');
+        Utils.assert(this.canPass, 'KamisadoComponent: pass() must be called only if canPass is true');
         return this.chooseMove(KamisadoMove.PASS);
     }

diff --git a/src/app/games/kamisado/tests/KamisadoHeuristic.spec.ts b/src/app/games/kamisado/tests/KamisadoHeuristic.spec.ts
index 21d469962..b3db4b05f 100644
--- a/src/app/games/kamisado/tests/KamisadoHeuristic.spec.ts
+++ b/src/app/games/kamisado/tests/KamisadoHeuristic.spec.ts
@@ -1,13 +1,13 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { KamisadoState } from '../KamisadoState';
 import { KamisadoPiece } from '../KamisadoPiece';
 import { KamisadoNode, KamisadoRules } from '../KamisadoRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { KamisadoHeuristic } from '../KamisadoHeuristic';
 import { KamisadoColor } from '../KamisadoColor';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { Table } from 'src/app/jscaip/TableUtils';

 const _: KamisadoPiece = KamisadoPiece.EMPTY;
 const R: KamisadoPiece = KamisadoPiece.ZERO.RED;
diff --git a/src/app/games/kamisado/tests/KamisadoMove.spec.ts b/src/app/games/kamisado/tests/KamisadoMove.spec.ts
index 2ff4f0330..fed91708d 100644
--- a/src/app/games/kamisado/tests/KamisadoMove.spec.ts
+++ b/src/app/games/kamisado/tests/KamisadoMove.spec.ts
@@ -2,7 +2,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { KamisadoRules } from '../KamisadoRules';
 import { KamisadoMove } from '../KamisadoMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { KamisadoMoveGenerator } from '../KamisadoMoveGenerator';

diff --git a/src/app/games/kamisado/tests/KamisadoMoveGenerator.spec.ts b/src/app/games/kamisado/tests/KamisadoMoveGenerator.spec.ts
index 263d3ea60..04f6da407 100644
--- a/src/app/games/kamisado/tests/KamisadoMoveGenerator.spec.ts
+++ b/src/app/games/kamisado/tests/KamisadoMoveGenerator.spec.ts
@@ -1,12 +1,12 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { KamisadoColor } from '../KamisadoColor';
 import { KamisadoMove } from '../KamisadoMove';
 import { KamisadoState } from '../KamisadoState';
 import { KamisadoPiece } from '../KamisadoPiece';
 import { KamisadoNode, KamisadoRules } from '../KamisadoRules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { KamisadoMoveGenerator } from '../KamisadoMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/kamisado/tests/KamisadoRules.spec.ts b/src/app/games/kamisado/tests/KamisadoRules.spec.ts
index ff735cf6d..616786dfb 100644
--- a/src/app/games/kamisado/tests/KamisadoRules.spec.ts
+++ b/src/app/games/kamisado/tests/KamisadoRules.spec.ts
@@ -5,12 +5,12 @@ import { KamisadoMove } from '../KamisadoMove';
 import { KamisadoState } from '../KamisadoState';
 import { KamisadoPiece } from '../KamisadoPiece';
 import { KamisadoNode, KamisadoRules } from '../KamisadoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { KamisadoFailure } from '../KamisadoFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('KamisadoRules', () => {
diff --git a/src/app/games/kamisado/tests/kamisado.component.spec.ts b/src/app/games/kamisado/tests/kamisado.component.spec.ts
index c6d3a4812..9050e49e1 100644
--- a/src/app/games/kamisado/tests/kamisado.component.spec.ts
+++ b/src/app/games/kamisado/tests/kamisado.component.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { KamisadoState } from 'src/app/games/kamisado/KamisadoState';
 import { KamisadoColor } from 'src/app/games/kamisado/KamisadoColor';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { KamisadoPiece } from 'src/app/games/kamisado/KamisadoPiece';
 import { KamisadoFailure } from 'src/app/games/kamisado/KamisadoFailure';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
@@ -10,7 +10,7 @@ import { fakeAsync } from '@angular/core/testing';
 import { Coord } from 'src/app/jscaip/Coord';
 import { KamisadoMove } from 'src/app/games/kamisado/KamisadoMove';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('KamisadoComponent', () => {

diff --git a/src/app/games/lasca/LascaControlHeuristic.ts b/src/app/games/lasca/LascaControlHeuristic.ts
index 280fc1e96..9a522ef81 100644
--- a/src/app/games/lasca/LascaControlHeuristic.ts
+++ b/src/app/games/lasca/LascaControlHeuristic.ts
@@ -2,7 +2,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPSet } from '@everyboard/lib';
 import { LascaMove } from './LascaMove';
 import { LascaNode, LascaRules } from './LascaRules';
 import { LascaState } from './LascaState';
diff --git a/src/app/games/lasca/LascaMove.ts b/src/app/games/lasca/LascaMove.ts
index bc827860c..ee43a91fc 100644
--- a/src/app/games/lasca/LascaMove.ts
+++ b/src/app/games/lasca/LascaMove.ts
@@ -1,15 +1,9 @@
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { Vector } from 'src/app/jscaip/Vector';
 import { Move } from 'src/app/jscaip/Move';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { assert } from 'src/app/utils/assert';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { ArrayUtils, Encoder, MGPFallible, MGPOptional, MGPSet, MGPUniqueList, Utils } from '@everyboard/lib';
 import { LascaFailure } from './LascaFailure';
 import { LascaState } from './LascaState';
-import { MGPUniqueList } from 'src/app/utils/MGPUniqueList';

 export class LascaMove extends Move {

@@ -104,7 +98,7 @@ export class LascaMove extends Move {
     public concatenate(move: LascaMove): LascaMove {
         const lastLandingOfFirstMove: Coord = this.getEndingCoord();
         const startOfSecondMove: Coord = move.coords.toList()[0];
-        assert(lastLandingOfFirstMove.equals(startOfSecondMove), 'should not concatenate non-touching move');
+        Utils.assert(lastLandingOfFirstMove.equals(startOfSecondMove), 'should not concatenate non-touching move');
         const thisCoordList: Coord[] = this.coords.toList();
         const firstPart: Coord[] = ArrayUtils.copy(thisCoordList);
         const otherCoordList: Coord[] = move.coords.toList();
diff --git a/src/app/games/lasca/LascaRules.ts b/src/app/games/lasca/LascaRules.ts
index 681c410f5..48ed0e9b2 100644
--- a/src/app/games/lasca/LascaRules.ts
+++ b/src/app/games/lasca/LascaRules.ts
@@ -4,14 +4,12 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { LascaMove } from './LascaMove';
 import { LascaFailure } from './LascaFailure';
 import { LascaPiece, LascaStack, LascaState } from './LascaState';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export class LascaNode extends GameNode<LascaMove, LascaState> {}
diff --git a/src/app/games/lasca/LascaState.ts b/src/app/games/lasca/LascaState.ts
index ac6d7e79a..2e2250c91 100644
--- a/src/app/games/lasca/LascaState.ts
+++ b/src/app/games/lasca/LascaState.ts
@@ -1,8 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { Utils } from 'src/app/utils/utils';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { Utils } from '@everyboard/lib';

 export class LascaPiece {

diff --git a/src/app/games/lasca/lasca.component.ts b/src/app/games/lasca/lasca.component.ts
index 65eab2b36..1781bcd2a 100644
--- a/src/app/games/lasca/lasca.component.ts
+++ b/src/app/games/lasca/lasca.component.ts
@@ -5,11 +5,7 @@ import { Vector } from 'src/app/jscaip/Vector';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPSet, MGPValidation, Utils } from '@everyboard/lib';
 import { LascaFailure } from './LascaFailure';
 import { LascaMove } from './LascaMove';
 import { LascaRules } from './LascaRules';
diff --git a/src/app/games/lasca/tests/LascaControlAndDominationHeuristic.spec.ts b/src/app/games/lasca/tests/LascaControlAndDominationHeuristic.spec.ts
index b91b00146..01b00136e 100644
--- a/src/app/games/lasca/tests/LascaControlAndDominationHeuristic.spec.ts
+++ b/src/app/games/lasca/tests/LascaControlAndDominationHeuristic.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { LascaControlPlusDominationHeuristic } from '../LascaControlAndDominationHeuristic';
+import { MGPOptional } from '@everyboard/lib';
 import { LascaPiece, LascaStack, LascaState } from '../LascaState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { LascaRules } from '../LascaRules';
+import { LascaControlPlusDominationHeuristic } from '../LascaControlAndDominationHeuristic';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 describe('LascaControlAndDominationHeuristic', () => {

diff --git a/src/app/games/lasca/tests/LascaControlHeuristic.spec.ts b/src/app/games/lasca/tests/LascaControlHeuristic.spec.ts
index 38a277d28..8a0e98120 100644
--- a/src/app/games/lasca/tests/LascaControlHeuristic.spec.ts
+++ b/src/app/games/lasca/tests/LascaControlHeuristic.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { LascaControlHeuristic } from '../LascaControlHeuristic';
 import { LascaPiece, LascaStack, LascaState } from '../LascaState';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { LascaRules } from '../LascaRules';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 const u: LascaStack = new LascaStack([LascaPiece.ZERO]);
 const v: LascaStack = new LascaStack([LascaPiece.ONE]);
diff --git a/src/app/games/lasca/tests/LascaMove.spec.ts b/src/app/games/lasca/tests/LascaMove.spec.ts
index 229b22baf..cfb6d4881 100644
--- a/src/app/games/lasca/tests/LascaMove.spec.ts
+++ b/src/app/games/lasca/tests/LascaMove.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPFallible } from '@everyboard/lib';
 import { LascaFailure } from '../LascaFailure';
 import { LascaMove } from '../LascaMove';

diff --git a/src/app/games/lines-of-action/LinesOfActionMove.ts b/src/app/games/lines-of-action/LinesOfActionMove.ts
index 09bbd6f12..d1c4d710d 100644
--- a/src/app/games/lines-of-action/LinesOfActionMove.ts
+++ b/src/app/games/lines-of-action/LinesOfActionMove.ts
@@ -1,8 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPFallible } from '@everyboard/lib';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { LinesOfActionState } from './LinesOfActionState';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';

diff --git a/src/app/games/lines-of-action/LinesOfActionRules.ts b/src/app/games/lines-of-action/LinesOfActionRules.ts
index ebecb440c..2d54a4b43 100644
--- a/src/app/games/lines-of-action/LinesOfActionRules.ts
+++ b/src/app/games/lines-of-action/LinesOfActionRules.ts
@@ -4,10 +4,8 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { LinesOfActionFailure } from './LinesOfActionFailure';
 import { LinesOfActionMove } from './LinesOfActionMove';
 import { LinesOfActionState } from './LinesOfActionState';
diff --git a/src/app/games/lines-of-action/LinesOfActionTutorial.ts b/src/app/games/lines-of-action/LinesOfActionTutorial.ts
index 572722856..5779bb3d8 100644
--- a/src/app/games/lines-of-action/LinesOfActionTutorial.ts
+++ b/src/app/games/lines-of-action/LinesOfActionTutorial.ts
@@ -1,7 +1,7 @@
 import { TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { LinesOfActionMove } from './LinesOfActionMove';
 import { LinesOfActionState } from './LinesOfActionState';
 import { LinesOfActionRules } from './LinesOfActionRules';
diff --git a/src/app/games/lines-of-action/lines-of-action.component.ts b/src/app/games/lines-of-action/lines-of-action.component.ts
index 8cdbb5883..456ae75dc 100644
--- a/src/app/games/lines-of-action/lines-of-action.component.ts
+++ b/src/app/games/lines-of-action/lines-of-action.component.ts
@@ -2,14 +2,12 @@ import { Component } from '@angular/core';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { LinesOfActionMove } from './LinesOfActionMove';
 import { LinesOfActionRules } from './LinesOfActionRules';
 import { LinesOfActionFailure } from './LinesOfActionFailure';
 import { LinesOfActionState } from './LinesOfActionState';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { LinesOfActionHeuristic } from './LinesOfActionHeuristic';
diff --git a/src/app/games/lines-of-action/tests/LinesOfActionHeuristic.spec.ts b/src/app/games/lines-of-action/tests/LinesOfActionHeuristic.spec.ts
index 61397cfea..08ec18133 100644
--- a/src/app/games/lines-of-action/tests/LinesOfActionHeuristic.spec.ts
+++ b/src/app/games/lines-of-action/tests/LinesOfActionHeuristic.spec.ts
@@ -2,7 +2,7 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { LinesOfActionHeuristic } from '../LinesOfActionHeuristic';
 import { LinesOfActionState } from '../LinesOfActionState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { LinesOfActionRules } from '../LinesOfActionRules';
diff --git a/src/app/games/lines-of-action/tests/LinesOfActionMove.spec.ts b/src/app/games/lines-of-action/tests/LinesOfActionMove.spec.ts
index 662d1ebc1..780983c45 100644
--- a/src/app/games/lines-of-action/tests/LinesOfActionMove.spec.ts
+++ b/src/app/games/lines-of-action/tests/LinesOfActionMove.spec.ts
@@ -1,8 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { DirectionFailure } from 'src/app/jscaip/Direction';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { LinesOfActionMove } from '../LinesOfActionMove';

 describe('LinesOfActionMove', () => {
diff --git a/src/app/games/lines-of-action/tests/LinesOfActionMoveGenerator.spec.ts b/src/app/games/lines-of-action/tests/LinesOfActionMoveGenerator.spec.ts
index 19508f9a1..01e1a566c 100644
--- a/src/app/games/lines-of-action/tests/LinesOfActionMoveGenerator.spec.ts
+++ b/src/app/games/lines-of-action/tests/LinesOfActionMoveGenerator.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { LinesOfActionMoveGenerator } from '../LinesOfActionMoveGenerator';
 import { LinesOfActionNode, LinesOfActionRules } from '../LinesOfActionRules';
 import { LinesOfActionState } from '../LinesOfActionState';
diff --git a/src/app/games/lines-of-action/tests/LinesOfActionRules.spec.ts b/src/app/games/lines-of-action/tests/LinesOfActionRules.spec.ts
index 1ae093a61..b76b755db 100644
--- a/src/app/games/lines-of-action/tests/LinesOfActionRules.spec.ts
+++ b/src/app/games/lines-of-action/tests/LinesOfActionRules.spec.ts
@@ -2,12 +2,12 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { LinesOfActionFailure } from '../LinesOfActionFailure';
 import { LinesOfActionMove } from '../LinesOfActionMove';
 import { LinesOfActionNode, LinesOfActionRules } from '../LinesOfActionRules';
 import { LinesOfActionState } from '../LinesOfActionState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/lines-of-action/tests/lines-of-action.component.spec.ts b/src/app/games/lines-of-action/tests/lines-of-action.component.spec.ts
index 96f6e8927..7f14e23b8 100644
--- a/src/app/games/lines-of-action/tests/lines-of-action.component.spec.ts
+++ b/src/app/games/lines-of-action/tests/lines-of-action.component.spec.ts
@@ -8,7 +8,7 @@ import { LinesOfActionMove } from '../LinesOfActionMove';
 import { LinesOfActionFailure } from '../LinesOfActionFailure';
 import { LinesOfActionState } from '../LinesOfActionState';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { DirectionFailure } from 'src/app/jscaip/Direction';
 import { LinesOfActionRules } from '../LinesOfActionRules';

diff --git a/src/app/games/lodestone/LodestoneMove.ts b/src/app/games/lodestone/LodestoneMove.ts
index 7d7261426..92b6018b7 100644
--- a/src/app/games/lodestone/LodestoneMove.ts
+++ b/src/app/games/lodestone/LodestoneMove.ts
@@ -1,8 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
-import { assert } from 'src/app/utils/assert';
-import { JSONObject, JSONValueWithoutArray } from 'src/app/utils/utils';
+import { Encoder, JSONObject, JSONValueWithoutArray, Utils } from '@everyboard/lib';
 import { LodestoneDirection, LodestoneOrientation } from './LodestonePiece';

 export type LodestoneCaptures = {
@@ -25,10 +23,10 @@ export class LodestoneMove extends MoveCoord {
         }
         public decode(encoded: JSONValueWithoutArray): LodestoneMove {
             const casted: JSONObject = encoded as JSONObject;
-            assert(casted.coord != null, 'Invalid encoded LodestoneMove');
-            assert(casted.direction != null, 'Invalid encoded LodestoneMove');
-            assert(casted.orientation != null, 'Invalid encoded LodestoneMove');
-            assert(casted.captures != null, 'Invalid encoded LodestoneMove');
+            Utils.assert(casted.coord != null, 'Invalid encoded LodestoneMove');
+            Utils.assert(casted.direction != null, 'Invalid encoded LodestoneMove');
+            Utils.assert(casted.orientation != null, 'Invalid encoded LodestoneMove');
+            Utils.assert(casted.captures != null, 'Invalid encoded LodestoneMove');
             return new LodestoneMove(Coord.encoder.decode(casted.coord),
                                      casted.direction as LodestoneDirection,
                                      casted.orientation as LodestoneOrientation,
diff --git a/src/app/games/lodestone/LodestoneMoveGenerator.ts b/src/app/games/lodestone/LodestoneMoveGenerator.ts
index 135330f80..1851ffe3e 100644
--- a/src/app/games/lodestone/LodestoneMoveGenerator.ts
+++ b/src/app/games/lodestone/LodestoneMoveGenerator.ts
@@ -1,7 +1,6 @@
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPOptional, MGPSet } from '@everyboard/lib';
 import { LodestoneCaptures, LodestoneMove } from './LodestoneMove';
 import { LodestoneDirection, LodestoneOrientation, LodestonePiece } from './LodestonePiece';
 import { LodestoneInfos, LodestoneNode, LodestoneRules } from './LodestoneRules';
diff --git a/src/app/games/lodestone/LodestoneRules.ts b/src/app/games/lodestone/LodestoneRules.ts
index 94ab7641c..13af82661 100644
--- a/src/app/games/lodestone/LodestoneRules.ts
+++ b/src/app/games/lodestone/LodestoneRules.ts
@@ -5,11 +5,8 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPFallible, MGPMap, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { LodestoneFailure } from './LodestoneFailure';
 import { LodestoneCaptures, LodestoneMove } from './LodestoneMove';
 import { LodestoneOrientation, LodestoneDirection, LodestonePiece } from './LodestonePiece';
diff --git a/src/app/games/lodestone/LodestoneState.ts b/src/app/games/lodestone/LodestoneState.ts
index 57d136783..d39965b13 100644
--- a/src/app/games/lodestone/LodestoneState.ts
+++ b/src/app/games/lodestone/LodestoneState.ts
@@ -2,13 +2,10 @@ import { LodestoneDirection, LodestonePiece, LodestonePieceLodestone, LodestoneP
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player } from 'src/app/jscaip/Player';
-import { ArrayUtils, Table } from 'src/app/utils/ArrayUtils';
-import { assert } from 'src/app/utils/assert';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { ArrayUtils, MGPMap, MGPOptional, Utils } from '@everyboard/lib';
 import { LodestoneCaptures } from './LodestoneMove';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { Utils } from 'src/app/utils/utils';

 /**
  * Represent different LodestonePressurePlate from the same side of the board
@@ -225,7 +222,7 @@ export class LodestoneState extends GameStateWithTable<LodestonePiece> {
         const lodestonePosition: MGPOptional<Coord> = this.lodestones.get(currentPlayer);
         if (lodestonePosition.isPresent()) {
             const piece: LodestonePiece = this.getPieceAt(lodestonePosition.get());
-            assert(piece.isLodestone(), 'Piece must be lodestone (invariant from LodestoneState)' + lodestonePosition.get());
+            Utils.assert(piece.isLodestone(), 'Piece must be lodestone (invariant from LodestoneState)' + lodestonePosition.get());
             const lodestone: LodestonePieceLodestone = piece as LodestonePieceLodestone;
             const currentDirection: LodestoneDirection = lodestone.direction;
             switch (currentDirection) {
diff --git a/src/app/games/lodestone/LodestoneTutorial.ts b/src/app/games/lodestone/LodestoneTutorial.ts
index ee2743857..d22453062 100644
--- a/src/app/games/lodestone/LodestoneTutorial.ts
+++ b/src/app/games/lodestone/LodestoneTutorial.ts
@@ -1,8 +1,7 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPMap, MGPValidation } from '@everyboard/lib';
 import { LodestoneMove } from './LodestoneMove';
 import { LodestonePiece, LodestonePieceLodestone, LodestonePieceNone, LodestonePiecePlayer } from './LodestonePiece';
 import { LodestonePressurePlateGroup, LodestonePressurePlates, LodestoneState } from './LodestoneState';
diff --git a/src/app/games/lodestone/lodestone.component.ts b/src/app/games/lodestone/lodestone.component.ts
index 2ed9b25b1..b1fc4cf3c 100644
--- a/src/app/games/lodestone/lodestone.component.ts
+++ b/src/app/games/lodestone/lodestone.component.ts
@@ -4,10 +4,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { LodestoneFailure } from './LodestoneFailure';
 import { LodestoneCaptures, LodestoneMove } from './LodestoneMove';
 import { LodestoneOrientation, LodestoneDirection, LodestonePiece, LodestonePieceNone, LodestonePieceLodestone, LodestoneDescription } from './LodestonePiece';
@@ -19,7 +17,6 @@ import { LodestoneMoveGenerator } from './LodestoneMoveGenerator';
 import { LodestoneScoreHeuristic } from './LodestoneScoreHeuristic';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
-import { Utils } from 'src/app/utils/utils';
 import { ViewBox } from 'src/app/components/game-components/GameComponentUtils';

 export type LodestoneInfo = {
diff --git a/src/app/games/lodestone/tests/LodestoneMove.spec.ts b/src/app/games/lodestone/tests/LodestoneMove.spec.ts
index aaad99600..bec8737a4 100644
--- a/src/app/games/lodestone/tests/LodestoneMove.spec.ts
+++ b/src/app/games/lodestone/tests/LodestoneMove.spec.ts
@@ -1,31 +1,37 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { LodestoneMove } from '../LodestoneMove';

 describe('LodestoneMove', () => {

-    it('should redefine equality', () => {
+    describe('equals', () => {
         const someMove: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'push', 'diagonal');
-        const moveWithDifferentCoord: LodestoneMove = new LodestoneMove(new Coord(1, 0), 'push', 'diagonal');
-        const moveWithDifferentDirection: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'pull', 'diagonal');
-        const moveWithDifferentAngle: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'push', 'orthogonal');
-        const moveWithDifferentTopCaptures: LodestoneMove =
-            new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 1, bottom: 0, left: 0, right: 0 });
-        const moveWithDifferentBottomCaptures: LodestoneMove =
-            new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 1, left: 0, right: 0 });
-        const moveWithDifferentLeftCaptures: LodestoneMove =
-            new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 0, left: 1, right: 0 });
-        const moveWithDifferentRightCaptures: LodestoneMove =
-            new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 0, left: 0, right: 1 });
+        it('should detect different moves', () => {
+            const moveWithDifferentCoord: LodestoneMove = new LodestoneMove(new Coord(1, 0), 'push', 'diagonal');
+            const moveWithDifferentDirection: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'pull', 'diagonal');
+            const moveWithDifferentAngle: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'push', 'orthogonal');
+            const moveWithDifferentTopCaptures: LodestoneMove =
+                new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 1, bottom: 0, left: 0, right: 0 });
+            const moveWithDifferentBottomCaptures: LodestoneMove =
+                new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 1, left: 0, right: 0 });
+            const moveWithDifferentLeftCaptures: LodestoneMove =
+                new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 0, left: 1, right: 0 });
+            const moveWithDifferentRightCaptures: LodestoneMove =
+                new LodestoneMove(new Coord(0, 0), 'push', 'diagonal', { top: 0, bottom: 0, left: 0, right: 1 });

-        expect(someMove.equals(someMove)).toBeTrue();
-        expect(someMove.equals(moveWithDifferentCoord)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentDirection)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentAngle)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentTopCaptures)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentBottomCaptures)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentLeftCaptures)).toBeFalse();
-        expect(someMove.equals(moveWithDifferentRightCaptures)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentCoord)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentDirection)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentAngle)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentTopCaptures)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentBottomCaptures)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentLeftCaptures)).toBeFalse();
+            expect(someMove.equals(moveWithDifferentRightCaptures)).toBeFalse();
+        });
+        it('should detect equal moves', () => {
+            expect(someMove.equals(someMove)).toBeTrue();
+            const equalMove: LodestoneMove = new LodestoneMove(new Coord(0, 0), 'push', 'diagonal');
+            expect(someMove.equals(equalMove)).toBeTrue();
+        });
     });

     it('should redefine toString', () => {
diff --git a/src/app/games/lodestone/tests/LodestoneMoveGenerator.spec.ts b/src/app/games/lodestone/tests/LodestoneMoveGenerator.spec.ts
index 5f651bca6..148464c82 100644
--- a/src/app/games/lodestone/tests/LodestoneMoveGenerator.spec.ts
+++ b/src/app/games/lodestone/tests/LodestoneMoveGenerator.spec.ts
@@ -1,8 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap } from '@everyboard/lib';
 import { LodestoneMoveGenerator } from '../LodestoneMoveGenerator';
 import { LodestonePiece, LodestonePieceLodestone, LodestonePieceNone, LodestonePiecePlayer } from '../LodestonePiece';
 import { LodestoneNode, LodestoneRules } from '../LodestoneRules';
diff --git a/src/app/games/lodestone/tests/LodestoneRules.spec.ts b/src/app/games/lodestone/tests/LodestoneRules.spec.ts
index 342b217a1..cd768a8c1 100644
--- a/src/app/games/lodestone/tests/LodestoneRules.spec.ts
+++ b/src/app/games/lodestone/tests/LodestoneRules.spec.ts
@@ -3,8 +3,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap } from '@everyboard/lib';
 import { LodestoneFailure } from '../LodestoneFailure';
 import { LodestoneMove } from '../LodestoneMove';
 import { LodestonePiece, LodestonePieceLodestone, LodestonePieceNone, LodestonePiecePlayer } from '../LodestonePiece';
diff --git a/src/app/games/lodestone/tests/LodestoneScoreHeuristic.spec.ts b/src/app/games/lodestone/tests/LodestoneScoreHeuristic.spec.ts
index 35790afa5..8d3decfd6 100644
--- a/src/app/games/lodestone/tests/LodestoneScoreHeuristic.spec.ts
+++ b/src/app/games/lodestone/tests/LodestoneScoreHeuristic.spec.ts
@@ -1,9 +1,8 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPMap, MGPOptional } from '@everyboard/lib';
 import { LodestoneScoreHeuristic } from '../LodestoneScoreHeuristic';
 import { LodestonePiece, LodestonePieceNone, LodestonePiecePlayer } from '../LodestonePiece';
 import { LodestonePositions, LodestonePressurePlates, LodestoneState } from '../LodestoneState';
-import { MGPMap } from 'src/app/utils/MGPMap';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/lodestone/tests/lodestone.component.spec.ts b/src/app/games/lodestone/tests/lodestone.component.spec.ts
index 9fcda76a8..63493d3ed 100644
--- a/src/app/games/lodestone/tests/lodestone.component.spec.ts
+++ b/src/app/games/lodestone/tests/lodestone.component.spec.ts
@@ -3,9 +3,8 @@ import { fakeAsync } from '@angular/core/testing';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { LodestoneComponent } from '../lodestone.component';
 import { LodestoneFailure } from '../LodestoneFailure';
diff --git a/src/app/games/mancala/awale/AwaleOrderedMoveGenerator.ts b/src/app/games/mancala/awale/AwaleOrderedMoveGenerator.ts
index 9a769c4ff..6c8b186ed 100644
--- a/src/app/games/mancala/awale/AwaleOrderedMoveGenerator.ts
+++ b/src/app/games/mancala/awale/AwaleOrderedMoveGenerator.ts
@@ -1,12 +1,11 @@
 import { MancalaMove } from '../common/MancalaMove';
 import { AwaleRules } from './AwaleRules';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { AwaleMoveGenerator } from './AwaleMoveGenerator';
 import { MancalaDistributionResult, MancalaNode } from '../common/MancalaRules';
 import { MancalaConfig } from '../common/MancalaConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class AwaleOrderedMoveGenerator extends AwaleMoveGenerator {

diff --git a/src/app/games/mancala/awale/AwaleRules.ts b/src/app/games/mancala/awale/AwaleRules.ts
index 61e5e32da..5265b6605 100644
--- a/src/app/games/mancala/awale/AwaleRules.ts
+++ b/src/app/games/mancala/awale/AwaleRules.ts
@@ -1,13 +1,12 @@
 import { MancalaState } from '../common/MancalaState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { MancalaCaptureResult, MancalaDistributionResult, MancalaRules } from '../common/MancalaRules';
-import { Utils } from 'src/app/utils/utils';
 import { MancalaConfig } from '../common/MancalaConfig';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
 import { BooleanConfig, NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';

 export class AwaleRules extends MancalaRules {

diff --git a/src/app/games/mancala/awale/AwaleTutorial.ts b/src/app/games/mancala/awale/AwaleTutorial.ts
index aa977abd3..6a402f2d3 100644
--- a/src/app/games/mancala/awale/AwaleTutorial.ts
+++ b/src/app/games/mancala/awale/AwaleTutorial.ts
@@ -5,7 +5,7 @@ import { MancalaConfig } from '../common/MancalaConfig';
 import { MancalaDistribution, MancalaMove } from '../common/MancalaMove';
 import { AwaleRules } from './AwaleRules';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const defaultConfig: MGPOptional<MancalaConfig> = AwaleRules.get().getDefaultRulesConfig();
diff --git a/src/app/games/mancala/awale/tests/AwaleMinimax.spec.ts b/src/app/games/mancala/awale/tests/AwaleMinimax.spec.ts
index 6ce32db8a..ba571f85b 100644
--- a/src/app/games/mancala/awale/tests/AwaleMinimax.spec.ts
+++ b/src/app/games/mancala/awale/tests/AwaleMinimax.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { AwaleRules } from '../AwaleRules';
 import { MancalaState } from 'src/app/games/mancala/common/MancalaState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { MancalaScoreMinimax } from '../../common/MancalaScoreMinimax';
@@ -10,8 +10,7 @@ import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
 import { MancalaNode } from '../../common/MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';

 describe('AwaleScoreMinimax', () => {

diff --git a/src/app/games/mancala/awale/tests/AwaleMoveGenerator.spec.ts b/src/app/games/mancala/awale/tests/AwaleMoveGenerator.spec.ts
index a6090c7a3..feb74b3f4 100644
--- a/src/app/games/mancala/awale/tests/AwaleMoveGenerator.spec.ts
+++ b/src/app/games/mancala/awale/tests/AwaleMoveGenerator.spec.ts
@@ -1,5 +1,4 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
 import { MancalaState } from '../../common/MancalaState';
 import { AwaleMoveGenerator } from '../AwaleMoveGenerator';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
@@ -7,8 +6,9 @@ import { AwaleRules } from '../AwaleRules';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
 import { MancalaNode } from '../../common/MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { KalahMoveGenerator } from '../../kalah/KalahMoveGenerator';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('AwaleMoveGenerator', () => {

diff --git a/src/app/games/mancala/awale/tests/AwaleOrderedMoveGenerator.spec.ts b/src/app/games/mancala/awale/tests/AwaleOrderedMoveGenerator.spec.ts
index 8d4f8f2fa..9420db568 100644
--- a/src/app/games/mancala/awale/tests/AwaleOrderedMoveGenerator.spec.ts
+++ b/src/app/games/mancala/awale/tests/AwaleOrderedMoveGenerator.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { MancalaState } from '../../common/MancalaState';
 import { AwaleOrderedMoveGenerator } from '../AwaleOrderedMoveGenerator';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
 import { MancalaNode } from '../../common/MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { AwaleRules } from '../AwaleRules';

diff --git a/src/app/games/mancala/awale/tests/AwaleRules.spec.ts b/src/app/games/mancala/awale/tests/AwaleRules.spec.ts
index 31891bdb8..69fbde5cf 100644
--- a/src/app/games/mancala/awale/tests/AwaleRules.spec.ts
+++ b/src/app/games/mancala/awale/tests/AwaleRules.spec.ts
@@ -4,8 +4,8 @@ import { MancalaState } from '../../common/MancalaState';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
 import { MancalaFailure } from '../../common/MancalaFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { MGPOptional } from '@everyboard/lib';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { DoMancalaRulesTests } from '../../common/tests/GenericMancalaRulesTest.spec';
 import { MancalaConfig } from '../../common/MancalaConfig';
diff --git a/src/app/games/mancala/awale/tests/awale.component.spec.ts b/src/app/games/mancala/awale/tests/awale.component.spec.ts
index d4d052f0b..e50af5f12 100644
--- a/src/app/games/mancala/awale/tests/awale.component.spec.ts
+++ b/src/app/games/mancala/awale/tests/awale.component.spec.ts
@@ -10,7 +10,7 @@ import { AwaleMoveGenerator } from '../AwaleMoveGenerator';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const defaultConfig: MGPOptional<MancalaConfig> = AwaleRules.get().getDefaultRulesConfig();

diff --git a/src/app/games/mancala/ba-awa/BaAwaRules.ts b/src/app/games/mancala/ba-awa/BaAwaRules.ts
index c2f629f55..9ff416529 100644
--- a/src/app/games/mancala/ba-awa/BaAwaRules.ts
+++ b/src/app/games/mancala/ba-awa/BaAwaRules.ts
@@ -1,12 +1,12 @@
 import { BooleanConfig, NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { BaAwaConfig } from './BaAwaConfig';
 import { MancalaCaptureResult, MancalaDistributionResult, MancalaDropResult, MancalaRules } from '../common/MancalaRules';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
 import { MancalaState } from '../common/MancalaState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
+import { TableUtils } from 'src/app/jscaip/TableUtils';

 export class BaAwaRules extends MancalaRules<BaAwaConfig> {

diff --git a/src/app/games/mancala/ba-awa/BaAwaTutorial.ts b/src/app/games/mancala/ba-awa/BaAwaTutorial.ts
index 083f00af4..5c6ea828f 100644
--- a/src/app/games/mancala/ba-awa/BaAwaTutorial.ts
+++ b/src/app/games/mancala/ba-awa/BaAwaTutorial.ts
@@ -1,5 +1,5 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { BaAwaConfig } from './BaAwaConfig';
 import { BaAwaRules } from './BaAwaRules';
 import { MancalaTutorial } from '../common/MancalaTutorial';
diff --git a/src/app/games/mancala/ba-awa/tests/BaAwaRules.spec.ts b/src/app/games/mancala/ba-awa/tests/BaAwaRules.spec.ts
index 78947b5ec..4e1c3e42d 100644
--- a/src/app/games/mancala/ba-awa/tests/BaAwaRules.spec.ts
+++ b/src/app/games/mancala/ba-awa/tests/BaAwaRules.spec.ts
@@ -2,13 +2,13 @@
 import { BaAwaRules as BaAwaRules } from '../BaAwaRules';
 import { MancalaState } from '../../common/MancalaState';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { DoMancalaRulesTests } from '../../common/tests/GenericMancalaRulesTest.spec';

 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
 import { BaAwaConfig } from '../BaAwaConfig';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';

 describe('BaAwaRules', () => {

diff --git a/src/app/games/mancala/ba-awa/tests/ba-awa.component.spec.ts b/src/app/games/mancala/ba-awa/tests/ba-awa.component.spec.ts
index 44579768c..dff08eafa 100644
--- a/src/app/games/mancala/ba-awa/tests/ba-awa.component.spec.ts
+++ b/src/app/games/mancala/ba-awa/tests/ba-awa.component.spec.ts
@@ -10,7 +10,7 @@ import { BaAwaMoveGenerator } from '../BaAwaMoveGenerator';
 import { BaAwaConfig } from '../BaAwaConfig';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MancalaComponent } from '../../common/MancalaComponent';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/mancala/common/GenericMancalaRulesTest.spec.ts b/src/app/games/mancala/common/GenericMancalaRulesTest.spec.ts
index 27a3b6409..34446cc39 100644
--- a/src/app/games/mancala/common/GenericMancalaRulesTest.spec.ts
+++ b/src/app/games/mancala/common/GenericMancalaRulesTest.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { MancalaState } from './MancalaState';
 import { MancalaMove } from './MancalaMove';
 import { MancalaFailure } from './MancalaFailure';
@@ -9,7 +9,7 @@ import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { MancalaConfig } from './MancalaConfig';
 import { MancalaNode, MancalaRules } from './MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class MancalaRulesTestEntries {
     gameName: string; // 'Awale', 'Kalah', etc
diff --git a/src/app/games/mancala/common/MancalaComponent.ts b/src/app/games/mancala/common/MancalaComponent.ts
index f0e17c483..30c2ccc1e 100644
--- a/src/app/games/mancala/common/MancalaComponent.ts
+++ b/src/app/games/mancala/common/MancalaComponent.ts
@@ -1,23 +1,19 @@
 import { MancalaState } from './MancalaState';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPSet, MGPValidation, TimeUtils, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { MancalaDistribution, MancalaMove } from './MancalaMove';
 import { Player } from 'src/app/jscaip/Player';
 import { MancalaCaptureResult, MancalaDistributionResult, MancalaDropResult, MancalaRules } from './MancalaRules';
 import { ChangeDetectorRef } from '@angular/core';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPSet } from 'src/app/utils/MGPSet';
 import { MancalaFailure } from './MancalaFailure';
-import { TimeUtils } from 'src/app/utils/TimeUtils';
-import { Utils } from 'src/app/utils/utils';
-import { AI, AIOptions, MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MancalaConfig } from './MancalaConfig';
 import { MancalaScoreMinimax } from './MancalaScoreMinimax';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
+import { MancalaConfig } from './MancalaConfig';
+import { AI, AIOptions, MoveGenerator } from 'src/app/jscaip/AI/AI';

 export type SeedDropResult = {
     houseToDistribute: Coord,
diff --git a/src/app/games/mancala/common/MancalaMove.ts b/src/app/games/mancala/common/MancalaMove.ts
index e87ba44f9..78578b530 100644
--- a/src/app/games/mancala/common/MancalaMove.ts
+++ b/src/app/games/mancala/common/MancalaMove.ts
@@ -1,7 +1,5 @@
 import { Move } from 'src/app/jscaip/Move';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { Encoder } from 'src/app/utils/Encoder';
-import { Utils } from 'src/app/utils/utils';
+import { ArrayUtils, Encoder, Utils } from '@everyboard/lib';

 export class MancalaDistribution {

diff --git a/src/app/games/mancala/common/MancalaMoveGenerator.ts b/src/app/games/mancala/common/MancalaMoveGenerator.ts
index 0c91ae1b4..93290b630 100644
--- a/src/app/games/mancala/common/MancalaMoveGenerator.ts
+++ b/src/app/games/mancala/common/MancalaMoveGenerator.ts
@@ -1,10 +1,9 @@
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { MancalaState } from '../common/MancalaState';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { MancalaDistribution, MancalaMove } from '../common/MancalaMove';
 import { MancalaDistributionResult, MancalaNode, MancalaRules } from '../common/MancalaRules';
 import { MancalaConfig } from './MancalaConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';

 export class MancalaMoveGenerator extends MoveGenerator<MancalaMove, MancalaState, MancalaConfig> {

diff --git a/src/app/games/mancala/common/MancalaMultipleSowComponent.ts b/src/app/games/mancala/common/MancalaMultipleSowComponent.ts
new file mode 100644
index 000000000..a87e3f0a3
--- /dev/null
+++ b/src/app/games/mancala/common/MancalaMultipleSowComponent.ts
@@ -0,0 +1,31 @@
+import { ChangeDetectorRef } from '@angular/core';
+import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
+import { MGPOptional } from '@everyboard/lib';
+import { MancalaMove } from './MancalaMove';
+import { MancalaRules } from './MancalaRules';
+import { MancalaComponent } from './MancalaComponent';
+
+export abstract class MancalaMultipleSowComponent<R extends MancalaRules<M>, M extends MancalaMove>
+    extends MancalaComponent<R, M>
+{
+
+    public constructor(messageDisplayer: MessageDisplayer,
+                       cdr: ChangeDetectorRef)
+    {
+        super(messageDisplayer, cdr);
+    }
+    protected updateOrCreateCurrentMove(x: number): void {
+        if (this.currentMove.isAbsent()) {
+            this.hideLastMove();
+            this.currentMove = MGPOptional.of(this.generateMove(x));
+        } else {
+            const newMove: M = this.addToMove(x);
+            this.currentMove = MGPOptional.of(newMove);
+        }
+    }
+    /**
+     * @param x the x of the MancalaDistribution just made by user click
+     * this function must modify or "create" (if absent) this.currentMove
+     */
+    protected abstract addToMove(x: number): M;
+}
diff --git a/src/app/games/mancala/common/MancalaRules.ts b/src/app/games/mancala/common/MancalaRules.ts
index 1c02cbd0e..866bd0b0b 100644
--- a/src/app/games/mancala/common/MancalaRules.ts
+++ b/src/app/games/mancala/common/MancalaRules.ts
@@ -2,19 +2,15 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { MancalaConfig } from './MancalaConfig';
 import { MancalaState } from './MancalaState';
 import { Player } from 'src/app/jscaip/Player';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { ConfigurableRules } from 'src/app/jscaip/Rules';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { ReversibleMap } from 'src/app/utils/MGPMap';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { MGPFallible, MGPOptional, MGPValidation, ReversibleMap, Utils } from '@everyboard/lib';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { MancalaDistribution, MancalaMove } from './MancalaMove';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
-import { MancalaFailure } from './MancalaFailure';
+import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { Localized } from 'src/app/utils/LocaleUtils';
+import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { MancalaFailure } from './MancalaFailure';

 export interface MancalaCaptureResult {

diff --git a/src/app/games/mancala/common/MancalaScoreHeurisic.ts b/src/app/games/mancala/common/MancalaScoreHeurisic.ts
index 8c0f0ce26..98abc1c66 100644
--- a/src/app/games/mancala/common/MancalaScoreHeurisic.ts
+++ b/src/app/games/mancala/common/MancalaScoreHeurisic.ts
@@ -3,7 +3,7 @@ import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { MancalaMove } from './MancalaMove';
 import { MancalaConfig } from './MancalaConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MancalaNode } from './MancalaRules';

 export class MancalaScoreHeuristic extends PlayerMetricHeuristic<MancalaMove, MancalaState, MancalaConfig>
diff --git a/src/app/games/mancala/common/MancalaSingleSowComponent.ts b/src/app/games/mancala/common/MancalaSingleSowComponent.ts
new file mode 100644
index 000000000..09c23f601
--- /dev/null
+++ b/src/app/games/mancala/common/MancalaSingleSowComponent.ts
@@ -0,0 +1,20 @@
+import { ChangeDetectorRef } from '@angular/core';
+import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
+import { MGPOptional } from '@everyboard/lib';
+import { MancalaMove } from './MancalaMove';
+import { MancalaRules } from './MancalaRules';
+import { MancalaComponent } from './MancalaComponent';
+
+export abstract class MancalaSingleSowComponent<R extends MancalaRules<M>, M extends MancalaMove>
+    extends MancalaComponent<R, M>
+{
+
+    public constructor(messageDisplayer: MessageDisplayer,
+                       cdr: ChangeDetectorRef)
+    {
+        super(messageDisplayer, cdr);
+    }
+    protected updateOrCreateCurrentMove(x: number): void {
+        this.currentMove = MGPOptional.of(this.generateMove(x));
+    }
+}
diff --git a/src/app/games/mancala/common/MancalaState.spec.ts b/src/app/games/mancala/common/MancalaState.spec.ts
index d2a1df282..da7cf4030 100644
--- a/src/app/games/mancala/common/MancalaState.spec.ts
+++ b/src/app/games/mancala/common/MancalaState.spec.ts
@@ -1,7 +1,7 @@
 import { MancalaState } from './MancalaState';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { MancalaRules } from './MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MancalaConfig } from './MancalaConfig';

 describe('MancalaState', () => {
diff --git a/src/app/games/mancala/common/MancalaState.ts b/src/app/games/mancala/common/MancalaState.ts
index 816b7b1cb..93b46effd 100644
--- a/src/app/games/mancala/common/MancalaState.ts
+++ b/src/app/games/mancala/common/MancalaState.ts
@@ -1,8 +1,8 @@
-import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { Player } from 'src/app/jscaip/Player';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Coord } from 'src/app/jscaip/Coord';

 export class MancalaState extends GameStateWithTable<number> {

@@ -64,7 +64,7 @@ export class MancalaState extends GameStateWithTable<number> {
     }

     public equals(other: MancalaState): boolean {
-        if (TableUtils.compare(this.board, other.board) === false) return false;
+        if (TableUtils.equals(this.board, other.board) === false) return false;
         if (this.scores.equals(other.scores) === false) return false;
         return this.turn === other.turn;
     }
diff --git a/src/app/games/mancala/common/MancalaTutorial.ts b/src/app/games/mancala/common/MancalaTutorial.ts
index 5fdeb9290..c58355417 100644
--- a/src/app/games/mancala/common/MancalaTutorial.ts
+++ b/src/app/games/mancala/common/MancalaTutorial.ts
@@ -1,7 +1,7 @@
 import { TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { MancalaDistribution, MancalaMove } from './MancalaMove';
 import { MancalaState } from './MancalaState';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { Localized } from 'src/app/utils/LocaleUtils';

 export class MancalaTutorial {
diff --git a/src/app/games/mancala/common/numbered-circle.component.ts b/src/app/games/mancala/common/numbered-circle.component.ts
index 3cf7de30b..a1ec447aa 100644
--- a/src/app/games/mancala/common/numbered-circle.component.ts
+++ b/src/app/games/mancala/common/numbered-circle.component.ts
@@ -1,5 +1,5 @@
 import { Component, Input } from '@angular/core';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 @Component({
     selector: '[app-numbered-circle]',
diff --git a/src/app/games/mancala/common/tests/GenericMancalaComponentTest.spec.ts b/src/app/games/mancala/common/tests/GenericMancalaComponentTest.spec.ts
index 342ee3850..96a1c7cbe 100644
--- a/src/app/games/mancala/common/tests/GenericMancalaComponentTest.spec.ts
+++ b/src/app/games/mancala/common/tests/GenericMancalaComponentTest.spec.ts
@@ -2,21 +2,20 @@
 import { DebugElement, Type } from '@angular/core';
 import { fakeAsync, tick } from '@angular/core/testing';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { Encoder, MGPOptional } from '@everyboard/lib';
+import { MoveGenerator } from 'src/app/jscaip/AI/AI';
+import { MancalaConfig } from '../MancalaConfig';
+import { RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
+import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
+import { Cell, Table } from 'src/app/jscaip/TableUtils';
 import { MancalaComponent, SeedDropResult } from '../MancalaComponent';
 import { MancalaDropResult, MancalaRules } from '../MancalaRules';
 import { MancalaDistribution, MancalaMove } from '../MancalaMove';
 import { MancalaState } from '../MancalaState';
-import { Cell, Table } from 'src/app/utils/ArrayUtils';
-import { MancalaFailure } from '../MancalaFailure';
-import { Encoder } from 'src/app/utils/Encoder';
 import { Coord } from 'src/app/jscaip/Coord';
+import { MancalaFailure } from '../MancalaFailure';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MancalaConfig } from '../MancalaConfig';
-import { RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';

 type MancalaHouseContents = Cell<{ mainContent: string, secondaryContent?: string }>;

diff --git a/src/app/games/mancala/common/tests/GenericMancalaRulesTest.spec.ts b/src/app/games/mancala/common/tests/GenericMancalaRulesTest.spec.ts
index 2e7810709..910f2e7f3 100644
--- a/src/app/games/mancala/common/tests/GenericMancalaRulesTest.spec.ts
+++ b/src/app/games/mancala/common/tests/GenericMancalaRulesTest.spec.ts
@@ -1,6 +1,5 @@
 /* eslint-disable max-lines-per-function */
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
 import { MancalaState } from '../MancalaState';
 import { MancalaDistribution, MancalaMove } from '../MancalaMove';
 import { MancalaFailure } from '../MancalaFailure';
@@ -8,9 +7,9 @@ import { Player } from 'src/app/jscaip/Player';
 import { MancalaConfig } from '../MancalaConfig';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { MancalaNode, MancalaRules } from '../MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { MGPOptional, TestUtils } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';

 export class MancalaRulesTestEntries {
     gameName: string; // 'Awale', 'Kalah', etc
diff --git a/src/app/games/mancala/common/tests/MancalaDistribution.spec.ts b/src/app/games/mancala/common/tests/MancalaDistribution.spec.ts
index dcd62554f..590d3510f 100644
--- a/src/app/games/mancala/common/tests/MancalaDistribution.spec.ts
+++ b/src/app/games/mancala/common/tests/MancalaDistribution.spec.ts
@@ -1,5 +1,5 @@
 import { MancalaDistribution } from '../MancalaMove';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';

 describe('MancalaDistribution', () => {

diff --git a/src/app/games/mancala/common/tests/MancalaMove.spec.ts b/src/app/games/mancala/common/tests/MancalaMove.spec.ts
index b0dfde1dd..b59cd662f 100644
--- a/src/app/games/mancala/common/tests/MancalaMove.spec.ts
+++ b/src/app/games/mancala/common/tests/MancalaMove.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { ArrayUtils, EncoderTestUtils } from '@everyboard/lib';
 import { MancalaDistribution, MancalaMove } from '../MancalaMove';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';

 describe('MancalaMove', () => {

diff --git a/src/app/games/mancala/common/tests/MancalaScoreHeuristic.spec.ts b/src/app/games/mancala/common/tests/MancalaScoreHeuristic.spec.ts
index 8af056c9a..08aa15884 100644
--- a/src/app/games/mancala/common/tests/MancalaScoreHeuristic.spec.ts
+++ b/src/app/games/mancala/common/tests/MancalaScoreHeuristic.spec.ts
@@ -2,7 +2,7 @@
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { MancalaScoreHeuristic } from '../MancalaScoreHeurisic';
 import { MancalaState } from '../MancalaState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { MancalaConfig } from '../MancalaConfig';
 import { KalahRules } from '../../kalah/KalahRules';
diff --git a/src/app/games/mancala/kalah/KalahRules.ts b/src/app/games/mancala/kalah/KalahRules.ts
index c32789359..af597227d 100644
--- a/src/app/games/mancala/kalah/KalahRules.ts
+++ b/src/app/games/mancala/kalah/KalahRules.ts
@@ -1,8 +1,8 @@
 import { MancalaState } from './../common/MancalaState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { MancalaCaptureResult, MancalaDistributionResult, MancalaRules } from '../common/MancalaRules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { MancalaConfig } from '../common/MancalaConfig';
 import { BooleanConfig, NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
diff --git a/src/app/games/mancala/kalah/KalahTutorial.ts b/src/app/games/mancala/kalah/KalahTutorial.ts
index afe5f6b08..0725c0e6b 100644
--- a/src/app/games/mancala/kalah/KalahTutorial.ts
+++ b/src/app/games/mancala/kalah/KalahTutorial.ts
@@ -1,13 +1,12 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { MancalaState } from '../common/MancalaState';
-import { MancalaDistribution, MancalaMove } from '../common/MancalaMove';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { KalahRules } from './KalahRules';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MancalaTutorial } from '../common/MancalaTutorial';
 import { MancalaConfig } from '../common/MancalaConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
+import { MancalaTutorial } from '../common/MancalaTutorial';
+import { MancalaDistribution, MancalaMove } from '../common/MancalaMove';

 const defaultConfig: MGPOptional<MancalaConfig> = KalahRules.get().getDefaultRulesConfig();

diff --git a/src/app/games/mancala/kalah/tests/KalahMoveGenerator.spec.ts b/src/app/games/mancala/kalah/tests/KalahMoveGenerator.spec.ts
index 39e1edd5b..74a6a2268 100644
--- a/src/app/games/mancala/kalah/tests/KalahMoveGenerator.spec.ts
+++ b/src/app/games/mancala/kalah/tests/KalahMoveGenerator.spec.ts
@@ -5,7 +5,7 @@ import { KalahMoveGenerator } from '../KalahMoveGenerator';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { MancalaMove } from '../../common/MancalaMove';
 import { MancalaNode } from '../../common/MancalaRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 describe('KalahMoveGenerator', () => {
diff --git a/src/app/games/mancala/kalah/tests/KalahRules.spec.ts b/src/app/games/mancala/kalah/tests/KalahRules.spec.ts
index c439a280c..48eb41192 100644
--- a/src/app/games/mancala/kalah/tests/KalahRules.spec.ts
+++ b/src/app/games/mancala/kalah/tests/KalahRules.spec.ts
@@ -3,13 +3,12 @@ import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { KalahRules } from '../KalahRules';
 import { MancalaDistribution, MancalaMove } from '../../common/MancalaMove';
 import { MancalaState } from '../../common/MancalaState';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPOptional, TestUtils } from '@everyboard/lib';
 import { DoMancalaRulesTests } from '../../common/tests/GenericMancalaRulesTest.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { Player } from 'src/app/jscaip/Player';
 import { MancalaConfig } from '../../common/MancalaConfig';
 import { MancalaNode, MancalaRules } from '../../common/MancalaRules';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 describe('KalahRules', () => {
diff --git a/src/app/games/mancala/kalah/tests/kalah.component.spec.ts b/src/app/games/mancala/kalah/tests/kalah.component.spec.ts
index 65310e81e..32162c202 100644
--- a/src/app/games/mancala/kalah/tests/kalah.component.spec.ts
+++ b/src/app/games/mancala/kalah/tests/kalah.component.spec.ts
@@ -3,7 +3,7 @@ import { fakeAsync, tick } from '@angular/core/testing';
 import { DebugElement } from '@angular/core';

 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { LocalGameWrapperComponent } from 'src/app/components/wrapper-components/local-game-wrapper/local-game-wrapper.component';
@@ -19,7 +19,7 @@ import { KalahComponent } from '../kalah.component';
 import { KalahRules } from '../KalahRules';
 import { KalahMoveGenerator } from '../KalahMoveGenerator';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('KalahComponent', () => {

diff --git a/src/app/games/mancala/tests/MancalaScoreHeuristic.spec.ts b/src/app/games/mancala/tests/MancalaScoreHeuristic.spec.ts
index f9514f76c..070c377cc 100644
--- a/src/app/games/mancala/tests/MancalaScoreHeuristic.spec.ts
+++ b/src/app/games/mancala/tests/MancalaScoreHeuristic.spec.ts
@@ -2,7 +2,7 @@
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { MancalaScoreHeuristic } from '../common/MancalaScoreHeurisic';
 import { MancalaState } from '../common/MancalaState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { AwaleRules } from '../awale/AwaleRules';
diff --git a/src/app/games/martian-chess/MartianChessMove.ts b/src/app/games/martian-chess/MartianChessMove.ts
index 6a05076d2..4a0698a50 100644
--- a/src/app/games/martian-chess/MartianChessMove.ts
+++ b/src/app/games/martian-chess/MartianChessMove.ts
@@ -1,11 +1,9 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPFallible, MGPOptional } from '@everyboard/lib';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Localized } from 'src/app/utils/LocaleUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { Vector } from 'src/app/jscaip/Vector';
 import { MartianChessState } from './MartianChessState';

diff --git a/src/app/games/martian-chess/MartianChessMoveGenerator.ts b/src/app/games/martian-chess/MartianChessMoveGenerator.ts
index 8e42231a7..cb8d00525 100644
--- a/src/app/games/martian-chess/MartianChessMoveGenerator.ts
+++ b/src/app/games/martian-chess/MartianChessMoveGenerator.ts
@@ -1,11 +1,10 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPSet } from '@everyboard/lib';
 import { MartianChessMove } from './MartianChessMove';
 import { MartianChessState } from './MartianChessState';
 import { MartianChessPiece } from './MartianChessPiece';
-import { MGPSet } from 'src/app/utils/MGPSet';
 import { MartianChessNode } from './MartianChessRules';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/martian-chess/MartianChessPiece.ts b/src/app/games/martian-chess/MartianChessPiece.ts
index 8053210bf..1774f5135 100644
--- a/src/app/games/martian-chess/MartianChessPiece.ts
+++ b/src/app/games/martian-chess/MartianChessPiece.ts
@@ -1,6 +1,4 @@
-import { assert } from 'src/app/utils/assert';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
+import { MGPOptional, Utils } from '@everyboard/lib';

 export class MartianChessPiece {

@@ -11,7 +9,7 @@ export class MartianChessPiece {

     public static tryMerge(left: MartianChessPiece, right: MartianChessPiece): MGPOptional<MartianChessPiece> {
         const noEmptyPieces: boolean = left !== MartianChessPiece.EMPTY && right !== MartianChessPiece.EMPTY;
-        assert(noEmptyPieces, 'tryMerge cannot be called with empty pieces');
+        Utils.assert(noEmptyPieces, 'tryMerge cannot be called with empty pieces');
         const totalValue: number = left.value + right.value;
         if (totalValue === 2 || totalValue === 3) {
             return MGPOptional.of(MartianChessPiece.of(totalValue));
diff --git a/src/app/games/martian-chess/MartianChessRules.ts b/src/app/games/martian-chess/MartianChessRules.ts
index adbacb813..f4352a9a7 100644
--- a/src/app/games/martian-chess/MartianChessRules.ts
+++ b/src/app/games/martian-chess/MartianChessRules.ts
@@ -2,18 +2,14 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPMap, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MartianChessMove, MartianChessMoveFailure } from './MartianChessMove';
 import { MartianChessCapture, MartianChessState } from './MartianChessState';
 import { MartianChessPiece } from './MartianChessPiece';
 import { MartianChessFailure } from './MartianChessFailure';
-import { MGPValidation } from '../../utils/MGPValidation';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';
-import { Table } from 'src/app/utils/ArrayUtils';

 export interface MartianChessMoveResult {

diff --git a/src/app/games/martian-chess/MartianChessState.ts b/src/app/games/martian-chess/MartianChessState.ts
index feae9ee32..6aca67a8d 100644
--- a/src/app/games/martian-chess/MartianChessState.ts
+++ b/src/app/games/martian-chess/MartianChessState.ts
@@ -1,10 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { MartianChessMove } from './MartianChessMove';
 import { MartianChessPiece } from './MartianChessPiece';

diff --git a/src/app/games/martian-chess/MartianChessTutorial.ts b/src/app/games/martian-chess/MartianChessTutorial.ts
index f265e607f..7d723a9b5 100644
--- a/src/app/games/martian-chess/MartianChessTutorial.ts
+++ b/src/app/games/martian-chess/MartianChessTutorial.ts
@@ -1,7 +1,6 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MartianChessMove } from './MartianChessMove';
 import { MartianChessState } from './MartianChessState';
 import { MartianChessPiece } from './MartianChessPiece';
diff --git a/src/app/games/martian-chess/martian-chess.component.ts b/src/app/games/martian-chess/martian-chess.component.ts
index c42c90043..f96f937a6 100644
--- a/src/app/games/martian-chess/martian-chess.component.ts
+++ b/src/app/games/martian-chess/martian-chess.component.ts
@@ -4,16 +4,13 @@ import { RectangularGameComponent } from 'src/app/components/game-components/rec
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MartianChessMove } from './MartianChessMove';
 import { MartianChessMoveResult, MartianChessRules } from './MartianChessRules';
 import { MartianChessState } from './MartianChessState';
 import { MartianChessPiece } from './MartianChessPiece';
 import { Direction } from 'src/app/jscaip/Direction';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Utils } from 'src/app/utils/utils';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { MartianChessMoveGenerator } from './MartianChessMoveGenerator';
 import { MartianChessScoreHeuristic } from './MartianChessScoreHeuristic';
diff --git a/src/app/games/martian-chess/tests/MartianChessMove.spec.ts b/src/app/games/martian-chess/tests/MartianChessMove.spec.ts
index bf89704d3..6addcf5a0 100644
--- a/src/app/games/martian-chess/tests/MartianChessMove.spec.ts
+++ b/src/app/games/martian-chess/tests/MartianChessMove.spec.ts
@@ -2,8 +2,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { DirectionFailure } from 'src/app/jscaip/Direction';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { MartianChessMove, MartianChessMoveFailure } from '../MartianChessMove';
 import { MartianChessNode, MartianChessRules } from '../MartianChessRules';
 import { MartianChessState } from '../MartianChessState';
diff --git a/src/app/games/martian-chess/tests/MartianChessMoveGenerator.spec.ts b/src/app/games/martian-chess/tests/MartianChessMoveGenerator.spec.ts
index 7d1b0aa51..ee77c09a5 100644
--- a/src/app/games/martian-chess/tests/MartianChessMoveGenerator.spec.ts
+++ b/src/app/games/martian-chess/tests/MartianChessMoveGenerator.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
=================================
+import { MGPOptional } from '@everyboard/lib';
 import { MartianChessMove } from '../MartianChessMove';
 import { MartianChessNode, MartianChessRules } from '../MartianChessRules';
 import { MartianChessState } from '../MartianChessState';
diff --git a/src/app/games/martian-chess/tests/MartianChessRules.spec.ts b/src/app/games/martian-chess/tests/MartianChessRules.spec.ts
index f3fba531e..1e961d75b 100644
--- a/src/app/games/martian-chess/tests/MartianChessRules.spec.ts
+++ b/src/app/games/martian-chess/tests/MartianChessRules.spec.ts
@@ -3,11 +3,9 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional, TestUtils, Utils } from '@everyboard/lib';
 import { MartianChessMove, MartianChessMoveFailure } from '../MartianChessMove';
 import { MartianChessNode, MartianChessRules } from '../MartianChessRules';
 import { MartianChessFailure } from '../MartianChessFailure';
@@ -678,12 +676,12 @@ describe('MartianChessRules', () => {
                                                                        0,
                                                                        MGPOptional.empty(),
                                                                        MartianChessRules.STARTING_COUNT_DOWN);
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

                 // When calling the clock once more
                 const move: MartianChessMove = MartianChessMove.from(new Coord(1, 7), new Coord(0, 6), true).get();

-                // Then the move should throw, cause dev should not do that
+                // Then the move should throw, because the component should not allow it
                 const expectedBoard: Table<MartianChessPiece> = [
                     [C, C, B, _],
                     [C, B, A, _],
@@ -695,10 +693,10 @@ describe('MartianChessRules', () => {
                     [_, _, C, C],
                 ];
                 const expectedState: MartianChessState = new MartianChessState(expectedBoard, 1, MGPOptional.of(move));
-                const component: string = 'Assertion failure';
-                const error: string = 'Should not call the clock twice';
-                expect(() => RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig)).toThrowError(component + ': ' + error);
-                expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith(component, error);
+                const reason: string = 'Should not call the clock twice';
+                TestUtils.expectToThrowAndLog(() => {
+                    RulesUtils.expectMoveSuccess(rules, state, move, expectedState, defaultConfig);
+                }, reason);
             });

             it('should decrease clock-count-down each captureless-turn when clock was called', () => {
diff --git a/src/app/games/martian-chess/tests/MartianChessScoreHeuristic.spec.ts b/src/app/games/martian-chess/tests/MartianChessScoreHeuristic.spec.ts
index 98ce34f17..4c08555ac 100644
--- a/src/app/games/martian-chess/tests/MartianChessScoreHeuristic.spec.ts
+++ b/src/app/games/martian-chess/tests/MartianChessScoreHeuristic.spec.ts
@@ -1,14 +1,13 @@
 /* eslint-disable max-lines-per-function */
 import { Player } from 'src/app/jscaip/Player';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional } from '@everyboard/lib';
 import { MartianChessPiece } from '../MartianChessPiece';
 import { MartianChessScoreHeuristic } from '../MartianChessScoreHeuristic';
 import { MartianChessCapture, MartianChessState } from '../MartianChessState';
 import { MartianChessRules } from '../MartianChessRules';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 describe('MartianChessScoreHeuristic', () => {

diff --git a/src/app/games/martian-chess/tests/martian-chess.component.spec.ts b/src/app/games/martian-chess/tests/martian-chess.component.spec.ts
index 7b8bdfbe1..8ab841c94 100644
--- a/src/app/games/martian-chess/tests/martian-chess.component.spec.ts
+++ b/src/app/games/martian-chess/tests/martian-chess.component.spec.ts
@@ -1,8 +1,8 @@
 /* eslint-disable max-lines-per-function */
 import { fakeAsync } from '@angular/core/testing';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { MartianChessComponent, MartianChessFace } from '../martian-chess.component';
 import { MartianChessMove } from '../MartianChessMove';
diff --git a/src/app/games/new-game/NewGameMove.ts b/src/app/games/new-game/NewGameMove.ts
index a2bc0f458..355cb7baf 100644
--- a/src/app/games/new-game/NewGameMove.ts
+++ b/src/app/games/new-game/NewGameMove.ts
@@ -1,5 +1,5 @@
 import { Move } from 'src/app/jscaip/Move';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 /**
   * This class represents the moves of your game.
@@ -15,8 +15,8 @@ export class NewGameMove extends Move {
      * There are multiple helpers to create encoders.
      * You'll likely be interested in:
      *   - `MoveCoord.getEncoder` and `MoveWithTwoCoords` to get an encoder for a move of the corresponding type.
-     *   - `MoveEncoder.tuple` to get an encoder for a move that has multiple fields
-     *   - `MoveEncoder.disjunction` to get an encoder for a move that may be of different types
+     *   - `Encoder.tuple` to get an encoder for a move that has multiple fields
+     *   - `Encoder.disjunction` to get an encoder for a move that may be of different types
      */
     // eslint-disable-next-line @typescript-eslint/no-explicit-any
     public static encoder: Encoder<NewGameMove> = undefined as any;
diff --git a/src/app/games/new-game/NewGameRules.ts b/src/app/games/new-game/NewGameRules.ts
index bc998ec6c..42a5fbabc 100644
--- a/src/app/games/new-game/NewGameRules.ts
+++ b/src/app/games/new-game/NewGameRules.ts
@@ -1,15 +1,14 @@
+import { MGPFallible, MGPOptional } from '@everyboard/lib';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { NewGameMove } from './NewGameMove';
 import { NewGameState } from './NewGameState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { Rules } from 'src/app/jscaip/Rules';

 /**
  * This class is optional.
- * If you don't use it, you can remove it everywhere it is mentioned.
+ * If you don't use it, you can remove it everywhere it is mentionned.
  *
  * It provides extra information that is returned by the `isLegal` method of the rules.
  * This information is then provided to the `applyLegalMove` method of the rules.
diff --git a/src/app/games/new-game/tests/NewGameHeuristic.spec.ts b/src/app/games/new-game/tests/NewGameHeuristic.spec.ts
index 4b441d480..fe1e40834 100644
--- a/src/app/games/new-game/tests/NewGameHeuristic.spec.ts
+++ b/src/app/games/new-game/tests/NewGameHeuristic.spec.ts
@@ -1,7 +1,7 @@
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { NewGameHeuristic } from '../NewGameHeuristic';
 import { NewGameState } from '../NewGameState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { NewGameRules } from '../NewGameRules';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/new-game/tests/NewGameMove.spec.ts b/src/app/games/new-game/tests/NewGameMove.spec.ts
index 1f741d698..d7f98dae9 100644
--- a/src/app/games/new-game/tests/NewGameMove.spec.ts
+++ b/src/app/games/new-game/tests/NewGameMove.spec.ts
@@ -1,4 +1,4 @@
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { NewGameMove } from '../NewGameMove';

 describe('NewGameMove', () => {
diff --git a/src/app/games/p4/P4Heuristic.ts b/src/app/games/p4/P4Heuristic.ts
index 7f9c3acad..c171d4bb5 100644
--- a/src/app/games/p4/P4Heuristic.ts
+++ b/src/app/games/p4/P4Heuristic.ts
@@ -4,7 +4,7 @@ import { P4Move } from './P4Move';
 import { P4State } from './P4State';
 import { P4Config, P4Node, P4Rules } from './P4Rules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class P4Heuristic extends Heuristic<P4Move, P4State, BoardValue, P4Config> {

diff --git a/src/app/games/p4/P4Move.ts b/src/app/games/p4/P4Move.ts
index 0712c4bf1..16f5b884f 100644
--- a/src/app/games/p4/P4Move.ts
+++ b/src/app/games/p4/P4Move.ts
@@ -1,6 +1,5 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, Utils } from '@everyboard/lib';
 import { Move } from 'src/app/jscaip/Move';
-import { Utils } from 'src/app/utils/utils';

 export class P4Move extends Move {

diff --git a/src/app/games/p4/P4MoveGenerator.ts b/src/app/games/p4/P4MoveGenerator.ts
index 57ee4b3d5..bdb771aa2 100644
--- a/src/app/games/p4/P4MoveGenerator.ts
+++ b/src/app/games/p4/P4MoveGenerator.ts
@@ -1,10 +1,10 @@
 import { P4Move } from './P4Move';
 import { P4State } from './P4State';
 import { P4Config, P4Node } from './P4Rules';
-import { Debug } from 'src/app/utils/utils';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
+import { Debug } from 'src/app/utils/Debug';

 @Debug.log
 export class P4MoveGenerator extends MoveGenerator<P4Move, P4State, P4Config> {
diff --git a/src/app/games/p4/P4OrderedMoveGenerator.ts b/src/app/games/p4/P4OrderedMoveGenerator.ts
index 2c96d4c86..eb0559dc5 100644
--- a/src/app/games/p4/P4OrderedMoveGenerator.ts
+++ b/src/app/games/p4/P4OrderedMoveGenerator.ts
@@ -1,7 +1,7 @@
 import { P4Move } from './P4Move';
 import { P4Config, P4Node } from './P4Rules';
 import { P4MoveGenerator } from './P4MoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class P4OrderedMoveGenerator extends P4MoveGenerator {

diff --git a/src/app/games/p4/P4Rules.ts b/src/app/games/p4/P4Rules.ts
index dfe3d61d9..770736bf0 100644
--- a/src/app/games/p4/P4Rules.ts
+++ b/src/app/games/p4/P4Rules.ts
@@ -3,14 +3,13 @@ import { GameNode } from '../../jscaip/AI/GameNode';
 import { ConfigurableRules } from '../../jscaip/Rules';
 import { P4State } from './P4State';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Utils, Debug } from 'src/app/utils/utils';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { P4Move } from './P4Move';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { P4Failure } from './P4Failure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { NInARowHelper } from 'src/app/jscaip/NInARowHelper';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Debug } from 'src/app/utils/Debug';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';

diff --git a/src/app/games/p4/P4Tutorial.ts b/src/app/games/p4/P4Tutorial.ts
index 0f27a4081..b0dd38624 100644
--- a/src/app/games/p4/P4Tutorial.ts
+++ b/src/app/games/p4/P4Tutorial.ts
@@ -3,7 +3,7 @@ import { P4State } from 'src/app/games/p4/P4State';
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { P4Config, P4Rules } from './P4Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/p4/p4.component.ts b/src/app/games/p4/p4.component.ts
index 0a24a3e52..ceb695635 100644
--- a/src/app/games/p4/p4.component.ts
+++ b/src/app/games/p4/p4.component.ts
@@ -2,12 +2,11 @@ import { Component } from '@angular/core';
 import { P4State } from './P4State';
 import { P4Config, P4Rules } from './P4Rules';
 import { RectangularGameComponent } from '../../components/game-components/rectangular-game-component/RectangularGameComponent';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { P4Move } from 'src/app/games/p4/P4Move';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Coord } from 'src/app/jscaip/Coord';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { P4MoveGenerator } from './P4MoveGenerator';
 import { P4Minimax } from './P4Minimax';
diff --git a/src/app/games/p4/tests/P4Heuristic.spec.ts b/src/app/games/p4/tests/P4Heuristic.spec.ts
index 5ec2ebce8..ae8222300 100644
--- a/src/app/games/p4/tests/P4Heuristic.spec.ts
+++ b/src/app/games/p4/tests/P4Heuristic.spec.ts
@@ -2,9 +2,9 @@
 import { P4State } from '../P4State';
 import { P4Config, P4Node, P4Rules } from '../P4Rules';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { P4Heuristic } from '../P4Heuristic';

 const _: PlayerOrNone = PlayerOrNone.NONE;
diff --git a/src/app/games/p4/tests/P4Minimax.spec.ts b/src/app/games/p4/tests/P4Minimax.spec.ts
index aeb56a2da..4a07ac712 100644
--- a/src/app/games/p4/tests/P4Minimax.spec.ts
+++ b/src/app/games/p4/tests/P4Minimax.spec.ts
@@ -4,7 +4,7 @@ import { P4State } from '../P4State';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { P4Config, P4Node, P4Rules } from '../P4Rules';
 import { P4Minimax } from '../P4Minimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('P4Minimax', () => {

diff --git a/src/app/games/p4/tests/P4Move.spec.ts b/src/app/games/p4/tests/P4Move.spec.ts
index f43af6ffb..d6c6025e2 100644
--- a/src/app/games/p4/tests/P4Move.spec.ts
+++ b/src/app/games/p4/tests/P4Move.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';
 import { P4Move } from '../P4Move';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('P4Move', () => {

diff --git a/src/app/games/p4/tests/P4MoveGenerator.spec.ts b/src/app/games/p4/tests/P4MoveGenerator.spec.ts
index 39f8d31dc..a52cce3ba 100644
--- a/src/app/games/p4/tests/P4MoveGenerator.spec.ts
+++ b/src/app/games/p4/tests/P4MoveGenerator.spec.ts
@@ -1,10 +1,10 @@
 /* eslint-disable max-lines-per-function */
 import { P4State } from '../P4State';
 import { P4Config, P4Node, P4Rules } from '../P4Rules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { P4MoveGenerator } from '../P4MoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/p4/tests/P4OrderedMoveGenerator.spec.ts b/src/app/games/p4/tests/P4OrderedMoveGenerator.spec.ts
index 6a208778e..02f620d8b 100644
--- a/src/app/games/p4/tests/P4OrderedMoveGenerator.spec.ts
+++ b/src/app/games/p4/tests/P4OrderedMoveGenerator.spec.ts
@@ -3,7 +3,7 @@ import { P4State } from '../P4State';
 import { P4Config, P4Node, P4Rules } from '../P4Rules';
 import { P4OrderedMoveGenerator } from '../P4OrderedMoveGenerator';
 import { P4Move } from '../P4Move';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('P4OrderedMoveGenerator', () => {

diff --git a/src/app/games/p4/tests/P4Rules.spec.ts b/src/app/games/p4/tests/P4Rules.spec.ts
index 3897186f8..be004ecb4 100644
--- a/src/app/games/p4/tests/P4Rules.spec.ts
+++ b/src/app/games/p4/tests/P4Rules.spec.ts
@@ -5,8 +5,8 @@ import { P4State } from '../P4State';
 import { P4Move } from '../P4Move';
 import { P4Failure } from '../P4Failure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';

 const defaultConfig: MGPOptional<P4Config> = P4Rules.get().getDefaultRulesConfig();

diff --git a/src/app/games/p4/tests/p4.component.spec.ts b/src/app/games/p4/tests/p4.component.spec.ts
index b3ab80b2a..74147c212 100644
--- a/src/app/games/p4/tests/p4.component.spec.ts
+++ b/src/app/games/p4/tests/p4.component.spec.ts
@@ -5,7 +5,7 @@ import { P4Move } from 'src/app/games/p4/P4Move';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { P4State } from '../P4State';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('P4Component', () => {

diff --git a/src/app/games/pentago/PentagoMove.ts b/src/app/games/pentago/PentagoMove.ts
index 90bfb0a14..15da01fdd 100644
--- a/src/app/games/pentago/PentagoMove.ts
+++ b/src/app/games/pentago/PentagoMove.ts
@@ -1,8 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { MGPOptional, Encoder, Utils } from '@everyboard/lib';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
 import { PentagoState } from './PentagoState';

 type PentagoMoveFields = [Coord, MGPOptional<number>, boolean];
diff --git a/src/app/games/pentago/PentagoRules.ts b/src/app/games/pentago/PentagoRules.ts
index a34b18029..f423d5dbb 100644
--- a/src/app/games/pentago/PentagoRules.ts
+++ b/src/app/games/pentago/PentagoRules.ts
@@ -1,18 +1,16 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Vector } from 'src/app/jscaip/Vector';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
-import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { PentagoFailure } from './PentagoFailure';
 import { PentagoMove } from './PentagoMove';
 import { PentagoState } from './PentagoState';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { PlayerMap } from 'src/app/jscaip/PlayerMap';

 export class PentagoNode extends GameNode<PentagoMove, PentagoState> {}
=============================================================== QUOI LA BAISE REGRESSION
@@ -123,18 +121,18 @@ export class PentagoRules extends Rules<PentagoMove, PentagoState> {
     public getGameStatus(node: PentagoNode): GameStatus {
         const state: PentagoState = node.gameState;
         const victoryCoords: Coord[] = this.getVictoryCoords(state);
-        const victoryFound: PlayerMap<boolean> = PlayerMap.ofValues(false, false);
+        const victoryFound: [boolean, boolean] = [false, false];
         for (let i: number = 0; i < victoryCoords.length; i += 5) {
-            victoryFound.put(state.getPieceAt(victoryCoords[i]) as Player, true);
+            victoryFound[state.getPieceAt(victoryCoords[i]).getValue()] = true;
         }
-        if (victoryFound.get(Player.ZERO) === true) {
-            if (victoryFound.get(Player.ONE) === true) {
+        if (victoryFound[0] === true) {
+            if (victoryFound[1] === true) {
                 return GameStatus.DRAW;
             } else {
                 return GameStatus.ZERO_WON;
             }
         }
-        if (victoryFound.get(Player.ONE) === true) {
+        if (victoryFound[1] === true) {
             return GameStatus.ONE_WON;
         }
         if (state.turn === PentagoState.SIZE * PentagoState.SIZE) {
diff --git a/src/app/games/pentago/PentagoState.ts b/src/app/games/pentago/PentagoState.ts
index c75454a10..d8d98a98b 100644
--- a/src/app/games/pentago/PentagoState.ts
+++ b/src/app/games/pentago/PentagoState.ts
@@ -3,7 +3,7 @@ import { Direction } from 'src/app/jscaip/Direction';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Vector } from 'src/app/jscaip/Vector';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PentagoMove } from './PentagoMove';

 export class PentagoState extends GameStateWithTable<PlayerOrNone> {
diff --git a/src/app/games/pentago/PentagoTutorial.ts b/src/app/games/pentago/PentagoTutorial.ts
index 5fded966c..c732850da 100644
--- a/src/app/games/pentago/PentagoTutorial.ts
+++ b/src/app/games/pentago/PentagoTutorial.ts
@@ -1,6 +1,6 @@
 import { TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { PentagoMove } from './PentagoMove';
 import { PentagoState } from './PentagoState';
 import { PentagoRules } from './PentagoRules';
diff --git a/src/app/games/pentago/pentago.component.ts b/src/app/games/pentago/pentago.component.ts
index 7c5ab902e..680cad83e 100644
--- a/src/app/games/pentago/pentago.component.ts
+++ b/src/app/games/pentago/pentago.component.ts
@@ -1,16 +1,13 @@
 import { Component } from '@angular/core';
-import { RectangularGameComponent }
-    from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
+import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
 import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { PentagoMove } from './PentagoMove';
 import { PentagoRules } from './PentagoRules';
 import { PentagoState } from './PentagoState';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { DummyHeuristic, Minimax } from 'src/app/jscaip/AI/Minimax';
diff --git a/src/app/games/pentago/tests/PentagoMove.spec.ts b/src/app/games/pentago/tests/PentagoMove.spec.ts
index cd3994d85..33e601300 100644
--- a/src/app/games/pentago/tests/PentagoMove.spec.ts
+++ b/src/app/games/pentago/tests/PentagoMove.spec.ts
@@ -1,11 +1,10 @@
 /* eslint-disable max-lines-per-function */
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { PentagoMove } from '../PentagoMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';

 describe('PentagoMove', () => {

-    it('should throw when rotating inexistant block', () => {
+    it('should throw when rotating unexisting block', () => {
         function rotatingNonExistingBlock(): void {
             PentagoMove.withRotation(0, 0, -1, true);
         }
diff --git a/src/app/games/pentago/tests/PentagoMoveGenerator.spec.ts b/src/app/games/pentago/tests/PentagoMoveGenerator.spec.ts
index 485b2a904..4fd9cb7d9 100644
--- a/src/app/games/pentago/tests/PentagoMoveGenerator.spec.ts
+++ b/src/app/games/pentago/tests/PentagoMoveGenerator.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { PentagoMove } from '../PentagoMove';
 import { PentagoMoveGenerator } from '../PentagoMoveGenerator';
 import { PentagoNode, PentagoRules } from '../PentagoRules';
diff --git a/src/app/games/pentago/tests/PentagoRules.spec.ts b/src/app/games/pentago/tests/PentagoRules.spec.ts
index 70f5c087c..74fb18fc7 100644
--- a/src/app/games/pentago/tests/PentagoRules.spec.ts
+++ b/src/app/games/pentago/tests/PentagoRules.spec.ts
@@ -6,8 +6,8 @@ import { PentagoMove } from '../PentagoMove';
 import { PentagoNode, PentagoRules } from '../PentagoRules';
 import { PentagoState } from '../PentagoState';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('PentagoRules', () => {
diff --git a/src/app/games/pentago/tests/pentago.component.spec.ts b/src/app/games/pentago/tests/pentago.component.spec.ts
index f8217ec2c..3f1a9bfa8 100644
--- a/src/app/games/pentago/tests/pentago.component.spec.ts
+++ b/src/app/games/pentago/tests/pentago.component.spec.ts
@@ -2,7 +2,7 @@
 import { fakeAsync } from '@angular/core/testing';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { PentagoComponent } from '../pentago.component';
 import { PentagoMove } from '../PentagoMove';
diff --git a/src/app/games/pente/PenteAlignmentHeuristic.ts b/src/app/games/pente/PenteAlignmentHeuristic.ts
index 127315d43..11a5bbc8f 100644
--- a/src/app/games/pente/PenteAlignmentHeuristic.ts
+++ b/src/app/games/pente/PenteAlignmentHeuristic.ts
@@ -3,7 +3,7 @@ import { Heuristic } from 'src/app/jscaip/AI/Minimax';
 import { PenteMove } from './PenteMove';
 import { PenteNode, PenteRules } from './PenteRules';
 import { PenteState } from './PenteState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PenteConfig } from './PenteConfig';

 export class PenteAlignmentHeuristic extends Heuristic<PenteMove, PenteState, BoardValue, PenteConfig> {
diff --git a/src/app/games/pente/PenteMove.ts b/src/app/games/pente/PenteMove.ts
index ad9be134a..0cec70bc9 100644
--- a/src/app/games/pente/PenteMove.ts
+++ b/src/app/games/pente/PenteMove.ts
@@ -1,6 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 export class PenteMove extends MoveCoord {

diff --git a/src/app/games/pente/PenteMoveGenerator.ts b/src/app/games/pente/PenteMoveGenerator.ts
index 37d343a33..606e2712a 100644
--- a/src/app/games/pente/PenteMoveGenerator.ts
+++ b/src/app/games/pente/PenteMoveGenerator.ts
@@ -4,7 +4,7 @@ import { PenteMove } from './PenteMove';
 import { PenteNode } from './PenteRules';
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PenteConfig } from './PenteConfig';

 export class PenteMoveGenerator extends MoveGenerator<PenteMove, PenteState, PenteConfig> {
diff --git a/src/app/games/pente/PenteRules.ts b/src/app/games/pente/PenteRules.ts
index 24ec5e9f3..9f2fabebd 100644
--- a/src/app/games/pente/PenteRules.ts
+++ b/src/app/games/pente/PenteRules.ts
@@ -6,13 +6,11 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { PenteMove } from './PenteMove';
 import { PenteState } from './PenteState';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { PenteConfig } from './PenteConfig';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
diff --git a/src/app/games/pente/PenteState.ts b/src/app/games/pente/PenteState.ts
index 86bf6d617..65ae6b777 100644
--- a/src/app/games/pente/PenteState.ts
+++ b/src/app/games/pente/PenteState.ts
@@ -1,6 +1,6 @@
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class PenteState extends GameStateWithTable<PlayerOrNone> {
diff --git a/src/app/games/pente/PenteTutorial.ts b/src/app/games/pente/PenteTutorial.ts
index fd310a71e..e1ee14967 100644
--- a/src/app/games/pente/PenteTutorial.ts
+++ b/src/app/games/pente/PenteTutorial.ts
@@ -5,7 +5,7 @@ import { PenteMove } from './PenteMove';
 import { PenteState } from './PenteState';
 import { PenteRules } from './PenteRules';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
 import { PenteConfig } from './PenteConfig';

diff --git a/src/app/games/pente/pente.component.ts b/src/app/games/pente/pente.component.ts
index 16846ac10..4598e8834 100644
--- a/src/app/games/pente/pente.component.ts
+++ b/src/app/games/pente/pente.component.ts
@@ -3,8 +3,7 @@ import { PenteMove } from './PenteMove';
 import { PenteState } from './PenteState';
 import { Component } from '@angular/core';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { GobanGameComponent } from 'src/app/components/game-components/goban-game-component/GobanGameComponent';
diff --git a/src/app/games/pente/tests/PenteAlignmentHeuristic.spec.ts b/src/app/games/pente/tests/PenteAlignmentHeuristic.spec.ts
index 01e2c7222..92fa8146b 100644
--- a/src/app/games/pente/tests/PenteAlignmentHeuristic.spec.ts
+++ b/src/app/games/pente/tests/PenteAlignmentHeuristic.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { PenteAlignmentHeuristic } from '../PenteAlignmentHeuristic';
 import { PenteState } from '../PenteState';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
diff --git a/src/app/games/pente/tests/PenteMove.spec.ts b/src/app/games/pente/tests/PenteMove.spec.ts
index 50702f39a..0aff45897 100644
--- a/src/app/games/pente/tests/PenteMove.spec.ts
+++ b/src/app/games/pente/tests/PenteMove.spec.ts
@@ -1,5 +1,5 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { PenteMove } from '../PenteMove';

 describe('PenteMove', () => {
diff --git a/src/app/games/pente/tests/PenteMoveGenerator.spec.ts b/src/app/games/pente/tests/PenteMoveGenerator.spec.ts
index 60e7e1fc6..053f24bd5 100644
--- a/src/app/games/pente/tests/PenteMoveGenerator.spec.ts
+++ b/src/app/games/pente/tests/PenteMoveGenerator.spec.ts
@@ -3,7 +3,7 @@ import { PenteConfig } from '../PenteConfig';
 import { PenteMove } from '../PenteMove';
 import { PenteMoveGenerator } from '../PenteMoveGenerator';
 import { PenteNode, PenteRules } from '../PenteRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('PenteMoveGenerator', () => {

diff --git a/src/app/games/pente/tests/PenteRules.spec.ts b/src/app/games/pente/tests/PenteRules.spec.ts
index b157254e3..18e948941 100644
--- a/src/app/games/pente/tests/PenteRules.spec.ts
+++ b/src/app/games/pente/tests/PenteRules.spec.ts
@@ -7,7 +7,7 @@ import { PenteMove } from '../PenteMove';
 import { PenteNode, PenteRules } from '../PenteRules';
 import { PenteState } from '../PenteState';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PenteConfig } from '../PenteConfig';

 describe('PenteRules', () => {
diff --git a/src/app/games/pylos/PylosCoord.ts b/src/app/games/pylos/PylosCoord.ts
index 1f6e86920..4140d8c1a 100644
--- a/src/app/games/pylos/PylosCoord.ts
+++ b/src/app/games/pylos/PylosCoord.ts
@@ -1,9 +1,7 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Encoder, MGPOptional, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { Coord3D } from 'src/app/jscaip/Coord3D';
-import { Encoder } from 'src/app/utils/Encoder';
-import { Utils } from 'src/app/utils/utils';

 export class PylosCoord extends Coord3D {

diff --git a/src/app/games/pylos/PylosMove.ts b/src/app/games/pylos/PylosMove.ts
index d43d11fe2..c91ea3e98 100644
--- a/src/app/games/pylos/PylosMove.ts
+++ b/src/app/games/pylos/PylosMove.ts
@@ -1,10 +1,8 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Encoder, MGPOptional, Utils } from '@everyboard/lib';
 import { Move } from 'src/app/jscaip/Move';
 import { PylosCoord } from './PylosCoord';
-import { Encoder } from 'src/app/utils/Encoder';
 import { Localized } from 'src/app/utils/LocaleUtils';
 import { PylosFailure } from './PylosFailure';
-import { Utils } from 'src/app/utils/utils';

 export class PylosMoveFailure {
     public static readonly MUST_CAPTURE_MAXIMUM_TWO_PIECES: Localized = () => $localize`You must capture one or two pieces, not more.`;
diff --git a/src/app/games/pylos/PylosMoveGenerator.ts b/src/app/games/pylos/PylosMoveGenerator.ts
index 83183fcf2..00c281065 100644
--- a/src/app/games/pylos/PylosMoveGenerator.ts
+++ b/src/app/games/pylos/PylosMoveGenerator.ts
@@ -2,7 +2,7 @@ import { PylosCoord } from './PylosCoord';
 import { PylosMove } from './PylosMove';
 import { PylosState } from './PylosState';
 import { PylosNode, PylosRules } from './PylosRules';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPSet } from '@everyboard/lib';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/pylos/PylosRules.ts b/src/app/games/pylos/PylosRules.ts
index 28d9b26d4..0e0632e87 100644
--- a/src/app/games/pylos/PylosRules.ts
+++ b/src/app/games/pylos/PylosRules.ts
@@ -1,4 +1,3 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
@@ -8,11 +7,9 @@ import { PylosMove } from './PylosMove';
 import { PylosState } from './PylosState';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { PylosFailure } from './PylosFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPFallible } from '../../utils/MGPFallible';
+import { MGPOptional, MGPFallible, MGPSet, MGPValidation } from '@everyboard/lib';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/pylos/PylosState.ts b/src/app/games/pylos/PylosState.ts
index 01718158f..2fd61d512 100644
--- a/src/app/games/pylos/PylosState.ts
+++ b/src/app/games/pylos/PylosState.ts
@@ -1,9 +1,9 @@
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { PylosCoord } from './PylosCoord';
 import { PylosMove } from './PylosMove';
 import { GameState } from 'src/app/jscaip/GameState';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class PylosState extends GameState {
diff --git a/src/app/games/pylos/PylosTutorial.ts b/src/app/games/pylos/PylosTutorial.ts
index 5a597f89c..836abc39c 100644
--- a/src/app/games/pylos/PylosTutorial.ts
+++ b/src/app/games/pylos/PylosTutorial.ts
@@ -3,7 +3,7 @@ import { PylosCoord } from 'src/app/games/pylos/PylosCoord';
 import { PylosMove } from 'src/app/games/pylos/PylosMove';
 import { PylosState } from 'src/app/games/pylos/PylosState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { PylosRules } from './PylosRules';

diff --git a/src/app/games/pylos/pylos.component.ts b/src/app/games/pylos/pylos.component.ts
index 76c487b51..f60d28226 100644
--- a/src/app/games/pylos/pylos.component.ts
+++ b/src/app/games/pylos/pylos.component.ts
@@ -5,11 +5,10 @@ import { PylosState } from 'src/app/games/pylos/PylosState';
 import { PylosRules } from 'src/app/games/pylos/PylosRules';
 import { PylosCoord } from 'src/app/games/pylos/PylosCoord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { PylosFailure } from './PylosFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { PylosOrderedMoveGenerator } from './PylosOrderedMoveGenerator';
 import { PylosMoveGenerator } from './PylosMoveGenerator';
diff --git a/src/app/games/pylos/tests/PylosCoord.spec.ts b/src/app/games/pylos/tests/PylosCoord.spec.ts
index 737e92277..3ee793f56 100644
--- a/src/app/games/pylos/tests/PylosCoord.spec.ts
+++ b/src/app/games/pylos/tests/PylosCoord.spec.ts
@@ -1,9 +1,7 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { EncoderTestUtils, MGPOptional, TestUtils } from '@everyboard/lib';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { PylosCoord } from '../PylosCoord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('PylosCoord', () => {

diff --git a/src/app/games/pylos/tests/PylosHeuristic.spec.ts b/src/app/games/pylos/tests/PylosHeuristic.spec.ts
index 654d6824f..056686844 100644
--- a/src/app/games/pylos/tests/PylosHeuristic.spec.ts
+++ b/src/app/games/pylos/tests/PylosHeuristic.spec.ts
@@ -5,7 +5,7 @@ import { PylosState } from '../PylosState';
 import { PylosNode, PylosRules } from '../PylosRules';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { PylosHeuristic } from '../PylosHeuristic';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 const _: PlayerOrNone = PlayerOrNone.NONE;
diff --git a/src/app/games/pylos/tests/PylosMove.spec.ts b/src/app/games/pylos/tests/PylosMove.spec.ts
index 3c859174e..e87c8fc57 100644
--- a/src/app/games/pylos/tests/PylosMove.spec.ts
+++ b/src/app/games/pylos/tests/PylosMove.spec.ts
@@ -1,9 +1,8 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';
 import { PylosCoord } from '../PylosCoord';
 import { PylosFailure } from '../PylosFailure';
 import { PylosMove, PylosMoveFailure } from '../PylosMove';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('PylosMove', () => {

diff --git a/src/app/games/pylos/tests/PylosRules.spec.ts b/src/app/games/pylos/tests/PylosRules.spec.ts
index 94f828297..cc0bfa9d8 100644
--- a/src/app/games/pylos/tests/PylosRules.spec.ts
+++ b/src/app/games/pylos/tests/PylosRules.spec.ts
@@ -6,9 +6,8 @@ import { PylosState } from '../PylosState';
 import { PylosNode, PylosRules } from '../PylosRules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { PylosFailure } from '../PylosFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('PylosRules', () => {
diff --git a/src/app/games/quarto/QuartoHeuristic.ts b/src/app/games/quarto/QuartoHeuristic.ts
index 58267a52e..a49b01466 100644
--- a/src/app/games/quarto/QuartoHeuristic.ts
+++ b/src/app/games/quarto/QuartoHeuristic.ts
@@ -5,8 +5,8 @@ import { Heuristic } from 'src/app/jscaip/AI/Minimax';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { QuartoNode, BoardStatus, QuartoRules } from './QuartoRules';
 import { Player } from 'src/app/jscaip/Player';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 export class QuartoHeuristic extends Heuristic<QuartoMove, QuartoState> {
diff --git a/src/app/games/quarto/QuartoMove.ts b/src/app/games/quarto/QuartoMove.ts
index 6de0033d7..36b0b83a1 100644
--- a/src/app/games/quarto/QuartoMove.ts
+++ b/src/app/games/quarto/QuartoMove.ts
@@ -1,5 +1,5 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';
 import { MoveCoord } from '../../jscaip/MoveCoord';
 import { QuartoPiece } from './QuartoPiece';

diff --git a/src/app/games/quarto/QuartoPiece.ts b/src/app/games/quarto/QuartoPiece.ts
index 7b4304d07..9cf36e43a 100644
--- a/src/app/games/quarto/QuartoPiece.ts
+++ b/src/app/games/quarto/QuartoPiece.ts
@@ -1,5 +1,4 @@
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { Encoder } from 'src/app/utils/Encoder';
+import { ComparableObject, Encoder } from '@everyboard/lib';

 export class QuartoPiece implements ComparableObject {

diff --git a/src/app/games/quarto/QuartoRules.ts b/src/app/games/quarto/QuartoRules.ts
index 27a4e1562..f9731df15 100644
--- a/src/app/games/quarto/QuartoRules.ts
+++ b/src/app/games/quarto/QuartoRules.ts
@@ -3,20 +3,18 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { QuartoState } from './QuartoState';
 import { QuartoMove } from './QuartoMove';
 import { QuartoPiece } from './QuartoPiece';
-import { Debug } from 'src/app/utils/utils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { SCORE } from 'src/app/jscaip/SCORE';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { QuartoFailure } from './QuartoFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
+import { Debug } from 'src/app/utils/Debug';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { TableUtils } from 'src/app/utils/ArrayUtils';

 /**
  * A criterion is a list of boolean sub-criteria, so three possible values: true, false, null.
diff --git a/src/app/games/quarto/QuartoState.ts b/src/app/games/quarto/QuartoState.ts
index bd1cacef0..8d6e414c0 100644
--- a/src/app/games/quarto/QuartoState.ts
+++ b/src/app/games/quarto/QuartoState.ts
@@ -1,6 +1,6 @@
 import { GameStateWithTable } from '../../jscaip/GameStateWithTable';
 import { QuartoPiece } from './QuartoPiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 export class QuartoState extends GameStateWithTable<QuartoPiece> {

diff --git a/src/app/games/quarto/quarto.component.ts b/src/app/games/quarto/quarto.component.ts
index 80415ca0f..f0a18f9ff 100644
--- a/src/app/games/quarto/quarto.component.ts
+++ b/src/app/games/quarto/quarto.component.ts
@@ -4,16 +4,15 @@ import { QuartoState } from './QuartoState';
 import { QuartoRules } from './QuartoRules';
 import { QuartoPiece } from './QuartoPiece';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MCTS } from 'src/app/jscaip/AI/MCTS';
-import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { QuartoHeuristic } from './QuartoHeuristic';
 import { QuartoMoveGenerator } from './QuartoMoveGenerator';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { Minimax } from 'src/app/jscaip/AI/Minimax';
+import { MCTS } from 'src/app/jscaip/AI/MCTS';

 @Component({
     selector: 'app-quarto',
diff --git a/src/app/games/quarto/tests/QuartoHeuristic.spec.ts b/src/app/games/quarto/tests/QuartoHeuristic.spec.ts
index de8227fb1..e2ae8f139 100644
--- a/src/app/games/quarto/tests/QuartoHeuristic.spec.ts
+++ b/src/app/games/quarto/tests/QuartoHeuristic.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { QuartoPiece } from '../QuartoPiece';
 import { QuartoState } from '../QuartoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { QuartoMove } from '../QuartoMove';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
diff --git a/src/app/games/quarto/tests/QuartoMove.spec.ts b/src/app/games/quarto/tests/QuartoMove.spec.ts
index 322ca90a2..f1063ea03 100644
--- a/src/app/games/quarto/tests/QuartoMove.spec.ts
+++ b/src/app/games/quarto/tests/QuartoMove.spec.ts
@@ -2,7 +2,7 @@
 import { QuartoNode, QuartoRules } from '../QuartoRules';
 import { QuartoMove } from '../QuartoMove';
 import { QuartoPiece } from '../QuartoPiece';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { QuartoMoveGenerator } from '../QuartoMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/quarto/tests/QuartoMoveGenerator.spec.ts b/src/app/games/quarto/tests/QuartoMoveGenerator.spec.ts
index 5c4302e53..9b1cbe03a 100644
--- a/src/app/games/quarto/tests/QuartoMoveGenerator.spec.ts
+++ b/src/app/games/quarto/tests/QuartoMoveGenerator.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { QuartoMove } from '../QuartoMove';
 import { QuartoMoveGenerator } from '../QuartoMoveGenerator';
 import { QuartoPiece } from '../QuartoPiece';
diff --git a/src/app/games/quarto/tests/QuartoRules.spec.ts b/src/app/games/quarto/tests/QuartoRules.spec.ts
index 837b38867..0cb07f104 100644
--- a/src/app/games/quarto/tests/QuartoRules.spec.ts
+++ b/src/app/games/quarto/tests/QuartoRules.spec.ts
@@ -3,12 +3,12 @@ import { QuartoNode, QuartoRules } from '../QuartoRules';
 import { QuartoMove } from '../QuartoMove';
 import { QuartoPiece } from '../QuartoPiece';
 import { QuartoState } from '../QuartoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Player } from 'src/app/jscaip/Player';
 import { QuartoFailure } from '../QuartoFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

 describe('QuartoRules', () => {
diff --git a/src/app/games/quarto/tests/quarto.component.spec.ts b/src/app/games/quarto/tests/quarto.component.spec.ts
index edabb3525..856d61934 100644
--- a/src/app/games/quarto/tests/quarto.component.spec.ts
+++ b/src/app/games/quarto/tests/quarto.component.spec.ts
@@ -4,7 +4,7 @@ import { QuartoComponent } from '../quarto.component';
 import { QuartoMove } from 'src/app/games/quarto/QuartoMove';
 import { QuartoPiece } from 'src/app/games/quarto/QuartoPiece';
 import { QuartoState } from 'src/app/games/quarto/QuartoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';

diff --git a/src/app/games/quixo/QuixoHeuristic.ts b/src/app/games/quixo/QuixoHeuristic.ts
index a1a5d9a01..081d407b7 100644
--- a/src/app/games/quixo/QuixoHeuristic.ts
+++ b/src/app/games/quixo/QuixoHeuristic.ts
@@ -4,18 +4,16 @@ import { QuixoMove } from './QuixoMove';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { QuixoNode, QuixoRules } from './QuixoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { NumberMap } from 'src/app/utils/NumberMap';
+import { MGPMap, MGPOptional, NumberMap } from '@everyboard/lib';
 import { PlayerMap } from 'src/app/jscaip/PlayerMap';
-import { MGPMap } from 'src/app/utils/MGPMap';

 export class QuixoHeuristic extends PlayerMetricHeuristic<QuixoMove, QuixoState, QuixoConfig> {

     public override getMetrics(node: QuixoNode, _config: MGPOptional<QuixoConfig>): PlayerNumberTable {
         const state: QuixoState = node.gameState;
         const linesSums: PlayerMap<MGPMap<string, NumberMap<number>>> = QuixoRules.getLinesSums(state);
-        const zerosFullestLine: number = QuixoRules.getFullestLine(linesSums.get(Player.ZERO));
-        const onesFullestLine: number = QuixoRules.getFullestLine(linesSums.get(Player.ONE));
+        const zerosFullestLine: number = QuixoRules.getFullestLine(linesSums.get(Player.ZERO).get());
+        const onesFullestLine: number = QuixoRules.getFullestLine(linesSums.get(Player.ONE).get());
         return PlayerNumberTable.ofSingle(zerosFullestLine, onesFullestLine);
     }

diff --git a/src/app/games/quixo/QuixoMove.ts b/src/app/games/quixo/QuixoMove.ts
index 0af82174e..9eef0f241 100644
--- a/src/app/games/quixo/QuixoMove.ts
+++ b/src/app/games/quixo/QuixoMove.ts
@@ -1,6 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';

 export class QuixoMove extends MoveCoord {
diff --git a/src/app/games/quixo/QuixoMoveGenerator.ts b/src/app/games/quixo/QuixoMoveGenerator.ts
index 1965d7e20..5ebae8654 100644
--- a/src/app/games/quixo/QuixoMoveGenerator.ts
+++ b/src/app/games/quixo/QuixoMoveGenerator.ts
@@ -4,7 +4,7 @@ import { QuixoConfig, QuixoState } from './QuixoState';
 import { QuixoMove } from './QuixoMove';
 import { QuixoNode, QuixoRules } from './QuixoRules';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class QuixoMoveGenerator extends MoveGenerator<QuixoMove, QuixoState, QuixoConfig> {

diff --git a/src/app/games/quixo/QuixoRules.ts b/src/app/games/quixo/QuixoRules.ts
index 6bd05645e..744146381 100644
--- a/src/app/games/quixo/QuixoRules.ts
+++ b/src/app/games/quixo/QuixoRules.ts
@@ -6,18 +6,13 @@ import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { QuixoConfig, QuixoState } from './QuixoState';
 import { QuixoMove } from './QuixoMove';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { NInARowHelper } from 'src/app/jscaip/NInARowHelper';
-import { Utils } from 'src/app/utils/utils';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPOptional, MGPSet, MGPValidation, NumberMap, Utils } from '@everyboard/lib';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { QuixoFailure } from './QuixoFailure';
-import { MGPMap } from 'src/app/utils/MGPMap';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
-import { NumberMap } from 'src/app/utils/NumberMap';
 import { PlayerMap } from 'src/app/jscaip/PlayerMap';

 export class QuixoNode extends GameNode<QuixoMove, QuixoState> {}
@@ -69,28 +64,28 @@ export class QuixoRules extends ConfigurableRules<QuixoMove, QuixoState, QuixoCo
     }

     public static getLinesSums(state: QuixoState): PlayerMap<MGPMap<string, NumberMap<number>>> {
-        const sums: PlayerMap<MGPMap<string, NumberMap<number>>> = PlayerMap.ofValues(
-            new MGPMap([
-                { key: 'columns', value: new NumberMap<number>() },
-                { key: 'rows', value: new NumberMap<number>() },
-                { key: 'ascendingDiagonal', value: new NumberMap<number>() },
-                { key: 'descendingDiagonal', value: new NumberMap<number>() },
-            ]),
-            new MGPMap([
-                { key: 'columns', value: new NumberMap<number>() },
-                { key: 'rows', value: new NumberMap<number>() },
-                { key: 'ascendingDiagonal', value: new NumberMap<number>() },
-                { key: 'descendingDiagonal', value: new NumberMap<number>() },
-            ]));
+        const sums: PlayerMap<MGPMap<string, NumberMap<number>>> = new MGPMap();
+        sums.set(Player.ZERO, new MGPMap([
+            { key: 'columns', value: new NumberMap<number>() },
+            { key: 'rows', value: new NumberMap<number>() },
+            { key: 'ascendingDiagonal', value: new NumberMap<number>() },
+            { key: 'descendingDiagonal', value: new NumberMap<number>() },
+        ]));
+        sums.set(Player.ONE, new MGPMap([
+            { key: 'columns', value: new NumberMap<number>() },
+            { key: 'rows', value: new NumberMap<number>() },
+            { key: 'ascendingDiagonal', value: new NumberMap<number>() },
+            { key: 'descendingDiagonal', value: new NumberMap<number>() },
+        ]));
         for (const coordAndContent of state.getCoordsAndContents()) {
             const content: PlayerOrNone = coordAndContent.content;
             const x: number = coordAndContent.coord.x;
             const y: number = coordAndContent.coord.y;
             if (content.isPlayer()) {
-                sums.get(content).get('columns').get().addOrSet(x, 1);
-                sums.get(content).get('rows').get().addOrSet(y, 1);
-                sums.get(content).get('ascendingDiagonal').get().addOrSet(x + y, 1);
-                sums.get(content).get('descendingDiagonal').get().addOrSet(x - y, 1);
+                sums.get(content).get().get('columns').get().addOrSet(x, 1);
+                sums.get(content).get().get('rows').get().addOrSet(y, 1);
+                sums.get(content).get().get('ascendingDiagonal').get().addOrSet(x + y, 1);
+                sums.get(content).get().get('descendingDiagonal').get().addOrSet(x - y, 1);
             }
         }
         return sums;
diff --git a/src/app/games/quixo/QuixoTutorial.ts b/src/app/games/quixo/QuixoTutorial.ts
index 67be22581..173b4a047 100644
--- a/src/app/games/quixo/QuixoTutorial.ts
+++ b/src/app/games/quixo/QuixoTutorial.ts
@@ -4,7 +4,7 @@ import { Orthogonal } from 'src/app/jscaip/Direction';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { QuixoRules } from './QuixoRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const _: PlayerOrNone = PlayerOrNone.NONE;
diff --git a/src/app/games/quixo/quixo.component.ts b/src/app/games/quixo/quixo.component.ts
index a3aecd692..bc8178b89 100644
--- a/src/app/games/quixo/quixo.component.ts
+++ b/src/app/games/quixo/quixo.component.ts
@@ -5,16 +5,15 @@ import { Orthogonal } from 'src/app/jscaip/Direction';
 import { QuixoMove } from 'src/app/games/quixo/QuixoMove';
 import { QuixoConfig, QuixoState } from 'src/app/games/quixo/QuixoState';
 import { QuixoRules } from 'src/app/games/quixo/QuixoRules';
-import { GameComponentUtils } from 'src/app/components/game-components/GameComponentUtils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { QuixoMoveGenerator } from './QuixoMoveGenerator';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { QuixoHeuristic } from './QuixoHeuristic';
+import { GameComponentUtils } from 'src/app/components/game-components/GameComponentUtils';

 @Component({
     selector: 'app-quixo',
diff --git a/src/app/games/quixo/tests/QuixoHeuristic.spec.ts b/src/app/games/quixo/tests/QuixoHeuristic.spec.ts
index dcabe4c47..cd694489c 100644
--- a/src/app/games/quixo/tests/QuixoHeuristic.spec.ts
+++ b/src/app/games/quixo/tests/QuixoHeuristic.spec.ts
@@ -3,9 +3,9 @@ import { Orthogonal } from 'src/app/jscaip/Direction';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { QuixoConfig, QuixoState } from '../QuixoState';
 import { QuixoMove } from '../QuixoMove';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { QuixoNode, QuixoRules } from '../QuixoRules';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { QuixoHeuristic } from '../QuixoHeuristic';

 describe('QuixoHeuristic', () => {
diff --git a/src/app/games/quixo/tests/QuixoMove.spec.ts b/src/app/games/quixo/tests/QuixoMove.spec.ts
index 8440c569e..a5c62b9ef 100644
--- a/src/app/games/quixo/tests/QuixoMove.spec.ts
+++ b/src/app/games/quixo/tests/QuixoMove.spec.ts
@@ -4,9 +4,8 @@ import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { QuixoConfig, QuixoState } from '../QuixoState';
 import { QuixoNode, QuixoRules } from '../QuixoRules';
 import { QuixoMove } from '../QuixoMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { EncoderTestUtils, MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { QuixoMoveGenerator } from '../QuixoMoveGenerator';

 describe('QuixoMove', () => {
diff --git a/src/app/games/quixo/tests/QuixoRules.spec.ts b/src/app/games/quixo/tests/QuixoRules.spec.ts
index 22a11e8cd..f33397ce7 100644
--- a/src/app/games/quixo/tests/QuixoRules.spec.ts
+++ b/src/app/games/quixo/tests/QuixoRules.spec.ts
@@ -6,12 +6,10 @@ import { QuixoMove } from '../QuixoMove';
 import { QuixoNode, QuixoRules } from '../QuixoRules';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPOptional, MGPSet, TestUtils } from '@everyboard/lib';
 import { QuixoFailure } from '../QuixoFailure';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('QuixoRules', () => {

diff --git a/src/app/games/quixo/tests/quixo.component.spec.ts b/src/app/games/quixo/tests/quixo.component.spec.ts
index f3246e2da..ac1ee1866 100644
--- a/src/app/games/quixo/tests/quixo.component.spec.ts
+++ b/src/app/games/quixo/tests/quixo.component.spec.ts
@@ -5,7 +5,7 @@ import { QuixoMove } from 'src/app/games/quixo/QuixoMove';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { QuixoState } from 'src/app/games/quixo/QuixoState';
 import { QuixoFailure } from 'src/app/games/quixo/QuixoFailure';
diff --git a/src/app/games/reversi/ReversiHeuristic.ts b/src/app/games/reversi/ReversiHeuristic.ts
index 84e239693..86fb8ffec 100644
--- a/src/app/games/reversi/ReversiHeuristic.ts
+++ b/src/app/games/reversi/ReversiHeuristic.ts
@@ -5,7 +5,7 @@ import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { ReversiConfig, ReversiNode } from './ReversiRules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class ReversiHeuristic extends PlayerMetricHeuristic<ReversiMove, ReversiState, ReversiConfig> {

diff --git a/src/app/games/reversi/ReversiMove.ts b/src/app/games/reversi/ReversiMove.ts
index 8f9db76de..919179199 100644
--- a/src/app/games/reversi/ReversiMove.ts
+++ b/src/app/games/reversi/ReversiMove.ts
@@ -1,6 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 export class ReversiMove extends MoveCoord {

diff --git a/src/app/games/reversi/ReversiMoveGenerator.ts b/src/app/games/reversi/ReversiMoveGenerator.ts
index 7cf6f838a..e03bd0943 100644
--- a/src/app/games/reversi/ReversiMoveGenerator.ts
+++ b/src/app/games/reversi/ReversiMoveGenerator.ts
@@ -2,7 +2,7 @@ import { ReversiState } from './ReversiState';
 import { ReversiMove } from './ReversiMove';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { ReversiRules, ReversiNode, ReversiMoveWithSwitched, ReversiConfig } from './ReversiRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class ReversiMoveGenerator extends MoveGenerator<ReversiMove, ReversiState, ReversiConfig> {

diff --git a/src/app/games/reversi/ReversiOrderedMoveGenerator.ts b/src/app/games/reversi/ReversiOrderedMoveGenerator.ts
index 92faa764d..d0d01519e 100644
--- a/src/app/games/reversi/ReversiOrderedMoveGenerator.ts
+++ b/src/app/games/reversi/ReversiOrderedMoveGenerator.ts
@@ -2,9 +2,8 @@ import { ReversiState } from './ReversiState';
 import { ReversiMove } from './ReversiMove';
 import { ReversiRules, ReversiNode, ReversiMoveWithSwitched, ReversiConfig } from './ReversiRules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class ReversiOrderedMoveGenerator extends MoveGenerator<ReversiMove, ReversiState, ReversiConfig> {

diff --git a/src/app/games/reversi/ReversiRules.ts b/src/app/games/reversi/ReversiRules.ts
index 15c86295d..b83c70fb6 100644
--- a/src/app/games/reversi/ReversiRules.ts
+++ b/src/app/games/reversi/ReversiRules.ts
@@ -5,14 +5,12 @@ import { Coord } from '../../jscaip/Coord';
 import { Direction } from '../../jscaip/Direction';
 import { ReversiMove } from './ReversiMove';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Utils } from 'src/app/utils/utils';
-import { Debug } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { ReversiFailure } from './ReversiFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
+import { Debug } from 'src/app/utils/Debug';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
diff --git a/src/app/games/reversi/ReversiTutorial.ts b/src/app/games/reversi/ReversiTutorial.ts
index 1de889dfe..bff9b277b 100644
--- a/src/app/games/reversi/ReversiTutorial.ts
+++ b/src/app/games/reversi/ReversiTutorial.ts
@@ -3,7 +3,7 @@ import { ReversiState } from 'src/app/games/reversi/ReversiState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { ReversiConfig, ReversiRules } from './ReversiRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const _: PlayerOrNone = PlayerOrNone.NONE;
diff --git a/src/app/games/reversi/reversi.component.ts b/src/app/games/reversi/reversi.component.ts
index fd5094adb..a877054bc 100644
--- a/src/app/games/reversi/reversi.component.ts
+++ b/src/app/games/reversi/reversi.component.ts
@@ -3,13 +3,11 @@ import { ReversiConfig, ReversiLegalityInformation, ReversiRules } from './Rever
 import { ReversiState } from './ReversiState';
 import { ReversiMove } from 'src/app/games/reversi/ReversiMove';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Direction } from 'src/app/jscaip/Direction';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { ReversiMoveGenerator } from './ReversiMoveGenerator';
 import { ReversiMinimax } from './ReversiMinimax';
diff --git a/src/app/games/reversi/tests/ReversiHeuristic.spec.ts b/src/app/games/reversi/tests/ReversiHeuristic.spec.ts
index df4d7a24a..47852c502 100644
--- a/src/app/games/reversi/tests/ReversiHeuristic.spec.ts
+++ b/src/app/games/reversi/tests/ReversiHeuristic.spec.ts
@@ -1,11 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { ReversiState } from '../ReversiState';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { ReversiConfig, ReversiNode, ReversiRules } from '../ReversiRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { ReversiHeuristic } from '../ReversiHeuristic';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/reversi/tests/ReversiMinimax.spec.ts b/src/app/games/reversi/tests/ReversiMinimax.spec.ts
index 0a4875f58..b76028fea 100644
--- a/src/app/games/reversi/tests/ReversiMinimax.spec.ts
+++ b/src/app/games/reversi/tests/ReversiMinimax.spec.ts
@@ -5,7 +5,7 @@ import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { ReversiConfig, ReversiLegalityInformation, ReversiNode, ReversiRules } from '../ReversiRules';
 import { ReversiMinimax } from '../ReversiMinimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('ReversiMinimax', () => {

diff --git a/src/app/games/reversi/tests/ReversiMove.spec.ts b/src/app/games/reversi/tests/ReversiMove.spec.ts
index 733d11dd4..fe62349eb 100644
--- a/src/app/games/reversi/tests/ReversiMove.spec.ts
+++ b/src/app/games/reversi/tests/ReversiMove.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { ReversiRules } from '../ReversiRules';
 import { ReversiMove } from '../ReversiMove';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { ReversiMoveGenerator } from '../ReversiMoveGenerator';

diff --git a/src/app/games/reversi/tests/ReversiMoveGenerator.spec.ts b/src/app/games/reversi/tests/ReversiMoveGenerator.spec.ts
index 361e33fa2..47ede2c27 100644
--- a/src/app/games/reversi/tests/ReversiMoveGenerator.spec.ts
+++ b/src/app/games/reversi/tests/ReversiMoveGenerator.spec.ts
@@ -2,10 +2,10 @@
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { ReversiMove } from '../ReversiMove';
 import { ReversiState } from '../ReversiState';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ReversiConfig, ReversiNode, ReversiRules } from '../ReversiRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { ReversiMoveGenerator } from '../ReversiMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/reversi/tests/ReversiOrderedMoveGenerator.spec.ts b/src/app/games/reversi/tests/ReversiOrderedMoveGenerator.spec.ts
index 280946513..0bccf1479 100644
--- a/src/app/games/reversi/tests/ReversiOrderedMoveGenerator.spec.ts
+++ b/src/app/games/reversi/tests/ReversiOrderedMoveGenerator.spec.ts
@@ -2,10 +2,10 @@
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { ReversiMove } from '../ReversiMove';
 import { ReversiState } from '../ReversiState';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ReversiConfig, ReversiNode, ReversiRules } from '../ReversiRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { ReversiOrderedMoveGenerator } from '../ReversiOrderedMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/reversi/tests/ReversiRules.spec.ts b/src/app/games/reversi/tests/ReversiRules.spec.ts
index 2f20be520..d52c36eb6 100644
--- a/src/app/games/reversi/tests/ReversiRules.spec.ts
+++ b/src/app/games/reversi/tests/ReversiRules.spec.ts
@@ -4,8 +4,8 @@ import { ReversiMove } from '../ReversiMove';
 import { ReversiState } from '../ReversiState';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { ReversiFailure } from '../ReversiFailure';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
diff --git a/src/app/games/reversi/tests/reversi.component.spec.ts b/src/app/games/reversi/tests/reversi.component.spec.ts
index 356c1b4d7..65f5ca7a3 100644
--- a/src/app/games/reversi/tests/reversi.component.spec.ts
+++ b/src/app/games/reversi/tests/reversi.component.spec.ts
@@ -3,7 +3,7 @@ import { ReversiComponent } from '../reversi.component';
 import { ReversiMove } from 'src/app/games/reversi/ReversiMove';
 import { ReversiState } from 'src/app/games/reversi/ReversiState';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { fakeAsync } from '@angular/core/testing';

diff --git a/src/app/games/sahara/SaharaHeuristic.ts b/src/app/games/sahara/SaharaHeuristic.ts
index e3e92a9f3..cdefc25f1 100644
--- a/src/app/games/sahara/SaharaHeuristic.ts
+++ b/src/app/games/sahara/SaharaHeuristic.ts
@@ -3,7 +3,7 @@ import { SaharaMove } from './SaharaMove';
 import { SaharaState } from './SaharaState';
 import { SaharaNode, SaharaRules } from './SaharaRules';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/sahara/SaharaMove.ts b/src/app/games/sahara/SaharaMove.ts
index 631555fc3..fc4b33f1f 100644
--- a/src/app/games/sahara/SaharaMove.ts
+++ b/src/app/games/sahara/SaharaMove.ts
@@ -2,13 +2,10 @@ import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { Coord } from 'src/app/jscaip/Coord';
 import { SaharaState } from './SaharaState';
 import { TriangularCheckerBoard } from 'src/app/jscaip/TriangularCheckerBoard';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPFallible, MGPValidation, Utils } from '@everyboard/lib';
 import { SaharaFailure } from './SaharaFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Utils } from 'src/app/utils/utils';

 export class SaharaMove extends MoveCoordToCoord {

diff --git a/src/app/games/sahara/SaharaRules.ts b/src/app/games/sahara/SaharaRules.ts
index 299c8e4fa..a253708da 100644
--- a/src/app/games/sahara/SaharaRules.ts
+++ b/src/app/games/sahara/SaharaRules.ts
@@ -5,17 +5,15 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { SaharaMove } from './SaharaMove';
 import { SaharaState } from './SaharaState';
 import { TriangularCheckerBoard } from 'src/app/jscaip/TriangularCheckerBoard';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Debug } from 'src/app/utils/utils';
+import { MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { TriangularGameState } from 'src/app/jscaip/TriangularGameState';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { SaharaFailure } from './SaharaFailure';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { Debug } from 'src/app/utils/Debug';

 export class SaharaNode extends GameNode<SaharaMove, SaharaState> {}

diff --git a/src/app/games/sahara/SaharaTutorial.ts b/src/app/games/sahara/SaharaTutorial.ts
index c50fb0bd5..050c46fe4 100644
--- a/src/app/games/sahara/SaharaTutorial.ts
+++ b/src/app/games/sahara/SaharaTutorial.ts
@@ -2,7 +2,7 @@ import { SaharaMove } from 'src/app/games/sahara/SaharaMove';
 import { SaharaState } from 'src/app/games/sahara/SaharaState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { SaharaRules } from './SaharaRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
diff --git a/src/app/games/sahara/sahara.component.ts b/src/app/games/sahara/sahara.component.ts
index 2b5d1c99d..3fb67fcb7 100644
--- a/src/app/games/sahara/sahara.component.ts
+++ b/src/app/games/sahara/sahara.component.ts
@@ -1,23 +1,20 @@
 import { Component } from '@angular/core';

-import { TriangularGameComponent }
-    from 'src/app/components/game-components/game-component/TriangularGameComponent';
+import { TriangularGameComponent } from 'src/app/components/game-components/game-component/TriangularGameComponent';
 import { Coord } from 'src/app/jscaip/Coord';
 import { SaharaMove } from 'src/app/games/sahara/SaharaMove';
 import { SaharaState } from 'src/app/games/sahara/SaharaState';
 import { SaharaRules } from 'src/app/games/sahara/SaharaRules';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { SaharaFailure } from './SaharaFailure';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { SaharaHeuristic } from './SaharaHeuristic';
 import { SaharaMoveGenerator } from './SaharaMoveGenerator';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';

 @Component({
     selector: 'app-sahara',
diff --git a/src/app/games/sahara/tests/SaharaHeuristic.spec.ts b/src/app/games/sahara/tests/SaharaHeuristic.spec.ts
index 5b6298544..2d0c52491 100644
--- a/src/app/games/sahara/tests/SaharaHeuristic.spec.ts
+++ b/src/app/games/sahara/tests/SaharaHeuristic.spec.ts
@@ -2,7 +2,7 @@
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { SaharaState } from '../SaharaState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
 import { SaharaHeuristic } from '../SaharaHeuristic';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/sahara/tests/SaharaMove.spec.ts b/src/app/games/sahara/tests/SaharaMove.spec.ts
index a3e3959a7..5e95f83c2 100644
--- a/src/app/games/sahara/tests/SaharaMove.spec.ts
+++ b/src/app/games/sahara/tests/SaharaMove.spec.ts
@@ -3,11 +3,10 @@ import { SaharaRules } from '../SaharaRules';
 import { SaharaMove } from '../SaharaMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { SaharaFailure } from '../SaharaFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, TestUtils } from '@everyboard/lib';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MoveTestUtils } from 'src/app/jscaip/tests/Move.spec';
 import { SaharaMoveGenerator } from '../SaharaMoveGenerator';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('SaharaMoves', () => {

diff --git a/src/app/games/sahara/tests/sahara.component.spec.ts b/src/app/games/sahara/tests/sahara.component.spec.ts
index 66dc26930..cb6a40fc9 100644
--- a/src/app/games/sahara/tests/sahara.component.spec.ts
+++ b/src/app/games/sahara/tests/sahara.component.spec.ts
@@ -8,7 +8,7 @@ import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { SaharaFailure } from '../SaharaFailure';
 import { FourStatePiece } from 'src/app/jscaip/FourStatePiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';

 describe('SaharaComponent', () => {

diff --git a/src/app/games/siam/SiamHeuristic.ts b/src/app/games/siam/SiamHeuristic.ts
index 7fd45f5fd..57f3697a6 100644
--- a/src/app/games/siam/SiamHeuristic.ts
+++ b/src/app/games/siam/SiamHeuristic.ts
@@ -6,7 +6,7 @@ import { SiamState } from './SiamState';
 import { Player } from 'src/app/jscaip/Player';
 import { SiamPiece } from './SiamPiece';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class SiamHeuristic extends Heuristic<SiamMove, SiamState, BoardValue, SiamConfig> {

diff --git a/src/app/games/siam/SiamMove.ts b/src/app/games/siam/SiamMove.ts
index f5cd031ec..0681e4a7b 100644
--- a/src/app/games/siam/SiamMove.ts
+++ b/src/app/games/siam/SiamMove.ts
@@ -1,7 +1,6 @@
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPOptional } from '@everyboard/lib';

 type SiamMoveFields = [number, number, MGPOptional<Orthogonal>, Orthogonal];

diff --git a/src/app/games/siam/SiamMoveGenerator.ts b/src/app/games/siam/SiamMoveGenerator.ts
index fb47a2516..e613d4113 100644
--- a/src/app/games/siam/SiamMoveGenerator.ts
+++ b/src/app/games/siam/SiamMoveGenerator.ts
@@ -4,7 +4,7 @@ import { SiamPiece } from './SiamPiece';
 import { Player } from 'src/app/jscaip/Player';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { SiamRules, SiamNode, SiamConfig } from './SiamRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class SiamMoveGenerator extends MoveGenerator<SiamMove, SiamState, SiamConfig> {

diff --git a/src/app/games/siam/SiamPiece.ts b/src/app/games/siam/SiamPiece.ts
index b4cfcf578..195f7324d 100644
--- a/src/app/games/siam/SiamPiece.ts
+++ b/src/app/games/siam/SiamPiece.ts
@@ -1,7 +1,6 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { Utils } from 'src/app/utils/utils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, Utils } from '@everyboard/lib';

 export type SiamPieceValue = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;

diff --git a/src/app/games/siam/SiamRules.ts b/src/app/games/siam/SiamRules.ts
index 7a6591eac..cc2a6948a 100644
--- a/src/app/games/siam/SiamRules.ts
+++ b/src/app/games/siam/SiamRules.ts
@@ -5,17 +5,15 @@ import { SiamPiece } from './SiamPiece';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { SiamFailure } from './SiamFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { NumberConfig, RulesConfigDescription, RulesConfigDescriptionLocalizable } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
+import { Debug } from 'src/app/utils/Debug';

 export class SiamLegalityInformation {
     public constructor(public readonly resultingBoard: Table<SiamPiece>,
diff --git a/src/app/games/siam/SiamTutorial.ts b/src/app/games/siam/SiamTutorial.ts
index f8a79f7e7..4e0fc4e59 100644
--- a/src/app/games/siam/SiamTutorial.ts
+++ b/src/app/games/siam/SiamTutorial.ts
@@ -2,7 +2,7 @@ import { SiamMove } from 'src/app/games/siam/SiamMove';
 import { SiamPiece } from 'src/app/games/siam/SiamPiece';
 import { SiamState } from 'src/app/games/siam/SiamState';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { SiamConfig, SiamRules } from './SiamRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
diff --git a/src/app/games/siam/siam.component.ts b/src/app/games/siam/siam.component.ts
index e1549ea76..0e0c7066e 100644
--- a/src/app/games/siam/siam.component.ts
+++ b/src/app/games/siam/siam.component.ts
@@ -6,19 +6,16 @@ import { SiamConfig, SiamLegalityInformation, SiamRules } from 'src/app/games/si
 import { SiamPiece } from 'src/app/games/siam/SiamPiece';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
-import { Debug } from 'src/app/utils/utils';
+import { MGPOptional, MGPSet, MGPValidation, Utils } from '@everyboard/lib';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPSet } from 'src/app/utils/MGPSet';
 import { SiamFailure } from './SiamFailure';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { SiamMoveGenerator } from './SiamMoveGenerator';
 import { SiamMinimax } from './SiamMinimax';
 import { ViewBox } from 'src/app/components/game-components/GameComponentUtils';
+import { Debug } from 'src/app/utils/Debug';

 export type SiamIndicatorArrow = {
     source: MGPOptional<{ coord: Coord, piece: SiamPiece }>,
diff --git a/src/app/games/siam/tests/SiamHeuristic.spec.ts b/src/app/games/siam/tests/SiamHeuristic.spec.ts
index db433b569..e5c17c113 100644
--- a/src/app/games/siam/tests/SiamHeuristic.spec.ts
+++ b/src/app/games/siam/tests/SiamHeuristic.spec.ts
@@ -5,9 +5,9 @@ import { SiamState } from '../SiamState';
 import { SiamMove } from '../SiamMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SiamHeuristic } from '../SiamHeuristic';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';

diff --git a/src/app/games/siam/tests/SiamMinimax.spec.ts b/src/app/games/siam/tests/SiamMinimax.spec.ts
index c35dafd05..6bcd55be1 100644
--- a/src/app/games/siam/tests/SiamMinimax.spec.ts
+++ b/src/app/games/siam/tests/SiamMinimax.spec.ts
@@ -4,8 +4,8 @@ import { SiamPiece } from '../SiamPiece';
 import { SiamState } from '../SiamState';
 import { SiamMove } from '../SiamMove';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { SiamMinimax } from '../SiamMinimax';
diff --git a/src/app/games/siam/tests/SiamMove.spec.ts b/src/app/games/siam/tests/SiamMove.spec.ts
index beb783b1a..80a82975a 100644
--- a/src/app/games/siam/tests/SiamMove.spec.ts
+++ b/src/app/games/siam/tests/SiamMove.spec.ts
@@ -4,9 +4,8 @@ import { SiamMove } from '../SiamMove';
 import { SiamState } from '../SiamState';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { SiamPiece } from '../SiamPiece';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { EncoderTestUtils, MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SiamMoveGenerator } from '../SiamMoveGenerator';

 describe('SiamMove', () => {
diff --git a/src/app/games/siam/tests/SiamMoveGenerator.spec.ts b/src/app/games/siam/tests/SiamMoveGenerator.spec.ts
index 41ef8e1cb..cf9774ec2 100644
--- a/src/app/games/siam/tests/SiamMoveGenerator.spec.ts
+++ b/src/app/games/siam/tests/SiamMoveGenerator.spec.ts
@@ -3,9 +3,9 @@ import { SiamConfig, SiamNode, SiamRules } from '../SiamRules';
 import { SiamPiece } from '../SiamPiece';
 import { SiamState } from '../SiamState';
 import { SiamMove } from '../SiamMove';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SiamMoveGenerator } from '../SiamMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: SiamPiece = SiamPiece.EMPTY;
 const M: SiamPiece = SiamPiece.MOUNTAIN;
diff --git a/src/app/games/siam/tests/SiamRules.spec.ts b/src/app/games/siam/tests/SiamRules.spec.ts
index 62f6c0240..4f167751e 100644
--- a/src/app/games/siam/tests/SiamRules.spec.ts
+++ b/src/app/games/siam/tests/SiamRules.spec.ts
@@ -4,11 +4,11 @@ import { SiamMove } from '../SiamMove';
 import { SiamPiece } from '../SiamPiece';
 import { SiamState } from '../SiamState';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { SiamFailure } from '../SiamFailure';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Coord } from 'src/app/jscaip/Coord';

diff --git a/src/app/games/siam/tests/siam.component.spec.ts b/src/app/games/siam/tests/siam.component.spec.ts
index 86e705f8f..3524f31ee 100644
--- a/src/app/games/siam/tests/siam.component.spec.ts
+++ b/src/app/games/siam/tests/siam.component.spec.ts
@@ -5,9 +5,9 @@ import { fakeAsync } from '@angular/core/testing';
 import { SiamComponent } from '../siam.component';
 import { SiamMove } from 'src/app/games/siam/SiamMove';
 import { Orthogonal } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { SiamPiece } from 'src/app/games/siam/SiamPiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SiamState } from 'src/app/games/siam/SiamState';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
diff --git a/src/app/games/six/SixFilteredMoveGenerator.ts b/src/app/games/six/SixFilteredMoveGenerator.ts
index f8ed9d197..0c04c2d1b 100644
--- a/src/app/games/six/SixFilteredMoveGenerator.ts
+++ b/src/app/games/six/SixFilteredMoveGenerator.ts
@@ -1,13 +1,12 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPSet } from '@everyboard/lib';
 import { SixState } from './SixState';
 import { SixMove } from './SixMove';
 import { SCORE } from 'src/app/jscaip/SCORE';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
 import { SixMoveGenerator } from './SixMoveGenerator';
 import { SixHeuristic } from './SixHeuristic';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { BoardInfo } from 'src/app/jscaip/AI/AlignmentHeuristic';

 export class SixFilteredMoveGenerator extends SixMoveGenerator {
diff --git a/src/app/games/six/SixHeuristic.ts b/src/app/games/six/SixHeuristic.ts
index ea29b23fc..091dea6b1 100644
--- a/src/app/games/six/SixHeuristic.ts
+++ b/src/app/games/six/SixHeuristic.ts
@@ -1,16 +1,14 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { SixState } from './SixState';
 import { SixMove } from './SixMove';
 import { SCORE } from 'src/app/jscaip/SCORE';
-import { Utils } from 'src/app/utils/utils';
 import { SixVictorySource, SixNode } from './SixRules';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { AlignmentHeuristic, BoardInfo } from 'src/app/jscaip/AI/AlignmentHeuristic';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export class SixHeuristic extends AlignmentHeuristic<SixMove, SixState, SixVictorySource> {

@@ -36,8 +34,10 @@ export class SixHeuristic extends AlignmentHeuristic<SixMove, SixState, SixVicto
             return BoardValue.of(victoryValue);
         }
         if (state.turn > 39) {
-            const pieces: PlayerNumberMap = state.countPieces();
-            return BoardValue.ofPlayerNumberMap(pieces);
+            const pieces: [number, number] = state.countPieces();
+            const zeroPieces: number = pieces[0];
+            const onePieces: number = pieces[1];
+            return BoardValue.ofSingle(zeroPieces, onePieces);
         }
         if (shapeInfo.status === SCORE.PRE_VICTORY) {
             return BoardValue.of(LAST_PLAYER.getPreVictory());
diff --git a/src/app/games/six/SixMove.ts b/src/app/games/six/SixMove.ts
index 25d944dcd..15489abe9 100644
--- a/src/app/games/six/SixMove.ts
+++ b/src/app/games/six/SixMove.ts
@@ -1,8 +1,6 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { Encoder, MGPOptional, Utils } from '@everyboard/lib';
 import { Move } from 'src/app/jscaip/Move';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Utils } from 'src/app/utils/utils';

 type SixMoveFields = [MGPOptional<Coord>, Coord, MGPOptional<Coord>];

diff --git a/src/app/games/six/SixMoveGenerator.ts b/src/app/games/six/SixMoveGenerator.ts
index 7f55c9196..97c1e1606 100644
--- a/src/app/games/six/SixMoveGenerator.ts
+++ b/src/app/games/six/SixMoveGenerator.ts
@@ -1,12 +1,10 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { SixState } from './SixState';
 import { SixMove } from './SixMove';
-import { Debug } from 'src/app/utils/utils';
 import { SixNode, SixRules } from './SixRules';
+import { Debug } from 'src/app/utils/Debug';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/six/SixRules.ts b/src/app/games/six/SixRules.ts
index cfc816e89..e91a3d3fa 100644
--- a/src/app/games/six/SixRules.ts
+++ b/src/app/games/six/SixRules.ts
@@ -2,21 +2,17 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { SixState } from './SixState';
 import { SixMove } from './SixMove';
 import { SixFailure } from './SixFailure';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
+import { MGPFallible, MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { Debug } from 'src/app/utils/Debug';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { Debug } from 'src/app/utils/utils';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 export type SixLegalityInformation = MGPSet<Coord>;

@@ -163,9 +159,9 @@ export class SixRules extends Rules<SixMove, SixState, SixLegalityInformation> {
             return GameStatus.getVictory(LAST_PLAYER);
         }
         if (state.turn > 39) {
-            const pieces: PlayerNumberMap = state.countPieces();
-            const zeroPieces: number = pieces.get(Player.ZERO);
-            const onePieces: number = pieces.get(Player.ONE);
+            const pieces: number[] = state.countPieces();
+            const zeroPieces: number = pieces[0];
+            const onePieces: number = pieces[1];
             if (zeroPieces < 6 && onePieces < 6) {
                 if (zeroPieces < onePieces) {
                     return GameStatus.ONE_WON;
diff --git a/src/app/games/six/SixState.ts b/src/app/games/six/SixState.ts
index 339062dd7..ef8c84a95 100644
--- a/src/app/games/six/SixState.ts
+++ b/src/app/games/six/SixState.ts
@@ -1,19 +1,14 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Vector } from 'src/app/jscaip/Vector';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { TableUtils, Table } from 'src/app/utils/ArrayUtils';
-import { ReversibleMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { TableUtils, Table } from 'src/app/jscaip/TableUtils';
 import { SixFailure } from './SixFailure';
 import { SixMove } from './SixMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPSet, MGPValidation, ReversibleMap, Utils } from '@everyboard/lib';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { OpenHexagonalGameState } from 'src/app/jscaip/OpenHexagonalGameState';
 import { HexagonalUtils } from 'src/app/jscaip/HexagonalUtils';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { CoordSet } from 'src/app/jscaip/CoordSet';

 export class SixState extends OpenHexagonalGameState<Player> {

@@ -106,22 +101,19 @@ export class SixState extends OpenHexagonalGameState<Player> {

     }

-    public countPieces(): PlayerNumberMap {
+    public countPieces(): [number, number] {
         const pieces: ReversibleMap<Player, MGPSet<Coord>> = this.pieces.reverse();
         const zeroPieces: MGPSet<Coord> = pieces.get(Player.ZERO).getOrElse(new CoordSet());
         const onePieces: MGPSet<Coord> = pieces.get(Player.ONE).getOrElse(new CoordSet());
-        return PlayerNumberMap.of(zeroPieces.size(), onePieces.size());
+        return [zeroPieces.size(), onePieces.size()];
     }

     public switchPiece(coord: Coord): SixState {
         const newPieces: ReversibleMap<Coord, Player> = this.pieces.getCopy();
         const oldPiece: PlayerOrNone = this.getPieceAt(coord);
-        if (oldPiece.isPlayer()) {
-            newPieces.replace(coord, oldPiece.getOpponent());
-            return new SixState(newPieces, this.turn);
-        } else {
-            ErrorLoggerService.logErrorAndFail('SixState', 'Cannot switch piece if there is no piece!', { coord: coord.toString() });
-        }
+        Utils.assert(oldPiece.isPlayer(), 'Cannot switch piece if there is no piece!', { coord: coord.toString() });
+        newPieces.replace(coord, (oldPiece as Player).getOpponent());
+        return new SixState(newPieces, this.turn);
     }

     public equals(other: SixState): boolean {
diff --git a/src/app/games/six/SixTutorial.ts b/src/app/games/six/SixTutorial.ts
index 524c7df55..9d3ccf08a 100644
--- a/src/app/games/six/SixTutorial.ts
+++ b/src/app/games/six/SixTutorial.ts
@@ -3,11 +3,10 @@ import { SixMove } from 'src/app/games/six/SixMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Localized } from 'src/app/utils/LocaleUtils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Tutorial, TutorialStep } from '../../components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { SixRules } from './SixRules';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';
-import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = Player.ZERO;
@@ -93,9 +92,9 @@ export class SixTutorial extends Tutorial {
             ], 40),
             SixMove.ofMovement(new Coord(6, 1), new Coord(5, 1)),
             (_move: SixMove, _previousState: SixState, resultingState: SixState) => {
-                const pieces: PlayerNumberMap = resultingState.countPieces();
-                if (pieces.get(Player.ZERO) === 19) {
-                    if (pieces.get(Player.ONE) === 18) {
+                const pieces: [number, number] = resultingState.countPieces();
+                if (pieces[0] === 19) {
+                    if (pieces[1] === 18) {
                         return MGPValidation.SUCCESS;
                     } else {
                         return MGPValidation.failure(SixTutorialMessages.MOVEMENT_NOT_DISCONNECTING());
diff --git a/src/app/games/six/six.component.ts b/src/app/games/six/six.component.ts
index e45ba4ac6..38b5ba259 100644
--- a/src/app/games/six/six.component.ts
+++ b/src/app/games/six/six.component.ts
@@ -7,14 +7,11 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { HexaLayout } from 'src/app/jscaip/HexaLayout';
 import { FlatHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { HexagonalGameComponent }
     from '../../components/game-components/game-component/HexagonalGameComponent';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible, MGPOptional, MGPSet, MGPValidation } from '@everyboard/lib';
 import { ViewBox } from 'src/app/components/game-components/GameComponentUtils';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
diff --git a/src/app/games/six/tests/SixFilteredMoveGenerator.spec.ts b/src/app/games/six/tests/SixFilteredMoveGenerator.spec.ts
index bee553e34..adc1e570c 100644
--- a/src/app/games/six/tests/SixFilteredMoveGenerator.spec.ts
+++ b/src/app/games/six/tests/SixFilteredMoveGenerator.spec.ts
@@ -3,8 +3,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { SixState } from '../SixState';
 import { SixMove } from '../SixMove';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SixNode, SixRules } from '../SixRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { SixFilteredMoveGenerator } from '../SixFilteredMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/six/tests/SixHeuristic.spec.ts b/src/app/games/six/tests/SixHeuristic.spec.ts
index 1cf5d690f..bf3bade93 100644
--- a/src/app/games/six/tests/SixHeuristic.spec.ts
+++ b/src/app/games/six/tests/SixHeuristic.spec.ts
@@ -4,9 +4,9 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { SixState } from '../SixState';
 import { SixMove } from '../SixMove';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SixNode, SixRules } from '../SixRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { SixHeuristic } from '../SixHeuristic';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/six/tests/SixMinimax.spec.ts b/src/app/games/six/tests/SixMinimax.spec.ts
index 249b0f11e..7ee520b1c 100644
--- a/src/app/games/six/tests/SixMinimax.spec.ts
+++ b/src/app/games/six/tests/SixMinimax.spec.ts
@@ -3,8 +3,8 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { SixState } from '../SixState';
 import { SixMove } from '../SixMove';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SixLegalityInformation, SixNode, SixRules } from '../SixRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { AIDepthLimitOptions } from 'src/app/jscaip/AI/AI';
 import { SixMinimax } from '../SixMinimax';
diff --git a/src/app/games/six/tests/SixMove.spec.ts b/src/app/games/six/tests/SixMove.spec.ts
index de7d626e5..689adbbcf 100644
--- a/src/app/games/six/tests/SixMove.spec.ts
+++ b/src/app/games/six/tests/SixMove.spec.ts
@@ -1,8 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, TestUtils } from '@everyboard/lib';
 import { SixMove } from '../SixMove';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('SixMove', () => {

diff --git a/src/app/games/six/tests/SixMoveGenerator.spec.ts b/src/app/games/six/tests/SixMoveGenerator.spec.ts
index 2c0661785..fb1b7772d 100644
--- a/src/app/games/six/tests/SixMoveGenerator.spec.ts
+++ b/src/app/games/six/tests/SixMoveGenerator.spec.ts
@@ -2,8 +2,8 @@
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { SixState } from '../SixState';
 import { SixMove } from '../SixMove';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SixNode, SixRules } from '../SixRules';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { SixMoveGenerator } from '../SixMoveGenerator';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/six/tests/SixRules.spec.ts b/src/app/games/six/tests/SixRules.spec.ts
index c090982a0..ff086bb36 100644
--- a/src/app/games/six/tests/SixRules.spec.ts
+++ b/src/app/games/six/tests/SixRules.spec.ts
@@ -1,14 +1,14 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { SixState } from '../SixState';
 import { SixMove } from '../SixMove';
 import { SixFailure } from '../SixFailure';
 import { SixNode, SixRules } from '../SixRules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Vector } from 'src/app/jscaip/Vector';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';

diff --git a/src/app/games/six/tests/SixState.spec.ts b/src/app/games/six/tests/SixState.spec.ts
index 03f992eb5..956f50ce0 100644
--- a/src/app/games/six/tests/SixState.spec.ts
+++ b/src/app/games/six/tests/SixState.spec.ts
@@ -1,13 +1,11 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { ReversibleMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPSet, ReversibleMap, Utils } from '@everyboard/lib';
 import { SixState } from '../SixState';
+import { CoordSet } from 'src/app/jscaip/CoordSet';

 describe('SixState', () => {

@@ -80,10 +78,10 @@ describe('SixState', () => {
             const state: SixState = SixState.ofRepresentation(representation, 40);
             // When trying to switch an empty coord
             // Then it should throw and call logError
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             const errorMessage: string = 'Cannot switch piece if there is no piece!';
-            expect(() => state.switchPiece(new Coord(0, 0))).toThrowError('SixState: ' + errorMessage + ' (extra data: {"coord":"(0, 0)"})');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('SixState', errorMessage, { coord: '(0, 0)' });
+            expect(() => state.switchPiece(new Coord(0, 0))).toThrowError('Assertion failure: ' + errorMessage);
+            expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', errorMessage, { coord: '(0, 0)' });
         });

     });
diff --git a/src/app/games/six/tests/six.component.spec.ts b/src/app/games/six/tests/six.component.spec.ts
index 0bb7a50e9..1241f56be 100644
--- a/src/app/games/six/tests/six.component.spec.ts
+++ b/src/app/games/six/tests/six.component.spec.ts
@@ -5,7 +5,7 @@ import { SixMove } from 'src/app/games/six/SixMove';
 import { SixFailure } from 'src/app/games/six/SixFailure';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { SixComponent } from '../six.component';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
diff --git a/src/app/games/tafl/TaflEscapeThenPieceThenControlHeuristic.ts b/src/app/games/tafl/TaflEscapeThenPieceThenControlHeuristic.ts
index 8be416921..acfeabb86 100644
--- a/src/app/games/tafl/TaflEscapeThenPieceThenControlHeuristic.ts
+++ b/src/app/games/tafl/TaflEscapeThenPieceThenControlHeuristic.ts
@@ -4,7 +4,7 @@ import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { Player } from 'src/app/jscaip/Player';
 import { TaflPawn } from './TaflPawn';
 import { TaflState } from './TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflMove } from './TaflMove';
 import { TaflPieceAndControlHeuristic, TaflPieceAndControlHeuristicMetrics } from './TaflPieceAndControlHeuristic';
 import { TaflNode } from './TaflRules';
diff --git a/src/app/games/tafl/TaflMove.ts b/src/app/games/tafl/TaflMove.ts
index 6959367ed..df50fe783 100644
--- a/src/app/games/tafl/TaflMove.ts
+++ b/src/app/games/tafl/TaflMove.ts
@@ -2,9 +2,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { Direction } from 'src/app/jscaip/Direction';
 import { TaflFailure } from './TaflFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Utils } from 'src/app/utils/utils';
+import { MGPFallible, MGPValidation, Utils } from '@everyboard/lib';

 export abstract class TaflMove extends MoveCoordToCoord {

diff --git a/src/app/games/tafl/TaflMoveGenerator.ts b/src/app/games/tafl/TaflMoveGenerator.ts
index 367efca42..f3cbbe8f9 100644
--- a/src/app/games/tafl/TaflMoveGenerator.ts
+++ b/src/app/games/tafl/TaflMoveGenerator.ts
@@ -2,12 +2,11 @@ import { TaflNode, TaflRules } from './TaflRules';
 import { TaflState } from './TaflState';
 import { TaflMove } from './TaflMove';
 import { Player } from 'src/app/jscaip/Player';
-import { Debug } from 'src/app/utils/utils';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
+import { Debug } from 'src/app/utils/Debug';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { TaflConfig } from './TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 @Debug.log
 export class TaflMoveGenerator<M extends TaflMove> extends MoveGenerator<M, TaflState, TaflConfig> {
diff --git a/src/app/games/tafl/TaflPieceAndControlHeuristic.ts b/src/app/games/tafl/TaflPieceAndControlHeuristic.ts
index 3c4a8efb2..8326f3ec2 100644
--- a/src/app/games/tafl/TaflPieceAndControlHeuristic.ts
+++ b/src/app/games/tafl/TaflPieceAndControlHeuristic.ts
@@ -2,16 +2,14 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { TaflPawn } from './TaflPawn';
 import { TaflState } from './TaflState';
 import { SandwichThreat } from '../../jscaip/PieceThreat';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { TaflMove } from './TaflMove';
 import { TaflPieceAndInfluenceHeuristic } from './TaflPieceAndInfluenceHeuristic';
 import { TaflNode } from './TaflRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { TaflConfig } from './TaflConfig';

 export type TaflPieceAndControlHeuristicMetrics = {
diff --git a/src/app/games/tafl/TaflPieceAndInfluenceHeuristic.ts b/src/app/games/tafl/TaflPieceAndInfluenceHeuristic.ts
index 309f4172e..fb58c730c 100644
--- a/src/app/games/tafl/TaflPieceAndInfluenceHeuristic.ts
+++ b/src/app/games/tafl/TaflPieceAndInfluenceHeuristic.ts
@@ -2,19 +2,16 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { Orthogonal } from 'src/app/jscaip/Direction';
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPMap, MGPOptional, MGPSet, Utils } from '@everyboard/lib';
 import { SandwichThreat } from '../../jscaip/PieceThreat';
 import { TaflPawn } from './TaflPawn';
 import { TaflNode } from './TaflRules';
 import { TaflState } from './TaflState';
 import { TaflMove } from './TaflMove';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { TaflPieceHeuristic } from './TaflPieceHeuristic';
-import { Utils } from 'src/app/utils/utils';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { TaflConfig } from './TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export type PointValue = {
     width: number;
diff --git a/src/app/games/tafl/TaflPieceHeuristic.ts b/src/app/games/tafl/TaflPieceHeuristic.ts
index 5644e19c2..a20822651 100644
--- a/src/app/games/tafl/TaflPieceHeuristic.ts
+++ b/src/app/games/tafl/TaflPieceHeuristic.ts
@@ -5,7 +5,7 @@ import { Player } from 'src/app/jscaip/Player';
 import { PlayerMetricHeuristic } from 'src/app/jscaip/AI/Minimax';
 import { PlayerNumberTable } from 'src/app/jscaip/PlayerNumberTable';
 import { TaflConfig } from './TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class TaflPieceHeuristic<M extends TaflMove> extends PlayerMetricHeuristic<M, TaflState, TaflConfig> {

diff --git a/src/app/games/tafl/TaflRules.ts b/src/app/games/tafl/TaflRules.ts
index ad7e13eff..36bd9bdad 100644
--- a/src/app/games/tafl/TaflRules.ts
+++ b/src/app/games/tafl/TaflRules.ts
@@ -4,9 +4,7 @@ import { Coord } from '../../jscaip/Coord';
 import { TaflMove } from './TaflMove';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { TaflPawn } from './TaflPawn';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { Debug } from 'src/app/utils/utils';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { RelativePlayer } from 'src/app/jscaip/RelativePlayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { TaflFailure } from './TaflFailure';
@@ -14,7 +12,7 @@ import { TaflConfig } from './TaflConfig';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { TaflState } from './TaflState';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Debug } from 'src/app/utils/Debug';
 import { Localized } from 'src/app/utils/LocaleUtils';

 export class TaflNode<M extends TaflMove> extends GameNode<M, TaflState> {}
diff --git a/src/app/games/tafl/brandhub/BrandhubMove.ts b/src/app/games/tafl/brandhub/BrandhubMove.ts
index 1a95ad147..21cc6d347 100644
--- a/src/app/games/tafl/brandhub/BrandhubMove.ts
+++ b/src/app/games/tafl/brandhub/BrandhubMove.ts
@@ -1,9 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible, MGPValidation } from '@everyboard/lib';
 import { TaflMove } from '../TaflMove';
-import { MGPValidation } from 'src/app/utils/MGPValidation';

 export class BrandhubMove extends TaflMove {

diff --git a/src/app/games/tafl/brandhub/BrandhubRules.ts b/src/app/games/tafl/brandhub/BrandhubRules.ts
index 3b9b93212..fe19539b6 100644
--- a/src/app/games/tafl/brandhub/BrandhubRules.ts
+++ b/src/app/games/tafl/brandhub/BrandhubRules.ts
@@ -1,11 +1,11 @@
 import { TaflState } from '../TaflState';
 import { TaflNode, TaflRules } from '../TaflRules';
 import { BrandhubMove } from './BrandhubMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflConfig } from '../TaflConfig';
 import { BooleanConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { TaflPawn } from '../TaflPawn';
-import { Table } from 'src/app/utils/ArrayUtils';

 export class BrandhubNode extends TaflNode<BrandhubMove> {}

diff --git a/src/app/games/tafl/brandhub/BrandhubTutorial.ts b/src/app/games/tafl/brandhub/BrandhubTutorial.ts
index e142cd4ff..61f7daaca 100644
--- a/src/app/games/tafl/brandhub/BrandhubTutorial.ts
+++ b/src/app/games/tafl/brandhub/BrandhubTutorial.ts
@@ -5,7 +5,7 @@ import { Tutorial, TutorialStep } from '../../../components/wrapper-components/t
 import { BrandhubRules } from './BrandhubRules';
 import { TaflConfig } from '../TaflConfig';
 import { TaflState } from '../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const _: TaflPawn = TaflPawn.UNOCCUPIED;
diff --git a/src/app/games/tafl/brandhub/tests/BrandhubRules.spec.ts b/src/app/games/tafl/brandhub/tests/BrandhubRules.spec.ts
index 4da286be0..5396d5e54 100644
--- a/src/app/games/tafl/brandhub/tests/BrandhubRules.spec.ts
+++ b/src/app/games/tafl/brandhub/tests/BrandhubRules.spec.ts
@@ -2,13 +2,13 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { BrandhubNode, BrandhubRules } from '../BrandhubRules';
 import { TaflFailure } from '../../TaflFailure';
 import { BrandhubMove } from '../BrandhubMove';
 import { TaflPawn } from '../../TaflPawn';
 import { TaflConfig } from '../../TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflState } from '../../TaflState';

 describe('BrandhubRules', () => {
diff --git a/src/app/games/tafl/brandhub/tests/BrandhubState.spec.ts b/src/app/games/tafl/brandhub/tests/BrandhubState.spec.ts
index 99d68ffb5..064a4872a 100644
--- a/src/app/games/tafl/brandhub/tests/BrandhubState.spec.ts
+++ b/src/app/games/tafl/brandhub/tests/BrandhubState.spec.ts
@@ -2,7 +2,7 @@ import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { TaflConfig } from '../../TaflConfig';
 import { TaflState } from '../../TaflState';
 import { BrandhubRules } from '../BrandhubRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const defaultConfig: MGPOptional<TaflConfig> = BrandhubRules.get().getDefaultRulesConfig();

diff --git a/src/app/games/tafl/hnefatafl/HnefataflMove.ts b/src/app/games/tafl/hnefatafl/HnefataflMove.ts
index 680e3960b..023f066a1 100644
--- a/src/app/games/tafl/hnefatafl/HnefataflMove.ts
+++ b/src/app/games/tafl/hnefatafl/HnefataflMove.ts
@@ -1,9 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible, MGPValidation } from '@everyboard/lib';
 import { TaflMove } from '../TaflMove';
-import { MGPValidation } from 'src/app/utils/MGPValidation';

 export class HnefataflMove extends TaflMove {

diff --git a/src/app/games/tafl/hnefatafl/HnefataflRules.ts b/src/app/games/tafl/hnefatafl/HnefataflRules.ts
index 7554f1349..1b61b7417 100644
--- a/src/app/games/tafl/hnefatafl/HnefataflRules.ts
+++ b/src/app/games/tafl/hnefatafl/HnefataflRules.ts
@@ -1,11 +1,11 @@
 import { TaflState } from '../TaflState';
 import { TaflNode, TaflRules } from '../TaflRules';
 import { HnefataflMove } from './HnefataflMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflConfig } from '../TaflConfig';
 import { BooleanConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { TaflPawn } from '../TaflPawn';
-import { Table } from 'src/app/utils/ArrayUtils';

 export class HnefataflNode extends TaflNode<HnefataflMove> {}

diff --git a/src/app/games/tafl/hnefatafl/HnefataflTutorial.ts b/src/app/games/tafl/hnefatafl/HnefataflTutorial.ts
index 22fd45021..6462f3d5e 100644
--- a/src/app/games/tafl/hnefatafl/HnefataflTutorial.ts
+++ b/src/app/games/tafl/hnefatafl/HnefataflTutorial.ts
@@ -5,7 +5,7 @@ import { Tutorial, TutorialStep } from '../../../components/wrapper-components/t
 import { HnefataflRules } from './HnefataflRules';
 import { TaflConfig } from '../TaflConfig';
 import { TaflState } from '../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const _: TaflPawn = TaflPawn.UNOCCUPIED;
diff --git a/src/app/games/tafl/hnefatafl/tests/HnefataflRules.spec.ts b/src/app/games/tafl/hnefatafl/tests/HnefataflRules.spec.ts
index e83b64398..014ddb427 100644
--- a/src/app/games/tafl/hnefatafl/tests/HnefataflRules.spec.ts
+++ b/src/app/games/tafl/hnefatafl/tests/HnefataflRules.spec.ts
@@ -4,8 +4,8 @@ import { HnefataflMove } from '../HnefataflMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { TaflPawn } from '../../TaflPawn';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { TaflFailure } from '../../TaflFailure';
 import { TaflConfig } from '../../TaflConfig';
diff --git a/src/app/games/tafl/hnefatafl/tests/HnefataflState.spec.ts b/src/app/games/tafl/hnefatafl/tests/HnefataflState.spec.ts
index dca1b7ee5..b551f9310 100644
--- a/src/app/games/tafl/hnefatafl/tests/HnefataflState.spec.ts
+++ b/src/app/games/tafl/hnefatafl/tests/HnefataflState.spec.ts
@@ -2,7 +2,7 @@ import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { TaflConfig } from '../../TaflConfig';
 import { HnefataflRules } from '../HnefataflRules';
 import { TaflState } from '../../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const defaultConfig: MGPOptional<TaflConfig> = HnefataflRules.get().getDefaultRulesConfig();

diff --git a/src/app/games/tafl/tablut/TablutMove.ts b/src/app/games/tafl/tablut/TablutMove.ts
index d9aff49ed..efc2d39dd 100644
--- a/src/app/games/tafl/tablut/TablutMove.ts
+++ b/src/app/games/tafl/tablut/TablutMove.ts
@@ -1,9 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible, MGPValidation } from '@everyboard/lib';
 import { TaflMove } from '../TaflMove';
-import { MGPValidation } from 'src/app/utils/MGPValidation';

 export class TablutMove extends TaflMove {

diff --git a/src/app/games/tafl/tablut/TablutRules.ts b/src/app/games/tafl/tablut/TablutRules.ts
index f38911d6b..bd99bba7a 100644
--- a/src/app/games/tafl/tablut/TablutRules.ts
+++ b/src/app/games/tafl/tablut/TablutRules.ts
@@ -1,10 +1,10 @@
 import { TablutMove } from './TablutMove';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflNode, TaflRules } from '../TaflRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { TaflConfig } from '../TaflConfig';
 import { BooleanConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { TaflPawn } from '../TaflPawn';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflState } from '../TaflState';

 export class TablutNode extends TaflNode<TablutMove> {}
diff --git a/src/app/games/tafl/tablut/TablutTutorial.ts b/src/app/games/tafl/tablut/TablutTutorial.ts
index 03e45516b..0621b56f1 100644
--- a/src/app/games/tafl/tablut/TablutTutorial.ts
+++ b/src/app/games/tafl/tablut/TablutTutorial.ts
@@ -5,7 +5,7 @@ import { Tutorial, TutorialStep } from '../../../components/wrapper-components/t
 import { TablutRules } from './TablutRules';
 import { TaflConfig } from '../TaflConfig';
 import { TaflState } from '../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TutorialStepMessage } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStepMessage';

 const _: TaflPawn = TaflPawn.UNOCCUPIED;
diff --git a/src/app/games/tafl/tablut/tests/TablutRules.spec.ts b/src/app/games/tafl/tablut/tests/TablutRules.spec.ts
index fbd8d801b..7b2d002ef 100644
--- a/src/app/games/tafl/tablut/tests/TablutRules.spec.ts
+++ b/src/app/games/tafl/tablut/tests/TablutRules.spec.ts
@@ -4,8 +4,8 @@ import { TablutMove } from '../TablutMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { TaflPawn } from '../../TaflPawn';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { TaflFailure } from '../../TaflFailure';
 import { TaflConfig } from '../../TaflConfig';
diff --git a/src/app/games/tafl/tablut/tests/TablutState.spec.ts b/src/app/games/tafl/tablut/tests/TablutState.spec.ts
index 69966b396..e3e242b54 100644
--- a/src/app/games/tafl/tablut/tests/TablutState.spec.ts
+++ b/src/app/games/tafl/tablut/tests/TablutState.spec.ts
@@ -2,7 +2,7 @@ import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { TaflConfig } from '../../TaflConfig';
 import { TablutRules } from '../TablutRules';
 import { TaflState } from '../../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 describe('TaflState', () => {

diff --git a/src/app/games/tafl/tablut/tests/tablut.component.spec.ts b/src/app/games/tafl/tablut/tests/tablut.component.spec.ts
index 1a56e09ce..6ae76c8e4 100644
--- a/src/app/games/tafl/tablut/tests/tablut.component.spec.ts
+++ b/src/app/games/tafl/tablut/tests/tablut.component.spec.ts
@@ -7,7 +7,7 @@ import { DoTaflTests, TaflTestEntries } from '../../tests/GenericTaflTest.spec';
 import { TablutComponent } from '../tablut.component';
 import { TaflConfig } from '../../TaflConfig';
 import { TaflState } from '../../TaflState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: TaflPawn = TaflPawn.UNOCCUPIED;
 const x: TaflPawn = TaflPawn.PLAYER_ZERO_PAWN;
diff --git a/src/app/games/tafl/tafl.component.ts b/src/app/games/tafl/tafl.component.ts
index 61bd8a5d3..558479bba 100644
--- a/src/app/games/tafl/tafl.component.ts
+++ b/src/app/games/tafl/tafl.component.ts
@@ -5,9 +5,7 @@ import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { RelativePlayer } from 'src/app/jscaip/RelativePlayer';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { TaflMove } from './TaflMove';
 import { TaflPawn } from './TaflPawn';
 import { TaflRules } from './TaflRules';
diff --git a/src/app/games/tafl/tests/GenericTaflTest.spec.ts b/src/app/games/tafl/tests/GenericTaflTest.spec.ts
index d6d9bfec0..98e033f5f 100644
--- a/src/app/games/tafl/tests/GenericTaflTest.spec.ts
+++ b/src/app/games/tafl/tests/GenericTaflTest.spec.ts
@@ -3,8 +3,7 @@ import { Type } from '@angular/core';
 import { fakeAsync } from '@angular/core/testing';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Encoder } from 'src/app/utils/Encoder';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { Encoder, EncoderTestUtils, MGPFallible, MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { TaflComponent } from '../tafl.component';
 import { TaflFailure } from '../TaflFailure';
@@ -14,8 +13,6 @@ import { TaflRules } from '../TaflRules';
 import { TaflState } from '../TaflState';
 import { RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
 import { TaflConfig } from '../TaflConfig';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class TaflTestEntries<C extends TaflComponent<R, M>,
                              R extends TaflRules<M>,
diff --git a/src/app/games/tafl/tests/MyTaflMove.spec.ts b/src/app/games/tafl/tests/MyTaflMove.spec.ts
index 9ea23e3a8..cb1f103bd 100644
--- a/src/app/games/tafl/tests/MyTaflMove.spec.ts
+++ b/src/app/games/tafl/tests/MyTaflMove.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { TaflMove } from '../TaflMove';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { MGPFallible } from '@everyboard/lib';

 export class MyTaflMove extends TaflMove {

diff --git a/src/app/games/tafl/tests/MyTaflRules.spec.ts b/src/app/games/tafl/tests/MyTaflRules.spec.ts
index 88fc37821..86fe5286d 100644
--- a/src/app/games/tafl/tests/MyTaflRules.spec.ts
+++ b/src/app/games/tafl/tests/MyTaflRules.spec.ts
@@ -1,10 +1,10 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflNode, TaflRules } from '../TaflRules';
 import { MyTaflMove } from './MyTaflMove.spec';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflConfig } from '../TaflConfig';
 import { BooleanConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { TaflPawn } from '../TaflPawn';
 import { TaflState } from '../TaflState';

diff --git a/src/app/games/tafl/tests/TaflEscapeThenPieceThenControlHeuristic.spec.ts b/src/app/games/tafl/tests/TaflEscapeThenPieceThenControlHeuristic.spec.ts
index 79f261717..1c97b7b2c 100644
--- a/src/app/games/tafl/tests/TaflEscapeThenPieceThenControlHeuristic.spec.ts
+++ b/src/app/games/tafl/tests/TaflEscapeThenPieceThenControlHeuristic.spec.ts
@@ -1,9 +1,9 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflPawn } from '../TaflPawn';
 import { BrandhubRules } from '../brandhub/BrandhubRules';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { Player } from 'src/app/jscaip/Player';
 import { BrandhubMove } from '../brandhub/BrandhubMove';
 import { TaflEscapeThenPieceThenControlHeuristic } from '../TaflEscapeThenPieceThenControlHeuristic';
diff --git a/src/app/games/tafl/tests/TaflMove.spec.ts b/src/app/games/tafl/tests/TaflMove.spec.ts
index 9fb82c384..4c8889742 100644
--- a/src/app/games/tafl/tests/TaflMove.spec.ts
+++ b/src/app/games/tafl/tests/TaflMove.spec.ts
@@ -4,9 +4,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { MyTaflMove } from './MyTaflMove.spec';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { TaflFailure } from '../TaflFailure';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPValidationTestUtils } from 'src/app/utils/tests/MGPValidation.spec';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { MGPValidation, MGPValidationTestUtils, TestUtils } from '@everyboard/lib';

 describe('TaflMove', () => {

diff --git a/src/app/games/tafl/tests/TaflMoveGenerator.spec.ts b/src/app/games/tafl/tests/TaflMoveGenerator.spec.ts
index 87a75e2a3..5e4206bdf 100644
--- a/src/app/games/tafl/tests/TaflMoveGenerator.spec.ts
+++ b/src/app/games/tafl/tests/TaflMoveGenerator.spec.ts
@@ -1,12 +1,12 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { TaflPawn } from '../TaflPawn';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { BrandhubMove } from '../brandhub/BrandhubMove';
 import { BrandhubNode, BrandhubRules } from '../brandhub/BrandhubRules';
 import { TaflMoveGenerator } from '../TaflMoveGenerator';
 import { TaflConfig } from '../TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflState } from '../TaflState';

 describe('TaflMoveGenerator', () => {
diff --git a/src/app/games/tafl/tests/TaflPieceAndControlHeuristic.spec.ts b/src/app/games/tafl/tests/TaflPieceAndControlHeuristic.spec.ts
index ac1430930..20835791b 100644
--- a/src/app/games/tafl/tests/TaflPieceAndControlHeuristic.spec.ts
+++ b/src/app/games/tafl/tests/TaflPieceAndControlHeuristic.spec.ts
@@ -1,8 +1,8 @@
 /* eslint-disable max-lines-per-function */
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflPawn } from '../TaflPawn';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { TaflPieceAndControlHeuristic } from '../TaflPieceAndControlHeuristic';
 import { TaflState } from '../TaflState';
diff --git a/src/app/games/tafl/tests/TaflPieceAndInfluenceHeuristic.spec.ts b/src/app/games/tafl/tests/TaflPieceAndInfluenceHeuristic.spec.ts
index b4a512a0f..89f848bd6 100644
--- a/src/app/games/tafl/tests/TaflPieceAndInfluenceHeuristic.spec.ts
+++ b/src/app/games/tafl/tests/TaflPieceAndInfluenceHeuristic.spec.ts
@@ -1,21 +1,19 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
-import { MGPSet } from 'src/app/utils/MGPSet';
-import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPMap, MGPOptional, MGPSet } from '@everyboard/lib';
 import { TaflPawn } from '../TaflPawn';
 import { SandwichThreat } from '../../../jscaip/PieceThreat';
 import { TablutNode, TablutRules } from '../tablut/TablutRules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { CoordSet } from 'src/app/utils/OptimizedSet';
 import { TaflPieceAndInfluenceHeuristic } from '../TaflPieceAndInfluenceHeuristic';
 import { TaflConfig } from '../TaflConfig';
 import { TaflState } from '../TaflState';
+import { CoordSet } from 'src/app/jscaip/CoordSet';
 import { TaflMove } from '../TaflMove';
 import { BrandhubRules } from '../brandhub/BrandhubRules';
 import { HnefataflRules } from '../hnefatafl/HnefataflRules';
+import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';

 describe('TafPieceAndInfluenceHeuristic', () => {

diff --git a/src/app/games/tafl/tests/TaflPieceAndInfluenceMinimax.spec.ts b/src/app/games/tafl/tests/TaflPieceAndInfluenceMinimax.spec.ts
index 06c9fa68f..c88372459 100644
--- a/src/app/games/tafl/tests/TaflPieceAndInfluenceMinimax.spec.ts
+++ b/src/app/games/tafl/tests/TaflPieceAndInfluenceMinimax.spec.ts
@@ -1,13 +1,13 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TaflPawn } from '../TaflPawn';
 import { TablutNode, TablutRules } from '../tablut/TablutRules';
 import { TablutMove } from '../tablut/TablutMove';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { TaflPieceAndInfluenceMinimax } from '../TaflPieceAndInfluenceMinimax';
 import { TaflConfig } from '../TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflState } from '../TaflState';

 describe('TaflPieceAndInfluenceMinimax', () => {
diff --git a/src/app/games/tafl/tests/TaflPieceMinimax.spec.ts b/src/app/games/tafl/tests/TaflPieceMinimax.spec.ts
index 3cb6dc3e4..fdd9f18f9 100644
--- a/src/app/games/tafl/tests/TaflPieceMinimax.spec.ts
+++ b/src/app/games/tafl/tests/TaflPieceMinimax.spec.ts
@@ -2,12 +2,12 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { TaflPawn } from '../TaflPawn';
 import { TablutNode, TablutRules } from '../tablut/TablutRules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TablutMove } from '../tablut/TablutMove';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { TaflPieceMinimax } from '../TaflPieceMinimax';
 import { TaflConfig } from '../TaflConfig';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflState } from '../TaflState';

 describe('TaflPieceMinimax', () => {
diff --git a/src/app/games/tafl/tests/TaflRules.spec.ts b/src/app/games/tafl/tests/TaflRules.spec.ts
index a0c5780f5..a35934af4 100644
--- a/src/app/games/tafl/tests/TaflRules.spec.ts
+++ b/src/app/games/tafl/tests/TaflRules.spec.ts
@@ -4,8 +4,8 @@ import { Orthogonal } from 'src/app/jscaip/Direction';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { Table } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Table } from 'src/app/jscaip/TableUtils';
+import { MGPOptional } from '@everyboard/lib';
 import { TaflFailure } from '../TaflFailure';
 import { TaflPawn } from '../TaflPawn';
 import { TaflState } from '../TaflState';
diff --git a/src/app/games/teeko/TeekoHeuristic.ts b/src/app/games/teeko/TeekoHeuristic.ts
index db3fe8564..4d0c6a6a0 100644
--- a/src/app/games/teeko/TeekoHeuristic.ts
+++ b/src/app/games/teeko/TeekoHeuristic.ts
@@ -1,7 +1,7 @@
 import { BoardValue } from 'src/app/jscaip/AI/BoardValue';
 import { TeekoConfig, TeekoNode, TeekoRules } from './TeekoRules';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Heuristic } from 'src/app/jscaip/AI/Minimax';
 import { TeekoMove } from './TeekoMove';
 import { TeekoState } from './TeekoState';
diff --git a/src/app/games/teeko/TeekoMove.ts b/src/app/games/teeko/TeekoMove.ts
index a809901eb..28f666486 100644
--- a/src/app/games/teeko/TeekoMove.ts
+++ b/src/app/games/teeko/TeekoMove.ts
@@ -2,8 +2,7 @@ import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
 import { MoveCoord } from 'src/app/jscaip/MoveCoord';
 import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible } from '@everyboard/lib';
 import { TeekoState } from './TeekoState';

 export type TeekoMove = TeekoDropMove | TeekoTranslationMove;
diff --git a/src/app/games/teeko/TeekoMoveGenerator.ts b/src/app/games/teeko/TeekoMoveGenerator.ts
index 7de0a27de..6e944b92b 100644
--- a/src/app/games/teeko/TeekoMoveGenerator.ts
+++ b/src/app/games/teeko/TeekoMoveGenerator.ts
@@ -5,7 +5,7 @@ import { Coord } from 'src/app/jscaip/Coord';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { MoveGenerator } from 'src/app/jscaip/AI/AI';
 import { Direction } from 'src/app/jscaip/Direction';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class TeekoMoveGenerator extends MoveGenerator<TeekoMove, TeekoState, TeekoConfig> {

diff --git a/src/app/games/teeko/TeekoRules.ts b/src/app/games/teeko/TeekoRules.ts
index 16d22aaf9..976237705 100644
--- a/src/app/games/teeko/TeekoRules.ts
+++ b/src/app/games/teeko/TeekoRules.ts
@@ -2,15 +2,13 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { ConfigurableRules } from 'src/app/jscaip/Rules';
 import { TeekoDropMove, TeekoMove, TeekoTranslationMove } from './TeekoMove';
 import { TeekoState } from './TeekoState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { NInARowHelper } from 'src/app/jscaip/NInARowHelper';
-import { Utils } from 'src/app/utils/utils';
+import { ArrayUtils, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Table, TableUtils, ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { BooleanConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/teeko/teeko.component.ts b/src/app/games/teeko/teeko.component.ts
index 2eaa9cc0d..b5ca20f85 100644
--- a/src/app/games/teeko/teeko.component.ts
+++ b/src/app/games/teeko/teeko.component.ts
@@ -5,9 +5,8 @@ import { Component } from '@angular/core';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
 import { RectangularGameComponent } from 'src/app/components/game-components/rectangular-game-component/RectangularGameComponent';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
diff --git a/src/app/games/teeko/tests/TeekoHeuristic.spec.ts b/src/app/games/teeko/tests/TeekoHeuristic.spec.ts
index 4fa273ebb..59e03a610 100644
--- a/src/app/games/teeko/tests/TeekoHeuristic.spec.ts
+++ b/src/app/games/teeko/tests/TeekoHeuristic.spec.ts
@@ -2,9 +2,9 @@
 import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { TeekoConfig, TeekoNode, TeekoRules } from '../TeekoRules';
 import { TeekoState } from '../TeekoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TeekoHeuristic } from '../TeekoHeuristic';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/teeko/tests/TeekoMove.spec.ts b/src/app/games/teeko/tests/TeekoMove.spec.ts
index 8c2600d2d..62f793eed 100644
--- a/src/app/games/teeko/tests/TeekoMove.spec.ts
+++ b/src/app/games/teeko/tests/TeekoMove.spec.ts
@@ -1,8 +1,7 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { TeekoDropMove, TeekoMove, TeekoTranslationMove } from '../TeekoMove';
 import { Coord, CoordFailure } from 'src/app/jscaip/Coord';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';

 describe('TeekoMove', () => {
diff --git a/src/app/games/teeko/tests/TeekoMoveGenerator.spec.ts b/src/app/games/teeko/tests/TeekoMoveGenerator.spec.ts
index 685e446ea..445006b48 100644
--- a/src/app/games/teeko/tests/TeekoMoveGenerator.spec.ts
+++ b/src/app/games/teeko/tests/TeekoMoveGenerator.spec.ts
@@ -3,9 +3,9 @@ import { PlayerOrNone } from 'src/app/jscaip/Player';
 import { TeekoMove } from '../TeekoMove';
 import { TeekoConfig, TeekoNode, TeekoRules } from '../TeekoRules';
 import { TeekoState } from '../TeekoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TeekoMoveGenerator } from '../TeekoMoveGenerator';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 const _: PlayerOrNone = PlayerOrNone.NONE;
 const O: PlayerOrNone = PlayerOrNone.ZERO;
diff --git a/src/app/games/teeko/tests/TeekoRules.spec.ts b/src/app/games/teeko/tests/TeekoRules.spec.ts
index 1c3533b61..9448e09f8 100644
--- a/src/app/games/teeko/tests/TeekoRules.spec.ts
+++ b/src/app/games/teeko/tests/TeekoRules.spec.ts
@@ -5,10 +5,9 @@ import { TeekoState } from '../TeekoState';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { MGPOptional, TestUtils } from '@everyboard/lib';

 describe('TeekoRules', () => {

diff --git a/src/app/games/teeko/tests/teeko.component.spec.ts b/src/app/games/teeko/tests/teeko.component.spec.ts
index 962cb2941..2f528265e 100644
--- a/src/app/games/teeko/tests/teeko.component.spec.ts
+++ b/src/app/games/teeko/tests/teeko.component.spec.ts
@@ -3,7 +3,7 @@ import { fakeAsync } from '@angular/core/testing';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { TeekoComponent } from '../teeko.component';
 import { PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { TeekoState } from '../TeekoState';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
 import { TeekoDropMove, TeekoMove, TeekoTranslationMove } from '../TeekoMove';
diff --git a/src/app/games/trexo/TrexoMove.ts b/src/app/games/trexo/TrexoMove.ts
index e26737848..3f15cb9e2 100644
--- a/src/app/games/trexo/TrexoMove.ts
+++ b/src/app/games/trexo/TrexoMove.ts
@@ -1,10 +1,8 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { MoveWithTwoCoords } from 'src/app/jscaip/MoveWithTwoCoords';
-import { Encoder } from 'src/app/utils/Encoder';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
+import { Encoder, MGPFallible, Utils } from '@everyboard/lib';
 import { TrexoFailure } from './TrexoFailure';
 import { TrexoState } from './TrexoState';
-import { Utils } from 'src/app/utils/utils';

 /**
  * It's not really a move coord to coord but rather a "drop two coords" (that are neighbor)
diff --git a/src/app/games/trexo/TrexoRules.ts b/src/app/games/trexo/TrexoRules.ts
index 8d0ed7f9a..98bc8a3bf 100644
--- a/src/app/games/trexo/TrexoRules.ts
+++ b/src/app/games/trexo/TrexoRules.ts
@@ -5,13 +5,12 @@ import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { NInARowHelper } from 'src/app/jscaip/NInARowHelper';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from '../../utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { TrexoFailure } from './TrexoFailure';
 import { TrexoMove } from './TrexoMove';
 import { TrexoPieceStack, TrexoState } from './TrexoState';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
-import { TableUtils } from 'src/app/utils/ArrayUtils';

 export class TrexoNode extends GameNode<TrexoMove, TrexoState> {}

diff --git a/src/app/games/trexo/TrexoState.ts b/src/app/games/trexo/TrexoState.ts
index 0728d9c01..0d220197d 100644
--- a/src/app/games/trexo/TrexoState.ts
+++ b/src/app/games/trexo/TrexoState.ts
@@ -1,7 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { GameStateWithTable } from 'src/app/jscaip/GameStateWithTable';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';

 /**
  * Represent half a tile
diff --git a/src/app/games/trexo/TrexoTutorial.ts b/src/app/games/trexo/TrexoTutorial.ts
index 2554179f6..a1f094e85 100644
--- a/src/app/games/trexo/TrexoTutorial.ts
+++ b/src/app/games/trexo/TrexoTutorial.ts
@@ -1,6 +1,6 @@
 import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tutorial-game-wrapper/TutorialStep';
 import { Coord } from 'src/app/jscaip/Coord';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { TrexoMove } from './TrexoMove';
 import { TrexoRules } from './TrexoRules';
 import { TrexoPiece, TrexoPieceStack, TrexoState } from './TrexoState';
diff --git a/src/app/games/trexo/tests/TrexoAlignmentHeuristic.spec.ts b/src/app/games/trexo/tests/TrexoAlignmentHeuristic.spec.ts
index d85d4cd65..91a22b334 100644
--- a/src/app/games/trexo/tests/TrexoAlignmentHeuristic.spec.ts
+++ b/src/app/games/trexo/tests/TrexoAlignmentHeuristic.spec.ts
@@ -1,6 +1,6 @@
 import { Player } from 'src/app/jscaip/Player';
 import { TrexoPiece, TrexoPieceStack, TrexoState } from '../TrexoState';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { HeuristicUtils } from 'src/app/jscaip/AI/tests/HeuristicUtils.spec';
 import { TrexoAlignmentHeuristic } from '../TrexoAlignmentHeuristic';
 import { TrexoRules } from '../TrexoRules';
diff --git a/src/app/games/trexo/tests/TrexoMove.spec.ts b/src/app/games/trexo/tests/TrexoMove.spec.ts
index 11a669c97..c4eb349d8 100644
--- a/src/app/games/trexo/tests/TrexoMove.spec.ts
+++ b/src/app/games/trexo/tests/TrexoMove.spec.ts
@@ -1,9 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPFallible, Utils } from '@everyboard/lib';
 import { TrexoFailure } from '../TrexoFailure';
 import { TrexoMove } from '../TrexoMove';
 import { TrexoMoveGenerator } from '../TrexoMoveGenerator';
@@ -14,9 +12,9 @@ describe('TrexoMove', () => {

     const defaultConfig: NoConfig = TrexoRules.get().getDefaultRulesConfig();

-    it('should refuse to create out of board move (player.zero piece)', () => {
+    it('should refuse to create out of board move (Player.ZERO piece)', () => {
         const error: string = '(-1, 0) is out of the TrexoBoard!';
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         // Given two coords of piece, with the zero coord being out of range
         const zero: Coord = new Coord(-1, 0);
         const one: Coord = new Coord(0, 0);
@@ -24,12 +22,12 @@ describe('TrexoMove', () => {
         // When trying to create a move with it
         // Then it should fail
         expect(() => TrexoMove.from(zero, one)).toThrowError('Assertion failure: ' + error);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+        expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
     });

-    it('should refuse to create out of board move (player.one piece)', () => {
+    it('should refuse to create out of board move (Player.ONE piece)', () => {
         const error: string = '(-1, 0) is out of the TrexoBoard!';
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         // Given two coords of piece, with the one coord being out of range
         const zero: Coord = new Coord(0, 0);
         const one: Coord = new Coord(-1, 0);
@@ -37,7 +35,7 @@ describe('TrexoMove', () => {
         // When trying to create a move with it
         // Then it should fail
         expect(() => TrexoMove.from(zero, one)).toThrowError('Assertion failure: ' + error);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+        expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
     });

     it('should refuse to create move with two coord not neighbors', () => {
diff --git a/src/app/games/trexo/tests/TrexoRules.spec.ts b/src/app/games/trexo/tests/TrexoRules.spec.ts
index a01a66a53..536b45833 100644
--- a/src/app/games/trexo/tests/TrexoRules.spec.ts
+++ b/src/app/games/trexo/tests/TrexoRules.spec.ts
@@ -2,7 +2,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
+import { ArrayUtils } from '@everyboard/lib';
 import { TrexoFailure } from '../TrexoFailure';
 import { TrexoMove } from '../TrexoMove';
 import { TrexoNode, TrexoRules } from '../TrexoRules';
diff --git a/src/app/games/trexo/tests/TrexoState.spec.ts b/src/app/games/trexo/tests/TrexoState.spec.ts
index e920bf167..3bd24cef3 100644
--- a/src/app/games/trexo/tests/TrexoState.spec.ts
+++ b/src/app/games/trexo/tests/TrexoState.spec.ts
@@ -1,9 +1,9 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
+import { Utils } from '@everyboard/lib';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { TableUtils } from 'src/app/utils/ArrayUtils';
+import { TableUtils } from 'src/app/jscaip/TableUtils';
 import { TrexoPiece, TrexoPieceStack, TrexoState } from '../TrexoState';
 import { TrexoRules } from '../TrexoRules';

@@ -11,26 +11,26 @@ describe('TrexoState', () => {

     it('should refuse creating a board of which width is not 10', () => {
         const error: string = 'Invalid board dimensions';
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         // Given a 11x10 board
         const board: TrexoPieceStack[][] = TableUtils.create(11, 10, TrexoPieceStack.EMPTY);

         // When passing it as an argument
         // Then it should fail
         expect(() => TrexoState.of(board, 0)).toThrowError('Assertion failure: ' + error);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+        expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
     });

     it('should refuse creating a board of which height is not 10', () => {
         const error: string = 'Invalid board dimensions';
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         // Given a 10x11 board
         const board: TrexoPieceStack[][] = TableUtils.create(10, 11, TrexoPieceStack.EMPTY);

         // When passing it as an argument
         // Then it should fail
         expect(() => TrexoState.of(board, 0)).toThrowError('Assertion failure: ' + error);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('Assertion failure', error);
+        expect(Utils.logError).toHaveBeenCalledOnceWith('Assertion failure', error, undefined);
     });

     it('should drop piece at the lowest level possible', () => {
diff --git a/src/app/games/trexo/trexo-half-piece.component.ts b/src/app/games/trexo/trexo-half-piece.component.ts
index 56b4ab633..84f5b84aa 100644
--- a/src/app/games/trexo/trexo-half-piece.component.ts
+++ b/src/app/games/trexo/trexo-half-piece.component.ts
@@ -2,7 +2,7 @@ import { Component, Input } from '@angular/core';
 import { Coord } from 'src/app/jscaip/Coord';
 import { Coord3D } from 'src/app/jscaip/Coord3D';
 import { Vector } from 'src/app/jscaip/Vector';
-import { assert } from 'src/app/utils/assert';
+import { Utils } from '@everyboard/lib';
 import { TrexoComponent } from './trexo.component';
 import { TrexoMove } from './TrexoMove';
 import { ModeConfig } from 'src/app/components/game-components/parallelogram-game-component/ParallelogramGameComponent';
@@ -190,7 +190,7 @@ export class TrexoHalfPieceComponent {
     public getOtherCoord(): Coord {
         // If the coord is part of a move there is another coord toward which the shape is oriented
         // It is this coord that we return
-        assert(this.move != null, 'Move should be set before calling getOtherCoord');
+        Utils.assert(this.move != null, 'Move should be set before calling getOtherCoord');
         const move: TrexoMove = this.move as TrexoMove;
         if (move.getZero().equals(this.coord)) {
             return move.getOne();
diff --git a/src/app/games/trexo/trexo.component.ts b/src/app/games/trexo/trexo.component.ts
index 7d6d75413..4fdc5663c 100644
--- a/src/app/games/trexo/trexo.component.ts
+++ b/src/app/games/trexo/trexo.component.ts
@@ -5,10 +5,9 @@ import { ModeConfig, ParallelogramGameComponent } from 'src/app/components/game-
 import { TrexoMove } from 'src/app/games/trexo/TrexoMove';
 import { Coord } from 'src/app/jscaip/Coord';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { Table3DUtils, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table3DUtils, TableUtils } from 'src/app/jscaip/TableUtils';
 import { Coord3D } from 'src/app/jscaip/Coord3D';
 import { TrexoFailure } from './TrexoFailure';
 import { Direction } from 'src/app/jscaip/Direction';
diff --git a/src/app/games/yinsh/YinshMove.ts b/src/app/games/yinsh/YinshMove.ts
index 3fb7ccdce..a2c9efd49 100644
--- a/src/app/games/yinsh/YinshMove.ts
+++ b/src/app/games/yinsh/YinshMove.ts
@@ -1,9 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from 'src/app/utils/Encoder';
+import { ArrayUtils, Encoder, MGPOptional } from '@everyboard/lib';
 import { HexaDirection } from 'src/app/jscaip/HexaDirection';
 import { Move } from 'src/app/jscaip/Move';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GipfCapture } from 'src/app/jscaip/GipfProjectHelper';

 // A capture at Yinsh is just like a capture at Gipf, with the only difference
diff --git a/src/app/games/yinsh/YinshMoveGenerator.ts b/src/app/games/yinsh/YinshMoveGenerator.ts
index 2d2e5cc4f..a0735bda6 100644
--- a/src/app/games/yinsh/YinshMoveGenerator.ts
+++ b/src/app/games/yinsh/YinshMoveGenerator.ts
@@ -1,6 +1,5 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Combinatorics } from 'src/app/utils/Combinatorics';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Combinatorics, MGPOptional } from '@everyboard/lib';
 import { YinshState } from './YinshState';
 import { YinshCapture, YinshMove } from './YinshMove';
 import { YinshPiece } from './YinshPiece';
@@ -73,7 +72,7 @@ export class YinshMoveGenerator extends MoveGenerator<YinshMove, YinshState> {
         const player: Player = state.getCurrentPlayer();
         const coords: Coord[] = [];
         state.forEachCoord((coord: Coord, content: YinshPiece): void => {
-            if (content === YinshPiece.RINGS.get(player)) {
+            if (content === YinshPiece.RINGS.get(player).get()) {
                 coords.push(coord);
             }
         });
diff --git a/src/app/games/yinsh/YinshPiece.ts b/src/app/games/yinsh/YinshPiece.ts
index 12ddc64ed..f3e80ee5f 100644
--- a/src/app/games/yinsh/YinshPiece.ts
+++ b/src/app/games/yinsh/YinshPiece.ts
@@ -1,8 +1,5 @@
-import { Encoder } from 'src/app/utils/Encoder';
+import { ComparableObject, Encoder, Utils } from '@everyboard/lib';
 import { Player, PlayerOrNone } from 'src/app/jscaip/Player';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
 import { PlayerMap } from 'src/app/jscaip/PlayerMap';

 export class YinshPiece implements ComparableObject {
@@ -18,11 +15,11 @@ export class YinshPiece implements ComparableObject {

     public static MARKER_ZERO: YinshPiece = new YinshPiece(Player.ZERO, false);
     public static MARKER_ONE: YinshPiece = new YinshPiece(Player.ONE, false);
-    public static MARKERS: PlayerMap<YinshPiece> = PlayerMap.ofValues(YinshPiece.MARKER_ZERO, YinshPiece.MARKER_ONE);
+    public static MARKERS: PlayerMap<YinshPiece> = PlayerMap.of(YinshPiece.MARKER_ZERO, YinshPiece.MARKER_ONE);

     public static RING_ZERO: YinshPiece = new YinshPiece(Player.ZERO, true);
     public static RING_ONE: YinshPiece = new YinshPiece(Player.ONE, true);
-    public static RINGS: PlayerMap<YinshPiece> = PlayerMap.ofValues(YinshPiece.RING_ZERO, YinshPiece.RING_ONE);
+    public static RINGS: PlayerMap<YinshPiece> = PlayerMap.of(YinshPiece.RING_ZERO, YinshPiece.RING_ONE);

     public static of(playerOrNone: PlayerOrNone, isRing: boolean): YinshPiece {
         if (playerOrNone === PlayerOrNone.NONE) {
@@ -30,9 +27,9 @@ export class YinshPiece implements ComparableObject {
         } else {
             const player: Player = playerOrNone as Player;
             if (isRing) {
-                return YinshPiece.RINGS.get(player);
+                return YinshPiece.RINGS.get(player).get();
             } else {
-                return YinshPiece.MARKERS.get(player);
+                return YinshPiece.MARKERS.get(player).get();
             }
         }
     }
@@ -44,8 +41,8 @@ export class YinshPiece implements ComparableObject {
     }

     public flip(): YinshPiece {
-        assert(this.isRing === false, 'cannot flip a ring (it should never happen)');
-        assert(this.player.isPlayer(), 'cannot flip a non-player piece');
+        Utils.assert(this.isRing === false, 'cannot flip a ring (it should never happen)');
+        Utils.assert(this.player.isPlayer(), 'cannot flip a non-player piece');
         const player: Player = this.player as Player;
         return YinshPiece.of(player.getOpponent(), this.isRing);
     }
diff --git a/src/app/games/yinsh/YinshRules.ts b/src/app/games/yinsh/YinshRules.ts
index e6ac46b9e..7374faa81 100644
--- a/src/app/games/yinsh/YinshRules.ts
+++ b/src/app/games/yinsh/YinshRules.ts
@@ -4,18 +4,16 @@ import { HexaLine } from 'src/app/jscaip/HexaLine';
 import { Player } from 'src/app/jscaip/Player';
 import { Rules } from 'src/app/jscaip/Rules';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { YinshFailure } from './YinshFailure';
 import { YinshState } from './YinshState';
 import { YinshCapture, YinshMove } from './YinshMove';
 import { YinshPiece } from './YinshPiece';
-import { Table } from 'src/app/utils/ArrayUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
+import { Table } from 'src/app/jscaip/TableUtils';

 export type YinshLegalityInformation = YinshState;

@@ -89,7 +87,7 @@ export class YinshRules extends Rules<YinshMove, YinshState, YinshLegalityInform

     public ringSelectionValidity(state: YinshState, coord: Coord): MGPValidation {
         const player: Player = state.getCurrentPlayer();
-        if (state.getPieceAt(coord) === YinshPiece.RINGS.get(player)) {
+        if (state.getPieceAt(coord) === YinshPiece.RINGS.get(player).get()) {
             return MGPValidation.SUCCESS;
         } else {
             return MGPValidation.failure(YinshFailure.CAPTURE_SHOULD_TAKE_RING());
@@ -100,8 +98,8 @@ export class YinshRules extends Rules<YinshMove, YinshState, YinshLegalityInform
         const player: Player = state.getCurrentPlayer();
         // Move ring from start (only the marker remains) to
         // end (only the ring can be there, as it must land on an empty space)
-        let newState: YinshState = state.setAt(start, YinshPiece.MARKERS.get(player));
-        newState = newState.setAt(end, YinshPiece.RINGS.get(player));
+        let newState: YinshState = state.setAt(start, YinshPiece.MARKERS.get(player).get());
+        newState = newState.setAt(end, YinshPiece.RINGS.get(player).get());
         // Flip all pieces between start and end (both not included)
         // Direction is valid because this function is called with a valid move
         const dir: HexaDirection = HexaDirection.factory.fromMove(start, end).get();
@@ -168,7 +166,7 @@ export class YinshRules extends Rules<YinshMove, YinshState, YinshLegalityInform
     public moveStartValidity(state: YinshState, start: Coord): MGPValidation {
         const player: Player = state.getCurrentPlayer();
         // Start coord has to contain a ring of the current player
-        if (state.getPieceAt(start) === YinshPiece.RINGS.get(player)) {
+        if (state.getPieceAt(start) === YinshPiece.RINGS.get(player).get()) {
             return MGPValidation.SUCCESS;
         } else {
             return MGPValidation.failure(YinshFailure.SHOULD_SELECT_PLAYER_RING());
@@ -228,12 +226,12 @@ export class YinshRules extends Rules<YinshMove, YinshState, YinshLegalityInform
         // There should be exactly 5 consecutive spaces, on the same line (invariants of YinshCapture)
         for (const coord of capture.capturedSpaces) {
             // The captured spaces must contain markers of the current player
-            if (state.getPieceAt(coord) !== YinshPiece.MARKERS.get(player)) {
+            if (state.getPieceAt(coord) !== YinshPiece.MARKERS.get(player).get()) {
                 return MGPValidation.failure(YinshFailure.CAN_ONLY_CAPTURE_YOUR_MARKERS());
             }
         }
         // The ring taken should be a ring
-        if (state.getPieceAt(capture.ringTaken.get()) !== YinshPiece.RINGS.get(player)) {
+        if (state.getPieceAt(capture.ringTaken.get()) !== YinshPiece.RINGS.get(player).get()) {
             return MGPValidation.failure(YinshFailure.CAPTURE_SHOULD_TAKE_RING());
         }
         return MGPValidation.SUCCESS;
diff --git a/src/app/games/yinsh/YinshState.ts b/src/app/games/yinsh/YinshState.ts
index d757e563a..3d67dbbbc 100644
--- a/src/app/games/yinsh/YinshState.ts
+++ b/src/app/games/yinsh/YinshState.ts
@@ -1,7 +1,7 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { HexagonalGameState } from 'src/app/jscaip/HexagonalGameState';
 import { Player } from 'src/app/jscaip/Player';
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { YinshPiece } from './YinshPiece';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

@@ -38,7 +38,7 @@ export class YinshState extends HexagonalGameState<YinshPiece> {
         if (this.sideRings.equals(other.sideRings) === false) {
             return false;
         }
-        return TableUtils.compare(this.board, other.board);
+        return TableUtils.equals(this.board, other.board);
     }

     public getRingCoords(player: Player): Coord[] {
diff --git a/src/app/games/yinsh/YinshTutorial.ts b/src/app/games/yinsh/YinshTutorial.ts
index b76f02a54..a7a3af093 100644
--- a/src/app/games/yinsh/YinshTutorial.ts
+++ b/src/app/games/yinsh/YinshTutorial.ts
@@ -2,8 +2,7 @@ import { Tutorial, TutorialStep } from 'src/app/components/wrapper-components/tu
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { Localized } from 'src/app/utils/LocaleUtils';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { YinshState } from './YinshState';
 import { YinshCapture, YinshMove } from './YinshMove';
 import { YinshPiece } from './YinshPiece';
diff --git a/src/app/games/yinsh/tests/YinshMove.spec.ts b/src/app/games/yinsh/tests/YinshMove.spec.ts
index c2e1d7b4c..4e066cbe2 100644
--- a/src/app/games/yinsh/tests/YinshMove.spec.ts
+++ b/src/app/games/yinsh/tests/YinshMove.spec.ts
@@ -1,7 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { Coord } from 'src/app/jscaip/Coord';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { EncoderTestUtils, MGPOptional } from '@everyboard/lib';
 import { YinshCapture, YinshMove } from '../YinshMove';

 describe('YinshCapture', () => {
diff --git a/src/app/games/yinsh/tests/YinshMoveGenerator.spec.ts b/src/app/games/yinsh/tests/YinshMoveGenerator.spec.ts
index c2a465073..726f47594 100644
--- a/src/app/games/yinsh/tests/YinshMoveGenerator.spec.ts
+++ b/src/app/games/yinsh/tests/YinshMoveGenerator.spec.ts
@@ -3,7 +3,7 @@ import { YinshState } from '../YinshState';
 import { YinshCapture } from '../YinshMove';
 import { YinshPiece } from '../YinshPiece';
 import { YinshNode, YinshRules } from '../YinshRules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { YinshMoveGenerator } from '../YinshMoveGenerator';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/yinsh/tests/YinshPiece.spec.ts b/src/app/games/yinsh/tests/YinshPiece.spec.ts
index 5dbfe703a..34385ed80 100644
--- a/src/app/games/yinsh/tests/YinshPiece.spec.ts
+++ b/src/app/games/yinsh/tests/YinshPiece.spec.ts
@@ -1,6 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
+import { EncoderTestUtils, Utils } from '@everyboard/lib';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { YinshPiece } from '../YinshPiece';

@@ -27,14 +26,14 @@ describe('YinshPiece', () => {
     });

     it('should forbid flipping a non-player piece', () => {
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+        spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
         // Given a non-player piece
         const piece: YinshPiece = YinshPiece.EMPTY;
         // When trying to flip it
         // Then it should fail
         const message: string = 'cannot flip a non-player piece';
         expect(() => piece.flip()).toThrowError('Assertion failure: ' + message);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', message);
+        expect(Utils.logError).toHaveBeenCalledWith('Assertion failure', message, undefined);
     });

 });
diff --git a/src/app/games/yinsh/tests/YinshRules.spec.ts b/src/app/games/yinsh/tests/YinshRules.spec.ts
index f5e85ed87..2969567ec 100644
--- a/src/app/games/yinsh/tests/YinshRules.spec.ts
+++ b/src/app/games/yinsh/tests/YinshRules.spec.ts
@@ -2,13 +2,13 @@
 import { Coord } from 'src/app/jscaip/Coord';
 import { Player } from 'src/app/jscaip/Player';
 import { RulesUtils } from 'src/app/jscaip/tests/RulesUtils.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { YinshFailure } from '../YinshFailure';
 import { YinshState } from '../YinshState';
 import { YinshCapture, YinshMove } from '../YinshMove';
 import { YinshPiece } from '../YinshPiece';
 import { YinshNode, YinshRules } from '../YinshRules';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { GameStatus } from 'src/app/jscaip/GameStatus';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig } from 'src/app/jscaip/RulesConfigUtil';
diff --git a/src/app/games/yinsh/tests/YinshState.spec.ts b/src/app/games/yinsh/tests/YinshState.spec.ts
index 17c77fd53..c690aa7a4 100644
--- a/src/app/games/yinsh/tests/YinshState.spec.ts
+++ b/src/app/games/yinsh/tests/YinshState.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { YinshState } from '../YinshState';
 import { YinshPiece } from '../YinshPiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { YinshRules } from '../YinshRules';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/yinsh/tests/yinsh.component.spec.ts b/src/app/games/yinsh/tests/yinsh.component.spec.ts
index 0d83ebebd..0af4f1bb3 100644
--- a/src/app/games/yinsh/tests/yinsh.component.spec.ts
+++ b/src/app/games/yinsh/tests/yinsh.component.spec.ts
@@ -2,14 +2,14 @@
 import { fakeAsync } from '@angular/core/testing';
 import { Coord } from 'src/app/jscaip/Coord';
 import { RulesFailure } from 'src/app/jscaip/RulesFailure';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { ComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { YinshComponent } from '../yinsh.component';
 import { YinshFailure } from '../YinshFailure';
 import { YinshState } from '../YinshState';
 import { YinshCapture, YinshMove } from '../YinshMove';
 import { YinshPiece } from '../YinshPiece';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { YinshRules } from '../YinshRules';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';

diff --git a/src/app/games/yinsh/yinsh.component.html b/src/app/games/yinsh/yinsh.component.html
index b4662d3aa..d5044a796 100644
--- a/src/app/games/yinsh/yinsh.component.html
+++ b/src/app/games/yinsh/yinsh.component.html
@@ -71,20 +71,20 @@
           class="indicator"/>
     <g *ngFor="let player of Player.PLAYERS"
        [attr.transform]="'rotate(' + ((getPointOfView().getValue() + 1) * 180) + ' 532.5 780)'">
-        <g *ngFor="let _ of [].constructor(viewInfo.sideRings.get(player)); index as ring">
+        <g *ngFor="let _ of [].constructor(viewInfo.sideRings[player.getValue()]); index as ring">
             <circle id="player_{{ player.getValue() }}_sideRing_{{ ring + 1 }}"
-                    [attr.cx]="(player === Player.ZERO ? 15 : 1050) + (player === Player.ZERO ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
-                    [attr.cy]="player === Player.ZERO ? 300 : 1260"
+                    [attr.cx]="(player.getValue() === 0 ? 15 : 1050) + (player.getValue() === 0 ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
+                    [attr.cy]="player.getValue() === 0 ? 300 : 1260"
                     [attr.r]="viewInfo.ringOuterSize"
                     class="base no-fill mid-stroke"/>
-            <circle [attr.cx]="(player === Player.ZERO ? 15 : 1050) + (player === Player.ZERO ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
-                    [attr.cy]="(player === Player.ZERO ? 300 : 1260)"
+            <circle [attr.cx]="(player.getValue() === 0 ? 15 : 1050) + (player.getValue() === 0 ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
+                    [attr.cy]="(player.getValue() === 0 ? 300 : 1260)"
                     [attr.r]="viewInfo.ringInnerSize"
                     class="base no-fill mid-stroke"/>
-            <circle [attr.cx]="(player === Player.ZERO ? 15 : 1050) + (player === Player.ZERO ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
-                    [attr.cy]="player === Player.ZERO ? 300 : 1260"
+            <circle [attr.cx]="(player.getValue() === 0 ? 15 : 1050) + (player.getValue() === 0 ? 1 : -1) * 1.2 * viewInfo.ringOuterSize * (ring + 1)"
+                    [attr.cy]="player.getValue() === 0 ? 300 : 1260"
                     [attr.r]="viewInfo.ringMidSize"
-                    [ngClass]="viewInfo.sideRingClass.get(player)"
+                    [ngClass]="viewInfo.sideRingClass[player.getValue()]"
                     class="base no-fill"/>
         </g>
     </g>
diff --git a/src/app/games/yinsh/yinsh.component.ts b/src/app/games/yinsh/yinsh.component.ts
index d76a11fe1..bcdff8e98 100644
--- a/src/app/games/yinsh/yinsh.component.ts
+++ b/src/app/games/yinsh/yinsh.component.ts
@@ -5,21 +5,17 @@ import { HexaLayout } from 'src/app/jscaip/HexaLayout';
 import { FlatHexaOrientation } from 'src/app/jscaip/HexaOrientation';
 import { Player } from 'src/app/jscaip/Player';
 import { MessageDisplayer } from 'src/app/services/MessageDisplayer';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
 import { YinshFailure } from './YinshFailure';
 import { YinshState } from './YinshState';
 import { YinshCapture, YinshMove } from './YinshMove';
 import { YinshPiece } from './YinshPiece';
 import { YinshLegalityInformation, YinshRules } from './YinshRules';
-import { Utils } from 'src/app/utils/utils';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { assert } from 'src/app/utils/assert';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { MCTS } from 'src/app/jscaip/AI/MCTS';
 import { Minimax } from 'src/app/jscaip/AI/Minimax';
 import { YinshScoreHeuristic } from './YinshScoreHeuristic';
 import { YinshMoveGenerator } from './YinshMoveGenerator';
-import { PlayerMap, PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
+import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { EmptyRulesConfig } from 'src/app/jscaip/RulesConfigUtil';

 interface SpaceInfo {
@@ -43,8 +39,8 @@ interface ViewInfo {
     ringOuterSize: number,
     ringMidSize: number,
     ringInnerSize: number,
-    sideRings: PlayerNumberMap,
-    sideRingClass: PlayerMap<string>,
+    sideRings: [number, number],
+    sideRingClass: [string, string],
 }

 @Component({
@@ -99,8 +95,8 @@ export class YinshComponent extends HexagonalGameComponent<YinshRules,
         ringMidSize: YinshComponent.RING_MID_SIZE,
         ringInnerSize: YinshComponent.RING_INNER_SIZE,
         indicatorSize: YinshComponent.INDICATOR_SIZE,
-        sideRings: PlayerNumberMap.of(5, 5),
-        sideRingClass: PlayerMap.ofValues('player0-stroke', 'player1-stroke'),
+        sideRings: [5, 5],
+        sideRingClass: ['player0-stroke', 'player1-stroke'],
     };

     public constructor(messageDisplayer: MessageDisplayer) {
@@ -148,7 +144,9 @@ export class YinshComponent extends HexagonalGameComponent<YinshRules,
             this.setRingInfo(coord, piece);
             this.setMarkerInfo(coord, piece);
         });
-        this.viewInfo.sideRings = this.constructedState.sideRings;
+        for (const player of Player.PLAYERS) {
+            this.viewInfo.sideRings[player.getValue()] = this.constructedState.sideRings.get(player);
+        }
         this.showCurrentMoveCaptures();

         this.viewInfo.targets = [];
@@ -375,7 +373,7 @@ export class YinshComponent extends HexagonalGameComponent<YinshRules,
             this.movePhase = 'INITIAL_CAPTURE_SELECT_RING';
         } else {
             const message: string = 'selectCapture did not expect to be called in movePhase ' + this.movePhase;
-            assert(this.movePhase === 'FINAL_CAPTURE_SELECT_FIRST' || this.movePhase === 'FINAL_CAPTURE_SELECT_LAST', message);
+            Utils.assert(this.movePhase === 'FINAL_CAPTURE_SELECT_FIRST' || this.movePhase === 'FINAL_CAPTURE_SELECT_LAST', message);
             this.movePhase = 'FINAL_CAPTURE_SELECT_RING';
         }
         this.updateViewInfo();
@@ -395,12 +393,12 @@ export class YinshComponent extends HexagonalGameComponent<YinshRules,

     private markRemovedMarker(coord: Coord, player: Player): void {
         this.viewInfo.spaceInfo[coord.y][coord.x].removedClass = 'semi-transparent';
-        this.setMarkerInfo(coord, YinshPiece.MARKERS.get(player));
+        this.setMarkerInfo(coord, YinshPiece.MARKERS.get(player).get());
     }

     private markRemovedRing(coord: Coord, player: Player): void {
         this.viewInfo.spaceInfo[coord.y][coord.x].removedClass = 'semi-transparent';
-        this.setRingInfo(coord, YinshPiece.RINGS.get(player));
+        this.setRingInfo(coord, YinshPiece.RINGS.get(player).get());
     }

     private async selectRing(coord: Coord): Promise<MGPValidation> {
@@ -478,7 +476,7 @@ export class YinshComponent extends HexagonalGameComponent<YinshRules,
             this.cancelMoveAttempt();
             return MGPValidation.SUCCESS;
         }
-        const currentPlayerRing: YinshPiece = YinshPiece.RINGS.get(this.getState().getCurrentPlayer());
+        const currentPlayerRing: YinshPiece = YinshPiece.RINGS.get(this.getState().getCurrentPlayer()).get();
         if (this.constructedState.getPieceAt(coord) === currentPlayerRing) {
             this.cancelMoveAttempt();
             return this.selectMoveStart(coord);
diff --git a/src/app/guard/exclusive-online-game-guard.ts b/src/app/guard/exclusive-online-game-guard.ts
index 56825af0d..bbe211a73 100644
--- a/src/app/guard/exclusive-online-game-guard.ts
+++ b/src/app/guard/exclusive-online-game-guard.ts
@@ -5,7 +5,7 @@ import { Subscription } from 'rxjs';

 import { CurrentGame } from '../domain/User';
 import { CurrentGameService } from '../services/CurrentGameService';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 @Injectable({
     providedIn: 'root',
diff --git a/src/app/guard/tests/exclusive-online-game-guard.spec.ts b/src/app/guard/tests/exclusive-online-game-guard.spec.ts
index ab013b96f..475f2eea5 100644
--- a/src/app/guard/tests/exclusive-online-game-guard.spec.ts
+++ b/src/app/guard/tests/exclusive-online-game-guard.spec.ts
@@ -4,7 +4,7 @@ import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { RouterTestingModule } from '@angular/router/testing';
 import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';
 import { ExclusiveOnlineGameGuard } from '../exclusive-online-game-guard';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { PartDocument } from 'src/app/domain/Part';
 import { PartMocks } from 'src/app/domain/PartMocks.spec';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
diff --git a/src/app/guard/tests/verified-account.guard.spec.ts b/src/app/guard/tests/verified-account.guard.spec.ts
index 2124ceeca..109ebbd36 100644
--- a/src/app/guard/tests/verified-account.guard.spec.ts
+++ b/src/app/guard/tests/verified-account.guard.spec.ts
@@ -6,7 +6,7 @@ import { RouterTestingModule } from '@angular/router/testing';
 import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';
 import { ConnectedUserServiceMock } from 'src/app/services/tests/ConnectedUserService.spec';
 import { VerifiedAccountGuard } from '../verified-account.guard';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';

 describe('VerifiedAccountGuard', () => {
diff --git a/src/app/jscaip/AI/AI.ts b/src/app/jscaip/AI/AI.ts
index 8516583bb..b50375d67 100644
--- a/src/app/jscaip/AI/AI.ts
+++ b/src/app/jscaip/AI/AI.ts
@@ -1,8 +1,8 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { GameNode } from './GameNode';
 import { GameState } from '../GameState';
 import { Move } from '../Move';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
+import { MGPOptional } from '@everyboard/lib';

 /**
  * A move generator should have a method that generates move from a node.
diff --git a/src/app/jscaip/AI/AlignmentHeuristic.ts b/src/app/jscaip/AI/AlignmentHeuristic.ts
index 1c19a9e76..df643ba05 100644
--- a/src/app/jscaip/AI/AlignmentHeuristic.ts
+++ b/src/app/jscaip/AI/AlignmentHeuristic.ts
@@ -1,11 +1,11 @@
-import { MGPOptional } from '../../utils/MGPOptional';
-import { Coord } from '../Coord';
-import { Move } from '../Move';
-import { SCORE } from '../SCORE';
-import { GameState } from '../GameState';
+import { MGPOptional } from '@everyboard/lib';
 import { Heuristic } from './Minimax';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
 import { BoardValue } from './BoardValue';
+import { SCORE } from '../SCORE';
+import { Coord } from '../Coord';
+import { Move } from '../Move';
+import { GameState } from '../GameState';

 export interface BoardInfo {
     status: SCORE,
diff --git a/src/app/jscaip/AI/BoardValue.ts b/src/app/jscaip/AI/BoardValue.ts
index 8fb3e8a7a..005176035 100644
--- a/src/app/jscaip/AI/BoardValue.ts
+++ b/src/app/jscaip/AI/BoardValue.ts
@@ -1,7 +1,5 @@
-import { Utils } from 'src/app/utils/utils';
+import { ArrayUtils, Utils } from '@everyboard/lib';
 import { Player } from '../Player';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
-import { PlayerNumberMap } from '../PlayerMap';

 export class BoardValue {

@@ -34,13 +32,6 @@ export class BoardValue {
         return BoardValue.ofMultiple([playerZeroScore], [playerOneScore]);
     }

-    /**
-     * return the board value corresponding to the players' scores, as a number map
-     */
-    public static ofPlayerNumberMap(map: PlayerNumberMap): BoardValue {
-        return BoardValue.ofSingle(map.get(Player.ZERO), map.get(Player.ONE));
-    }
-
     /**
      * return the board value corresponding to the players' scores
      * @param playerZeroScores the positive score list of player zero
diff --git a/src/app/jscaip/AI/GameNode.ts b/src/app/jscaip/AI/GameNode.ts
index 2984d109c..f7f389e6c 100644
--- a/src/app/jscaip/AI/GameNode.ts
+++ b/src/app/jscaip/AI/GameNode.ts
@@ -1,12 +1,11 @@
+import { MGPMap, MGPOptional, Utils } from '@everyboard/lib';
 import { Move } from '../Move';
-import { MGPMap } from '../../utils/MGPMap';
-import { Debug, Utils } from 'src/app/utils/utils';
-import { MGPOptional } from '../../utils/MGPOptional';
 import { GameState } from '../GameState';
 import { GameStatus } from '../GameStatus';
 import { Player } from '../Player';
 import { RulesConfig } from '../RulesConfigUtil';
 import { AbstractRules } from '../Rules';
+import { Debug } from 'src/app/utils/Debug';

 export class GameNodeStats {
     public static createdNodes: number = 0;
diff --git a/src/app/jscaip/AI/MCTS.ts b/src/app/jscaip/AI/MCTS.ts
index 51974450f..a11232727 100644
--- a/src/app/jscaip/AI/MCTS.ts
+++ b/src/app/jscaip/AI/MCTS.ts
@@ -1,7 +1,4 @@
-import { ArrayUtils } from '../../utils/ArrayUtils';
-import { MGPFallible } from '../../utils/MGPFallible';
-import { MGPOptional } from '../../utils/MGPOptional';
-import { Debug, Utils } from '../../utils/utils';
+import { ArrayUtils, MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { GameState } from '../GameState';
 import { GameStatus } from '../GameStatus';
 import { AI, AITimeLimitOptions, MoveGenerator } from './AI';
@@ -10,6 +7,7 @@ import { Move } from '../Move';
 import { Player } from '../Player';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
 import { SuperRules } from '../Rules';
+import { Debug } from 'src/app/utils/Debug';

 type NodeAndPath<M extends Move, S extends GameState> = {
     node: GameNode<M, S>,
diff --git a/src/app/jscaip/AI/Minimax.ts b/src/app/jscaip/AI/Minimax.ts
index 4053798bf..f326eeda9 100644
--- a/src/app/jscaip/AI/Minimax.ts
+++ b/src/app/jscaip/AI/Minimax.ts
@@ -1,13 +1,9 @@
 import { AI, AIDepthLimitOptions, MoveGenerator } from './AI';
 import { Move } from '../Move';
 import { BoardValue } from './BoardValue';
+import { ArrayUtils, MGPFallible, MGPOptional, MGPSet, Utils } from '@everyboard/lib';
 import { GameState } from '../GameState';
-import { MGPSet } from '../../utils/MGPSet';
-import { MGPOptional } from '../../utils/MGPOptional';
 import { Player } from '../Player';
-import { MGPFallible } from '../../utils/MGPFallible';
-import { Utils } from '../../utils/utils';
-import { ArrayUtils } from '../../utils/ArrayUtils';
 import { GameStatus } from '../GameStatus';
 import { SuperRules } from '../Rules';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
diff --git a/src/app/jscaip/AI/tests/GameNode.spec.ts b/src/app/jscaip/AI/tests/GameNode.spec.ts
index feada5257..27cd1a7b9 100644
--- a/src/app/jscaip/AI/tests/GameNode.spec.ts
+++ b/src/app/jscaip/AI/tests/GameNode.spec.ts
@@ -1,6 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation } from '@everyboard/lib';
 import { GameState } from '../../GameState';
 import { GameStatus } from '../../GameStatus';
 import { GameNode } from '../GameNode';
diff --git a/src/app/jscaip/AI/tests/HeuristicUtils.spec.ts b/src/app/jscaip/AI/tests/HeuristicUtils.spec.ts
index cbdea62c6..f4b603481 100644
--- a/src/app/jscaip/AI/tests/HeuristicUtils.spec.ts
+++ b/src/app/jscaip/AI/tests/HeuristicUtils.spec.ts
@@ -1,12 +1,11 @@
 import { BoardValue } from '../BoardValue';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
 import { GameState } from '../../GameState';
 import { Move } from '../../Move';
 import { Heuristic } from '../Minimax';
 import { Player } from '../../Player';
 import { EmptyRulesConfig, RulesConfig } from '../../RulesConfigUtil';
 import { GameNode } from '../GameNode';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';

 export class HeuristicUtils {

diff --git a/src/app/jscaip/AI/tests/MCTS.spec.ts b/src/app/jscaip/AI/tests/MCTS.spec.ts
index cff68de69..5f8276eee 100644
--- a/src/app/jscaip/AI/tests/MCTS.spec.ts
+++ b/src/app/jscaip/AI/tests/MCTS.spec.ts
@@ -4,7 +4,7 @@ import { QuartoMoveGenerator } from 'src/app/games/quarto/QuartoMoveGenerator';
 import { QuartoPiece } from 'src/app/games/quarto/QuartoPiece';
 import { QuartoNode, QuartoRules } from 'src/app/games/quarto/QuartoRules';
 import { QuartoState } from 'src/app/games/quarto/QuartoState';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { AITimeLimitOptions } from '../AI';
 import { Coord } from '../../Coord';
 import { MCTS } from '../MCTS';
@@ -14,7 +14,7 @@ import { AwaleRules } from 'src/app/games/mancala/awale/AwaleRules';
 import { MancalaState } from 'src/app/games/mancala/common/MancalaState';
 import { MancalaConfig } from 'src/app/games/mancala/common/MancalaConfig';
 import { MancalaMove } from 'src/app/games/mancala/common/MancalaMove';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { NoConfig } from '../../RulesConfigUtil';

 describe('MCTS', () => {
diff --git a/src/app/jscaip/AI/tests/Minimax.spec.ts b/src/app/jscaip/AI/tests/Minimax.spec.ts
index 5da09acc1..e2f0cab9d 100644
--- a/src/app/jscaip/AI/tests/Minimax.spec.ts
+++ b/src/app/jscaip/AI/tests/Minimax.spec.ts
@@ -4,14 +4,12 @@ import { P4Move } from 'src/app/games/p4/P4Move';
 import { P4MoveGenerator } from 'src/app/games/p4/P4MoveGenerator';
 import { P4Config, P4Node, P4Rules } from 'src/app/games/p4/P4Rules';
 import { P4State } from 'src/app/games/p4/P4State';
-import { ArrayUtils } from 'src/app/utils/ArrayUtils';
 import { AIDepthLimitOptions } from '../AI';
 import { BoardValue } from '../BoardValue';
 import { MCTS } from '../MCTS';
 import { DummyHeuristic, Minimax } from '../Minimax';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { ArrayUtils, MGPOptional, MGPSet } from '@everyboard/lib';
 import { PlayerOrNone } from '../../Player';
-import { MGPSet } from 'src/app/utils/MGPSet';

 const defaultConfig: MGPOptional<P4Config> = P4Rules.get().getDefaultRulesConfig();

diff --git a/src/app/jscaip/BoardDatas.ts b/src/app/jscaip/BoardDatas.ts
index eb691a772..e71bde151 100644
--- a/src/app/jscaip/BoardDatas.ts
+++ b/src/app/jscaip/BoardDatas.ts
@@ -1,7 +1,7 @@
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
 import { Coord } from 'src/app/jscaip/Coord';
-import { Debug } from '../utils/utils';
 import { Direction } from './Direction';
+import { Table, TableUtils } from './TableUtils';
+import { Debug } from '../utils/Debug';

 export class BoardDatas {

diff --git a/src/app/jscaip/Coord.ts b/src/app/jscaip/Coord.ts
index feffdd3c8..75f117ce0 100644
--- a/src/app/jscaip/Coord.ts
+++ b/src/app/jscaip/Coord.ts
@@ -1,8 +1,6 @@
 import { Direction } from 'src/app/jscaip/Direction';
-import { MGPFallible } from '../utils/MGPFallible';
-import { Encoder } from '../utils/Encoder';
+import { Encoder, MGPFallible, Utils } from '@everyboard/lib';
 import { Vector } from './Vector';
-import { Utils } from '../utils/utils';

 export class CoordFailure {
     public static OUT_OF_RANGE(coord: Coord): string {
diff --git a/src/app/jscaip/Coord3D.ts b/src/app/jscaip/Coord3D.ts
index 68256ab5e..1d41e2f25 100644
--- a/src/app/jscaip/Coord3D.ts
+++ b/src/app/jscaip/Coord3D.ts
@@ -1,5 +1,5 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { Encoder } from '../utils/Encoder';
+import { Encoder } from '@everyboard/lib';

 export class Coord3D extends Coord {

diff --git a/src/app/jscaip/CoordSet.ts b/src/app/jscaip/CoordSet.ts
new file mode 100644
index 000000000..f76fcb235
--- /dev/null
+++ b/src/app/jscaip/CoordSet.ts
@@ -0,0 +1,8 @@
+import { Coord } from '../jscaip/Coord';
+import { OptimizedSet } from '@everyboard/lib';
+
+export class CoordSet extends OptimizedSet<Coord> {
+    protected toFields(coord: Coord): [[number], number] {
+        return [[coord.y], coord.x];
+    }
+}
diff --git a/src/app/jscaip/Direction.ts b/src/app/jscaip/Direction.ts
index f932cd5c0..5a01ba255 100644
--- a/src/app/jscaip/Direction.ts
+++ b/src/app/jscaip/Direction.ts
@@ -1,10 +1,7 @@
-import { JSONValue } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
-import { MGPFallible } from '../utils/MGPFallible';
+import { Encoder, JSONValue, MGPFallible, Utils } from '@everyboard/lib';
 import { Coord } from './Coord';
-import { Localized } from '../utils/LocaleUtils';
-import { Encoder } from '../utils/Encoder';
 import { Vector } from './Vector';
+import { Localized } from '../utils/LocaleUtils';

 export abstract class BaseDirection extends Vector {

@@ -154,7 +151,7 @@ export class Direction extends BaseDirection {
             return dir.toString();
         },
         (encoded: JSONValue): Direction => {
-            assert(typeof encoded === 'string', 'Invalid encoded direction');
+            Utils.assert(typeof encoded === 'string', 'Invalid encoded direction');
             const fromString: MGPFallible<Direction> = Direction.factory.fromString(encoded as string);
             return fromString.get();
         },
@@ -201,7 +198,7 @@ export class Orthogonal extends BaseDirection {
             return dir.toString();
         },
         (encoded: JSONValue): Orthogonal => {
-            assert(typeof encoded === 'string', 'Invalid encoded orthogonal');
+            Utils.assert(typeof encoded === 'string', 'Invalid encoded orthogonal');
             const fromString: MGPFallible<Orthogonal> = Orthogonal.factory.fromString(encoded as string);
             return fromString.get();
         },
diff --git a/src/app/jscaip/FourStatePiece.ts b/src/app/jscaip/FourStatePiece.ts
index d831500dc..eb2cc2d02 100644
--- a/src/app/jscaip/FourStatePiece.ts
+++ b/src/app/jscaip/FourStatePiece.ts
@@ -1,5 +1,4 @@
-import { ComparableObject } from '../utils/Comparable';
-import { Utils } from '../utils/utils';
+import { ComparableObject, Utils } from '@everyboard/lib';
 import { Player, PlayerOrNone } from './Player';

 export class FourStatePiece implements ComparableObject {
diff --git a/src/app/jscaip/GameStateWithTable.ts b/src/app/jscaip/GameStateWithTable.ts
index 5952a4837..cd94214ad 100644
--- a/src/app/jscaip/GameStateWithTable.ts
+++ b/src/app/jscaip/GameStateWithTable.ts
@@ -1,8 +1,7 @@
-import { Table, TableUtils } from '../utils/ArrayUtils';
-import { comparableEquals } from '../utils/Comparable';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPOptional, comparableEquals } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { GameState } from './GameState';
+import { Table, TableUtils } from './TableUtils';

 export abstract class GameStateWithTable<P> extends GameState {

diff --git a/src/app/jscaip/GipfProjectHelper.ts b/src/app/jscaip/GipfProjectHelper.ts
index d8c4a650f..6ebf96b33 100644
--- a/src/app/jscaip/GipfProjectHelper.ts
+++ b/src/app/jscaip/GipfProjectHelper.ts
@@ -1,9 +1,7 @@
-import { ArrayUtils, Table } from '../utils/ArrayUtils';
-import { Encoder } from '../utils/Encoder';
-import { MGPOptional } from '../utils/MGPOptional';
-import { Utils } from '../utils/utils';
+import { ArrayUtils, Encoder, MGPOptional, Utils } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { HexaLine } from './HexaLine';
+import { Table } from './TableUtils';

 /**
  * This represents a capture in Gipf-like games.
diff --git a/src/app/jscaip/HexaDirection.ts b/src/app/jscaip/HexaDirection.ts
index cb3ef9ffe..4bb57f064 100644
--- a/src/app/jscaip/HexaDirection.ts
+++ b/src/app/jscaip/HexaDirection.ts
@@ -1,7 +1,5 @@
-import { Utils } from 'src/app/utils/utils';
-import { MGPFallible } from '../utils/MGPFallible';
+import { Encoder, MGPFallible, Utils } from '@everyboard/lib';
 import { BaseDirection, DirectionFactory } from './Direction';
-import { Encoder } from '../utils/Encoder';

 /** Hexagonal directions encoded with axial coordinates, for "flat toped" hexagons */
 export class HexaDirection extends BaseDirection {
diff --git a/src/app/jscaip/HexaLayout.ts b/src/app/jscaip/HexaLayout.ts
index d68f83fb4..e694d8e32 100644
--- a/src/app/jscaip/HexaLayout.ts
+++ b/src/app/jscaip/HexaLayout.ts
@@ -1,4 +1,4 @@
-import { Utils } from '../utils/utils';
+import { Utils } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { FlatHexaOrientation, HexaOrientation } from './HexaOrientation';

diff --git a/src/app/jscaip/HexaLine.ts b/src/app/jscaip/HexaLine.ts
index a6db3205b..1812afdc7 100644
--- a/src/app/jscaip/HexaLine.ts
+++ b/src/app/jscaip/HexaLine.ts
@@ -1,4 +1,4 @@
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { HexaDirection } from './HexaDirection';

diff --git a/src/app/jscaip/HexagonalGameState.ts b/src/app/jscaip/HexagonalGameState.ts
index 1d904a879..56f917bcc 100644
--- a/src/app/jscaip/HexagonalGameState.ts
+++ b/src/app/jscaip/HexagonalGameState.ts
@@ -1,11 +1,9 @@
-import { ErrorLoggerService } from '../services/ErrorLoggerService';
-import { Table } from '../utils/ArrayUtils';
-import { MGPValidation } from '../utils/MGPValidation';
-import { assert } from '../utils/assert';
+import { MGPValidation, Utils } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { GameStateWithTable } from './GameStateWithTable';
 import { HexaDirection } from './HexaDirection';
 import { HexaLine } from './HexaLine';
+import { Table } from './TableUtils';

 export abstract class HexagonalGameState<P> extends GameStateWithTable<P> {

@@ -17,7 +15,7 @@ export abstract class HexagonalGameState<P> extends GameStateWithTable<P> {
                        public readonly empty: P)
     {
         super(board, turn);
-        assert(this.excludedSpaces.length < (this.height / 2) + 1, 'Invalid excluded spaces specification for HexagonalGameState.');
+        Utils.assert(this.excludedSpaces.length < (this.height / 2) + 1, 'Invalid excluded spaces specification for HexagonalGameState.');
     }
     public abstract setAtUnsafe(coord: Coord, v: P): this
     public setAt(coord: Coord, v: P): this {
@@ -111,9 +109,9 @@ export abstract class HexagonalGameState<P> extends GameStateWithTable<P> {
             coord = coord.getNext(dir);
         }
         const failure: MGPValidation =
-            ErrorLoggerService.logError('HexagonalGameState.findEntranceFrom',
-                                        'could not find a board entrance, board must be invalid',
-                                        { start: start.toString(), line: line.toString() });
+            Utils.logError('HexagonalGameState.findEntranceFrom',
+                           'could not find a board entrance, board must be invalid',
+                           { start: start.toString(), line: line.toString() });
         throw new Error(failure.getReason());
     }
 }
diff --git a/src/app/jscaip/Move.ts b/src/app/jscaip/Move.ts
index 2ee3f9f9f..7021b5628 100644
--- a/src/app/jscaip/Move.ts
+++ b/src/app/jscaip/Move.ts
@@ -1,4 +1,4 @@
-import { ComparableObject } from 'src/app/utils/Comparable';
+import { ComparableObject } from '@everyboard/lib';

 export abstract class Move implements ComparableObject {

diff --git a/src/app/jscaip/MoveCoord.ts b/src/app/jscaip/MoveCoord.ts
index 38616fe8f..36ceec651 100644
--- a/src/app/jscaip/MoveCoord.ts
+++ b/src/app/jscaip/MoveCoord.ts
@@ -1,7 +1,6 @@
 import { Move } from './Move';
 import { Coord } from './Coord';
-import { Encoder } from '../utils/Encoder';
-import { MGPFallible } from '../utils/MGPFallible';
+import { MGPFallible, Encoder } from '@everyboard/lib';

 export abstract class MoveCoord extends Move {

diff --git a/src/app/jscaip/MoveCoordToCoord.ts b/src/app/jscaip/MoveCoordToCoord.ts
index 97cfb9e2f..7bc903879 100644
--- a/src/app/jscaip/MoveCoordToCoord.ts
+++ b/src/app/jscaip/MoveCoordToCoord.ts
@@ -1,6 +1,6 @@
 import { Coord } from './Coord';
 import { Direction } from './Direction';
-import { MGPFallible } from '../utils/MGPFallible';
+import { MGPFallible } from '@everyboard/lib';
 import { RulesFailure } from './RulesFailure';
 import { MoveWithTwoCoords } from './MoveWithTwoCoords';

diff --git a/src/app/jscaip/MoveWithTwoCoords.ts b/src/app/jscaip/MoveWithTwoCoords.ts
index 6101c2c9e..401a39b7a 100644
--- a/src/app/jscaip/MoveWithTwoCoords.ts
+++ b/src/app/jscaip/MoveWithTwoCoords.ts
@@ -1,7 +1,6 @@
 import { Coord } from './Coord';
-import { Encoder } from '../utils/Encoder';
+import { Encoder, MGPFallible } from '@everyboard/lib';
 import { Move } from './Move';
-import { MGPFallible } from '../utils/MGPFallible';

 export abstract class MoveWithTwoCoords extends Move {

diff --git a/src/app/jscaip/NInARowHelper.ts b/src/app/jscaip/NInARowHelper.ts
index d920ac400..af3a2c2de 100644
--- a/src/app/jscaip/NInARowHelper.ts
+++ b/src/app/jscaip/NInARowHelper.ts
@@ -1,5 +1,4 @@
-import { MGPMap } from '../utils/MGPMap';
-import { Utils } from '../utils/utils';
+import { MGPMap, Utils } from '@everyboard/lib';
 import { BoardValue } from './AI/BoardValue';
 import { Coord } from './Coord';
 import { Direction } from './Direction';
diff --git a/src/app/jscaip/OpenHexagonalGameState.ts b/src/app/jscaip/OpenHexagonalGameState.ts
index 87d33b0c5..53cd111dd 100644
--- a/src/app/jscaip/OpenHexagonalGameState.ts
+++ b/src/app/jscaip/OpenHexagonalGameState.ts
@@ -1,6 +1,4 @@
-import { Comparable } from '../utils/Comparable';
-import { ReversibleMap } from '../utils/MGPMap';
-import { MGPSet } from '../utils/MGPSet';
+import { Comparable, MGPSet, ReversibleMap } from '@everyboard/lib';
 import { Coord } from './Coord';
 import { GameState } from './GameState';
 import { HexagonalUtils } from './HexagonalUtils';
diff --git a/src/app/jscaip/PieceThreat.ts b/src/app/jscaip/PieceThreat.ts
index 5c916b278..3143a4487 100644
--- a/src/app/jscaip/PieceThreat.ts
+++ b/src/app/jscaip/PieceThreat.ts
@@ -1,6 +1,5 @@
 import { Coord } from 'src/app/jscaip/Coord';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { ComparableObject, MGPSet } from '@everyboard/lib';

 export class PieceThreat implements ComparableObject {

diff --git a/src/app/jscaip/Player.ts b/src/app/jscaip/Player.ts
index 2c21ddd88..3e474a253 100644
--- a/src/app/jscaip/Player.ts
+++ b/src/app/jscaip/Player.ts
@@ -1,6 +1,4 @@
-import { JSONValueWithoutArray, Utils } from 'src/app/utils/utils';
-import { ComparableObject } from 'src/app/utils/Comparable';
-import { Encoder } from '../utils/Encoder';
+import { ComparableObject, Encoder, JSONValueWithoutArray, Utils } from '@everyboard/lib';

 class PlayerNone implements ComparableObject {

diff --git a/src/app/jscaip/PlayerMap.ts b/src/app/jscaip/PlayerMap.ts
index 312dc12e4..a43a8c982 100644
--- a/src/app/jscaip/PlayerMap.ts
+++ b/src/app/jscaip/PlayerMap.ts
@@ -1,46 +1,49 @@
-import { MGPMap } from '../utils/MGPMap';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPMap, MGPOptional } from '@everyboard/lib';
 import { Player } from './Player';
 import { PlayerNumberTable } from './PlayerNumberTable';

-export class PlayerMap<T extends NonNullable<unknown>> {
+export class PlayerMap<T extends NonNullable<unknown>> extends MGPMap<Player, T> {

-    public static ofValues<T extends NonNullable<unknown>>(playerZeroValue: T, playerOneValue: T): PlayerMap<T> {
+    public static of<T extends NonNullable<unknown>>(playerZeroValue: T, playerOneValue: T): PlayerMap<T> {
         const map: MGPMap<Player, T> = new MGPMap([
             { key: Player.ZERO, value: playerZeroValue },
             { key: Player.ONE, value: playerOneValue },
         ]);
-        return new PlayerMap(map);
+        return map;
     }

-    protected constructor(protected readonly map: MGPMap<Player, T>) {}
+}
+
+export class PlayerNumberMap {
+
+    public static of(playerZeroValue: number, playerOneValue: number): PlayerNumberMap {
+        const map: MGPMap<Player, number> = new MGPMap([
+            { key: Player.ZERO, value: playerZeroValue },
+            { key: Player.ONE, value: playerOneValue },
+        ]);
+        return new PlayerNumberMap(map);
+    }
+
+    private constructor(private readonly map: MGPMap<Player, number>) {}

     public makeImmutable(): void {
         return this.map.makeImmutable();
     }

-    public equals(other: PlayerMap<T>): boolean {
+    public equals(other: PlayerNumberMap): boolean {
         return this.map.equals(other.map);
     }

-    public get(player: Player): T {
-        return this.map.get(player).get();
+    public getCopy(): PlayerNumberMap {
+        return new PlayerNumberMap(this.map.getCopy());
     }

-    public put(player: Player, value: T): T {
-        return this.map.put(player, value).get();
+    public get(player: Player): number {
+        return this.map.get(player).get();
     }

-}
-
-export class PlayerNumberMap extends PlayerMap<number> {
-
-    public static of(playerZeroValue: number, playerOneValue: number): PlayerNumberMap {
-        const map: MGPMap<Player, number> = new MGPMap([
-            { key: Player.ZERO, value: playerZeroValue },
-            { key: Player.ONE, value: playerOneValue },
-        ]);
-        return new PlayerNumberMap(map);
+    public put(player: Player, value: number): number {
+        return this.map.put(player, value).get();
     }

     public add(player: Player, value: number): MGPOptional<number> {
@@ -55,8 +58,4 @@ export class PlayerNumberMap extends PlayerMap<number> {
         );
     }

-    public getCopy(): PlayerNumberMap {
-        return new PlayerNumberMap(this.map.getCopy());
-    }
-
 }
diff --git a/src/app/jscaip/PlayerNumberTable.ts b/src/app/jscaip/PlayerNumberTable.ts
index b5615b618..85b9aef10 100644
--- a/src/app/jscaip/PlayerNumberTable.ts
+++ b/src/app/jscaip/PlayerNumberTable.ts
@@ -1,7 +1,5 @@
-import { MGPOptional } from '../utils/MGPOptional';
 import { Player } from './Player';
-import { ArrayUtils } from '../utils/ArrayUtils';
-import { MGPMap } from 'src/app/utils/MGPMap';
+import { ArrayUtils, MGPMap, MGPOptional } from '@everyboard/lib';


 export class PlayerNumberTable extends MGPMap<Player, ReadonlyArray<number>> {
diff --git a/src/app/jscaip/Rules.ts b/src/app/jscaip/Rules.ts
index 5d9b5f06b..16689fbd4 100644
--- a/src/app/jscaip/Rules.ts
+++ b/src/app/jscaip/Rules.ts
@@ -1,12 +1,11 @@
 import { GameNode } from 'src/app/jscaip/AI/GameNode';
 import { Move } from './Move';
-import { Debug, Utils } from '../utils/utils';
+import { MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { GameState } from './GameState';
-import { MGPOptional } from '../utils/MGPOptional';
-import { MGPFallible } from '../utils/MGPFallible';
 import { GameStatus } from './GameStatus';
 import { EmptyRulesConfig, RulesConfig } from './RulesConfigUtil';
 import { RulesConfigDescription } from '../components/wrapper-components/rules-configuration/RulesConfigDescription';
+import { Debug } from '../utils/Debug';

 export abstract class SuperRules<M extends Move,
                                  S extends GameState,
diff --git a/src/app/jscaip/RulesConfigUtil.ts b/src/app/jscaip/RulesConfigUtil.ts
index a6b14dfb3..6ac44fc5c 100644
--- a/src/app/jscaip/RulesConfigUtil.ts
+++ b/src/app/jscaip/RulesConfigUtil.ts
@@ -1,8 +1,8 @@
 /* eslint-disable no-multi-spaces */
+import { MGPOptional } from '@everyboard/lib';
 import { GameInfo } from '../components/normal-component/pick-game/pick-game.component';
 import { ConfigLine } from '../components/wrapper-components/rules-configuration/RulesConfigDescription';
 import { Localized } from '../utils/LocaleUtils';
-import { MGPOptional } from '../utils/MGPOptional';

 export type ConfigDescriptionType = number | boolean;

diff --git a/src/app/jscaip/TableUtils.ts b/src/app/jscaip/TableUtils.ts
new file mode 100644
index 000000000..d9b8ea669
--- /dev/null
+++ b/src/app/jscaip/TableUtils.ts
@@ -0,0 +1,115 @@
+import { ArrayUtils, Comparable, MGPMap, MGPOptional, Utils } from '@everyboard/lib';
+import { Coord } from './Coord';
+
+export type Table<T> = ReadonlyArray<ReadonlyArray<T>>;
+
+export type NumberTable = Table<number>;
+
+export class TableUtils {
+
+    public static create<T>(width: number, height: number, initValue: T): T[][] {
+        const table: Array<Array<T>> = [];
+        for (let y: number = 0; y < height; y++) {
+            table.push(ArrayUtils.create(width, initValue));
+        }
+        return table;
+    }
+
+    public static map<T, U>(table: Table<T>, fun: (t: T) => U): U[][] {
+        return table.map((row: T[]): U[] => row.map(fun));
+    }
+
+    public static copy<T>(table: Table<T>): T[][] {
+        return TableUtils.map(table, (t: T): T => t);
+    }
+
+    public static equals<T extends Comparable>(t1: Table<T>, t2: Table<T>): boolean {
+        if (t1.length !== t2.length) return false;
+        for (let i: number = 0; i < t1.length; i++) {
+            if (ArrayUtils.equals(t1[i], t2[i]) === false) return false;
+        }
+        return true;
+    }
+
+    public static sum(board: Table<number>): number {
+        let sum: number = 0;
+        for (const line of board) {
+            for (const element of line) {
+                sum += element;
+            }
+        }
+        return sum;
+    }
+
+    public static add(left: Table<number>, right: Table<number>): number[][] {
+        const width: number = left[0].length;
+        const height: number = left.length;
+        Utils.assert(height === right.length, 'Table should have same height');
+        Utils.assert(width === right[0].length, 'Table should have same width');
+        const sum: number[][] = TableUtils.create(width, height, 0);
+        for (let y: number = 0; y < height; y++) {
+            for (let x: number = 0; x < width; x++) {
+                sum[y][x] = left[y][x] + right[y][x];
+            }
+        }
+        return sum;
+    }
+
+
+}
+
+export type Cell<T> = {
+    x: number,
+    y: number,
+    content: T,
+};
+
+export class TableWithPossibleNegativeIndices<T extends NonNullable<unknown>> {
+    // This cannot be represented by an array as it may have negative indices
+    // which cannot be iterated over
+    protected content: MGPMap<number, MGPMap<number, T>> = new MGPMap();
+
+    public get(coord: Coord): MGPOptional<T> {
+        const line: MGPOptional<MGPMap<number, T>> = this.content.get(coord.y);
+        if (line.isAbsent()) return MGPOptional.empty();
+        return line.get().get(coord.x);
+    }
+
+    public set(coord: Coord, value: T): void {
+        const lineOpt: MGPOptional<MGPMap<number, T>> = this.content.get(coord.y);
+        let line: MGPMap<number, T>;
+        if (lineOpt.isPresent()) {
+            line = lineOpt.get();
+        } else {
+            line = new MGPMap<number, T>();
+            this.content.set(coord.y, line);
+        }
+        line.set(coord.x, value);
+    }
+    [Symbol.iterator](): IterableIterator<Cell<T>> {
+        const elements: Cell<T>[] = [];
+        const ys: number[] = this.content.getKeySet().toList();
+        ys.sort(ArrayUtils.smallerFirst);
+        for (const y of ys) {
+            const line: MGPMap<number, T> = this.content.get(y).get();
+            const xs: number[] = line.getKeySet().toList();
+            xs.sort(ArrayUtils.smallerFirst);
+            for (const x of xs) {
+                const content: T = line.get(x).get();
+                elements.push({ x, y, content });
+            }
+        }
+        return elements.values();
+    }
+}
+
+export class Table3DUtils {
+
+    public static create<T>(depth: number, width: number, height: number, initValue: T): T[][][] {
+        const triTable: Array<Array<Array<T>>> = [];
+        for (let z: number = 0; z < depth; z++) {
+            triTable.push(TableUtils.create(width, height, initValue));
+        }
+        return triTable;
+    }
+}
diff --git a/src/app/jscaip/TriangularCheckerBoard.ts b/src/app/jscaip/TriangularCheckerBoard.ts
index 3d8297150..2cfc7ba68 100644
--- a/src/app/jscaip/TriangularCheckerBoard.ts
+++ b/src/app/jscaip/TriangularCheckerBoard.ts
@@ -1,5 +1,5 @@
 import { Coord } from './Coord';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';

 export class TriangularCheckerBoard {

diff --git a/src/app/jscaip/TriangularGameState.ts b/src/app/jscaip/TriangularGameState.ts
index ccc031b20..e87ca92db 100644
--- a/src/app/jscaip/TriangularGameState.ts
+++ b/src/app/jscaip/TriangularGameState.ts
@@ -1,6 +1,6 @@
-import { Table } from '../utils/ArrayUtils';
 import { Coord } from './Coord';
 import { GameStateWithTable } from './GameStateWithTable';
+import { Table } from './TableUtils';
 import { TriangularCheckerBoard } from './TriangularCheckerBoard';

 export abstract class TriangularGameState<T> extends GameStateWithTable<T> {
diff --git a/src/app/jscaip/Vector.ts b/src/app/jscaip/Vector.ts
index 24b96f549..eebe79423 100644
--- a/src/app/jscaip/Vector.ts
+++ b/src/app/jscaip/Vector.ts
@@ -1,5 +1,4 @@
-import { ComparableObject } from '../utils/Comparable';
-import { MathUtils } from '../utils/MathUtils';
+import { ComparableObject, MathUtils } from '@everyboard/lib';

 export class Vector implements ComparableObject {

diff --git a/src/app/jscaip/tests/Coord.spec.ts b/src/app/jscaip/tests/Coord.spec.ts
index 2124becdd..aed2582f1 100644
--- a/src/app/jscaip/tests/Coord.spec.ts
+++ b/src/app/jscaip/tests/Coord.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { Direction } from '../Direction';

diff --git a/src/app/jscaip/tests/Coord3D.spec.ts b/src/app/jscaip/tests/Coord3D.spec.ts
index 7ea102f71..b6cd2edb8 100644
--- a/src/app/jscaip/tests/Coord3D.spec.ts
+++ b/src/app/jscaip/tests/Coord3D.spec.ts
@@ -1,8 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { Encoder, EncoderTestUtils, MGPOptional } from '@everyboard/lib';
 import { Coord3D } from '../Coord3D';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
-import { Encoder } from 'src/app/utils/Encoder';

 describe('Coord3D', () => {

diff --git a/src/app/utils/tests/OptimizedSet.spec.ts b/src/app/jscaip/tests/CoordSet.spec.ts
similarity index 94%
rename from src/app/utils/tests/OptimizedSet.spec.ts
rename to src/app/jscaip/tests/CoordSet.spec.ts
index 101d1ea6d..024a4744a 100644
--- a/src/app/utils/tests/OptimizedSet.spec.ts
+++ b/src/app/jscaip/tests/CoordSet.spec.ts
@@ -1,8 +1,8 @@
 /* eslint-disable max-lines-per-function */
-import { Coord } from 'src/app/jscaip/Coord';
-import { CoordSet } from '../OptimizedSet';
+import { Coord } from '../Coord';
+import { CoordSet } from '../CoordSet';

-describe('OptimizedSet (CoordSet)', () => {
+describe('CoordSet', () => {
     it('should build the empty set if no value is provided', () => {
         const set: CoordSet = new CoordSet();
         expect(set.size()).toBe(0);
diff --git a/src/app/jscaip/tests/Direction.spec.ts b/src/app/jscaip/tests/Direction.spec.ts
index 43db10cee..d9cbbcef0 100644
--- a/src/app/jscaip/tests/Direction.spec.ts
+++ b/src/app/jscaip/tests/Direction.spec.ts
@@ -1,6 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { MGPValidation } from '../../utils/MGPValidation';
+import { MGPFallible, MGPValidation } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { Direction, DirectionFailure, Orthogonal } from '../Direction';

diff --git a/src/app/jscaip/tests/HexaDirection.spec.ts b/src/app/jscaip/tests/HexaDirection.spec.ts
index e5f436766..bc66a9393 100644
--- a/src/app/jscaip/tests/HexaDirection.spec.ts
+++ b/src/app/jscaip/tests/HexaDirection.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils } from '@everyboard/lib';
 import { HexaDirection } from '../HexaDirection';

 describe('HexaDirection', () => {
diff --git a/src/app/jscaip/tests/HexaLine.spec.ts b/src/app/jscaip/tests/HexaLine.spec.ts
index 06c016558..36034d481 100644
--- a/src/app/jscaip/tests/HexaLine.spec.ts
+++ b/src/app/jscaip/tests/HexaLine.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { HexaDirection } from '../HexaDirection';
 import { HexaLine } from '../HexaLine';
diff --git a/src/app/jscaip/tests/HexagonalGameState.spec.ts b/src/app/jscaip/tests/HexagonalGameState.spec.ts
index 518e1a7f3..0bff905e3 100644
--- a/src/app/jscaip/tests/HexagonalGameState.spec.ts
+++ b/src/app/jscaip/tests/HexagonalGameState.spec.ts
@@ -1,11 +1,10 @@
 /* eslint-disable max-lines-per-function */
-import { Table, TableUtils } from 'src/app/utils/ArrayUtils';
+import { Table, TableUtils } from 'src/app/jscaip/TableUtils';
 import { Coord } from '../Coord';
 import { HexagonalGameState } from '../HexagonalGameState';
 import { HexaLine } from '../HexaLine';
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, Utils } from '@everyboard/lib';

 export class TestingHexagonalState extends HexagonalGameState<number> {

@@ -197,7 +196,7 @@ describe('HexagonalGameState', () => {
             expect(otherEntrance.equals(new Coord(6, 2))).toBeTrue();
         });
         it('should call logError and throw when unable to find an entrance', () => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             // Given an invalid hexagonal state, where no entrance can be found
             const invalidState: TestingHexagonalState = TestingHexagonalState.empty(0, 0, [], 0);

@@ -208,7 +207,7 @@ describe('HexagonalGameState', () => {
             const error: string = 'could not find a board entrance, board must be invalid';
             const data: JSONValue = { start: '(-1, 1)', line: line.toString() };
             expect(() => invalidState.getEntranceOnLine(line)).toThrowError(component + ': ' + error);
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith(component, error, data);
+            expect(Utils.logError).toHaveBeenCalledWith(component, error, data);
         });
     });
 });
diff --git a/src/app/jscaip/tests/Move.spec.ts b/src/app/jscaip/tests/Move.spec.ts
index 34d261fe3..089e25049 100644
--- a/src/app/jscaip/tests/Move.spec.ts
+++ b/src/app/jscaip/tests/Move.spec.ts
@@ -1,12 +1,10 @@
-import { Encoder } from 'src/app/utils/Encoder';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { Encoder, EncoderTestUtils, MGPOptional } from '@everyboard/lib';
 import { GameState } from '../GameState';
 import { GameNode } from '../AI/GameNode';
 import { Move } from '../Move';
 import { MoveGenerator } from '../AI/AI';
 import { SuperRules } from '../Rules';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class MoveTestUtils {

diff --git a/src/app/jscaip/tests/MoveCoord.spec.ts b/src/app/jscaip/tests/MoveCoord.spec.ts
index cc3515136..d11045ef5 100644
--- a/src/app/jscaip/tests/MoveCoord.spec.ts
+++ b/src/app/jscaip/tests/MoveCoord.spec.ts
@@ -1,8 +1,6 @@
-import { Encoder } from 'src/app/utils/Encoder';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { Encoder, EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { MoveCoord } from '../MoveCoord';
-import { MGPFallible } from 'src/app/utils/MGPFallible';

 class MyMoveCoord extends MoveCoord {
     public toString(): string {
diff --git a/src/app/jscaip/tests/MoveCoordToCoord.spec.ts b/src/app/jscaip/tests/MoveCoordToCoord.spec.ts
index 85e18c5c3..fb86a9fc5 100644
--- a/src/app/jscaip/tests/MoveCoordToCoord.spec.ts
+++ b/src/app/jscaip/tests/MoveCoordToCoord.spec.ts
@@ -1,6 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { EncoderTestUtils } from 'src/app/utils/tests/Encoder.spec';
+import { EncoderTestUtils, MGPFallible } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { Direction } from '../Direction';
 import { MoveCoordToCoord } from '../MoveCoordToCoord';
diff --git a/src/app/jscaip/tests/NInARowHelper.spec.ts b/src/app/jscaip/tests/NInARowHelper.spec.ts
index d8c1a08c3..e4f383cff 100644
--- a/src/app/jscaip/tests/NInARowHelper.spec.ts
+++ b/src/app/jscaip/tests/NInARowHelper.spec.ts
@@ -1,7 +1,7 @@
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { NInARowHelper } from '../NInARowHelper';
 import { PlayerOrNone } from '../Player';
-import { Table } from 'src/app/utils/ArrayUtils';
+import { Table } from 'src/app/jscaip/TableUtils';
 import { BoardValue } from '../AI/BoardValue';
 import { GameStateWithTable } from '../GameStateWithTable';
 import { GameStatus } from '../GameStatus';
diff --git a/src/app/jscaip/tests/PieceThreat.spec.ts b/src/app/jscaip/tests/PieceThreat.spec.ts
index 939af8510..21c933677 100644
--- a/src/app/jscaip/tests/PieceThreat.spec.ts
+++ b/src/app/jscaip/tests/PieceThreat.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPSet } from 'src/app/utils/MGPSet';
+import { MGPSet } from '@everyboard/lib';
 import { Coord } from '../Coord';
 import { PieceThreat, SandwichThreat } from '../PieceThreat';

diff --git a/src/app/jscaip/tests/Rules.spec.ts b/src/app/jscaip/tests/Rules.spec.ts
index 2a9b84303..177dfb9fa 100644
--- a/src/app/jscaip/tests/Rules.spec.ts
+++ b/src/app/jscaip/tests/Rules.spec.ts
@@ -3,12 +3,9 @@ import { P4Move } from 'src/app/games/p4/P4Move';
 import { GameNode } from '../AI/GameNode';
 import { Rules } from '../Rules';
 import { GameStateWithTable } from '../GameStateWithTable';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from '../../utils/MGPValidation';
 import { GameStatus } from '../GameStatus';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPFallible, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { RulesUtils } from './RulesUtils.spec';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { NoConfig, RulesConfig } from '../RulesConfigUtil';

 class AbstractState extends GameStateWithTable<number> {}
diff --git a/src/app/jscaip/tests/RulesConfigUtil.spec.ts b/src/app/jscaip/tests/RulesConfigUtil.spec.ts
index cf7fb23d8..eb9d5157a 100644
--- a/src/app/jscaip/tests/RulesConfigUtil.spec.ts
+++ b/src/app/jscaip/tests/RulesConfigUtil.spec.ts
@@ -2,7 +2,7 @@
 import { DefaultConfigDescription, NamedRulesConfig, RulesConfig } from '../RulesConfigUtil';
 import { MGPValidators } from 'src/app/utils/MGPValidator';
 import { NumberConfig, RulesConfigDescription } from 'src/app/components/wrapper-components/rules-configuration/RulesConfigDescription';
-import { TestUtils } from 'src/app/utils/tests/TestUtils.spec';
+import { TestUtils } from '@everyboard/lib';

 describe('RulesConfigUtil', () => {

diff --git a/src/app/jscaip/tests/RulesUtils.spec.ts b/src/app/jscaip/tests/RulesUtils.spec.ts
index b37bf95c5..90216325d 100644
--- a/src/app/jscaip/tests/RulesUtils.spec.ts
+++ b/src/app/jscaip/tests/RulesUtils.spec.ts
@@ -4,12 +4,9 @@ import { Move } from '../Move';
 import { Player } from '../Player';
 import { SuperRules } from '../Rules';
 import { GameState } from '../GameState';
-import { comparableEquals, isComparableObject } from 'src/app/utils/Comparable';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
 import { GameStatus } from '../GameStatus';
-import { JSONValue, Utils } from 'src/app/utils/utils';
+import { comparableEquals, isComparableObject, JSONValue, MGPFallible, MGPOptional, Utils } from '@everyboard/lib';
 import { EmptyRulesConfig, RulesConfig } from '../RulesConfigUtil';
-import { MGPOptional } from 'src/app/utils/MGPOptional';

 export class RulesUtils {

diff --git a/src/app/jscaip/tests/TableUtils.spec.ts b/src/app/jscaip/tests/TableUtils.spec.ts
new file mode 100644
index 000000000..24595d641
--- /dev/null
+++ b/src/app/jscaip/tests/TableUtils.spec.ts
@@ -0,0 +1,116 @@
+/* eslint-disable max-lines-per-function */
+import { Coord } from 'src/app/jscaip/Coord';
+import { Table, TableUtils, TableWithPossibleNegativeIndices } from '../TableUtils';
+import { ArrayUtils, MGPOptional } from '@everyboard/lib';
+
+describe('TableUtils', () => {
+
+    describe('equals', () => {
+
+        it('should notice different table sizes', () => {
+            const shortBoard: Table<number> = [[1]];
+            const longBoard: Table<number> = [[1], [2]];
+            expect(TableUtils.equals(shortBoard, longBoard)).toBeFalse();
+        });
+
+        it('should delegate sub-list comparaison to ArrayUtils and return false if it does', () => {
+            spyOn(ArrayUtils, 'equals').and.returnValue(false);
+            const table: Table<number> = [[1], [2]];
+            expect(TableUtils.equals(table, table)).toBeFalse();
+        });
+
+        it('should delegate sub-list comparaison to ArrayUtils and return true if ArrayUtils.compare always does', () => {
+            spyOn(ArrayUtils, 'equals').and.returnValue(true);
+            const table: Table<number> = [[1], [2]];
+            expect(TableUtils.equals(table, table)).toBeTrue();
+        });
+
+    });
+
+    describe('sum', () => {
+
+        it('should add all element of a number table', () => {
+            // Given any list of number
+            const table: number[][] = [
+                [11, 12, 13, 14, 15],
+                [20, 19, 18, 17, 16],
+            ];
+
+            // When calling TableUtils.sum
+            const sum: number = TableUtils.sum(table);
+
+            // Then it should be correct
+            expect(sum).toBe(155);
+        });
+
+    });
+
+    describe('add', () => {
+
+        it('should add elements of same index of a number table', () => {
+            // Given two element
+            const left: Table<number> = [
+                [+1, +2, +3],
+                [+4, +2, +6],
+                [-1, -2, -3],
+            ];
+            const right: Table<number> = [
+                [+1, -2, +9],
+                [-2, +1, +1],
+                [-5, -1, +3],
+            ];
+
+            // When adding them
+            const sum: Table<number> = TableUtils.add(left, right);
+
+            // Then the result should be the sum of same-coorded-place
+            expect(sum).toEqual([
+                [2, 0, 12],
+                [2, 3, 7],
+                [-6, -3, 0],
+            ]);
+        });
+
+    });
+
+});
+
+describe('Table2DWithPossibleNegativeIndices', () => {
+
+    it('should return empty when accessing a non existing element', () => {
+        // Given a table
+        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
+        // When getting an element that does not exist
+        const element: MGPOptional<number> = table.get(new Coord(0, 0));
+        // Then it should be empty
+        expect(element.isAbsent()).toBeTrue();
+    });
+
+    it('should return the accessed element after it has been set', () => {
+        // Given a table with a set element
+        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
+        const somePiece: number = 42; // dummy value to represent something stored in the table
+        table.set(new Coord(1, 2), somePiece);
+        // When getting the element
+        const element: MGPOptional<number> = table.get(new Coord(1, 2));
+        // Then the element exists and is the same
+        expect(element.isPresent()).toBeTrue();
+        expect(element.get()).toBe(somePiece);
+    });
+
+    it('should iterate over elements in order', () => {
+        // Given a table with multiple elements
+        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
+        table.set(new Coord(0, 0), 1);
+        table.set(new Coord(0, 1), 2);
+        table.set(new Coord(1, 1), 3);
+        // When iterating over the elements
+        const seen: number[] = [];
+        for (const cell of table) {
+            seen.push(cell.content);
+        }
+        // Then it should have seen ys from low to high, and xs from low to high
+        expect(seen).toEqual([1, 2, 3]);
+    });
+
+});
diff --git a/src/app/services/ActiveUsersService.ts b/src/app/services/ActiveUsersService.ts
index cee2d739f..919a2a4ad 100644
--- a/src/app/services/ActiveUsersService.ts
+++ b/src/app/services/ActiveUsersService.ts
@@ -2,7 +2,7 @@ import { Injectable } from '@angular/core';
 import { User, UserDocument } from '../domain/User';
 import { UserDAO } from '../dao/UserDAO';
 import { FirestoreCollectionObserver } from '../dao/FirestoreCollectionObserver';
-import { Debug, Utils } from 'src/app/utils/utils';
+import { Debug, Utils } from '@everyboard/lib';
 import { Subscription } from 'rxjs';
 import { Timestamp } from 'firebase/firestore';

diff --git a/src/app/services/ChatService.ts b/src/app/services/ChatService.ts
index 2e25d5e86..f6a293d6b 100644
--- a/src/app/services/ChatService.ts
+++ b/src/app/services/ChatService.ts
@@ -1,13 +1,13 @@
 import { Injectable } from '@angular/core';
 import { ChatDAO } from '../dao/ChatDAO';
 import { Message, MessageDocument } from '../domain/Message';
-import { Debug } from 'src/app/utils/utils';
-import { MGPValidation } from '../utils/MGPValidation';
-import { Localized } from '../utils/LocaleUtils';
+import { MGPValidation } from '@everyboard/lib';
 import { Subscription } from 'rxjs';
 import { serverTimestamp } from 'firebase/firestore';
 import { FirestoreCollectionObserver } from '../dao/FirestoreCollectionObserver';
 import { MinimalUser } from '../domain/MinimalUser';
+import { Localized } from '../utils/LocaleUtils';
+import { Debug } from '../utils/Debug';

 export class ChatMessages {
     public static readonly CANNOT_SEND_MESSAGE: Localized = () => $localize`You're not allowed to send a message here.`;
diff --git a/src/app/services/ConfigRoomService.ts b/src/app/services/ConfigRoomService.ts
index 15f585315..66eb6dd0c 100644
--- a/src/app/services/ConfigRoomService.ts
+++ b/src/app/services/ConfigRoomService.ts
@@ -1,16 +1,15 @@
 import { Injectable } from '@angular/core';
 import { FirstPlayer, ConfigRoom, PartStatus, PartType } from '../domain/ConfigRoom';
 import { ConfigRoomDAO } from '../dao/ConfigRoomDAO';
-import { Debug, FirestoreJSONObject } from 'src/app/utils/utils';
-import { MGPOptional } from '../utils/MGPOptional';
+import { FirestoreJSONObject, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { Subscription } from 'rxjs';
-import { MGPValidation } from '../utils/MGPValidation';
 import { MinimalUser } from '../domain/MinimalUser';
-import { Localized } from '../utils/LocaleUtils';
 import { ConnectedUserService } from './ConnectedUserService';
 import { FirestoreCollectionObserver } from '../dao/FirestoreCollectionObserver';
 import { FirestoreDocument, IFirestoreDAO } from '../dao/FirestoreDAO';
 import { RulesConfig, RulesConfigUtils } from '../jscaip/RulesConfigUtil';
+import { Debug } from '../utils/Debug';
+import { Localized } from '../utils/LocaleUtils';

 @Injectable({
     providedIn: 'root',
diff --git a/src/app/services/ConnectedUserService.ts b/src/app/services/ConnectedUserService.ts
index 47ccd9735..70929af87 100644
--- a/src/app/services/ConnectedUserService.ts
+++ b/src/app/services/ConnectedUserService.ts
@@ -1,19 +1,15 @@
-import { FirebaseError } from '@firebase/app';
-import * as FireAuth from '@firebase/auth';
+import { FirebaseError } from '@angular/fire/app';
+import * as FireAuth from '@angular/fire/auth';
 import { Injectable, OnDestroy } from '@angular/core';
 import { Observable, ReplaySubject, Subscription } from 'rxjs';

-import { Debug, Utils } from 'src/app/utils/utils';
-import { assert } from 'src/app/utils/assert';
-import { MGPValidation } from '../utils/MGPValidation';
-import { MGPFallible } from '../utils/MGPFallible';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { UserDAO } from '../dao/UserDAO';
 import { User } from '../domain/User';
-import { MGPOptional } from '../utils/MGPOptional';
-import { ErrorLoggerService } from './ErrorLoggerService';
 import { MinimalUser } from '../domain/MinimalUser';
-import { Localized } from '../utils/LocaleUtils';
 import { UserService } from './UserService';
+import { Debug } from '../utils/Debug';
+import { Localized } from '../utils/LocaleUtils';

 export class GameActionFailure {

@@ -113,12 +109,11 @@ export class ConnectedUserService implements OnDestroy {
     private readonly userRS: ReplaySubject<AuthUser>;
     private readonly userObs: Observable<AuthUser>;
     private userSubscription: Subscription = new Subscription();
-    public readonly auth: FireAuth.Auth;

     public constructor(private readonly userDAO: UserDAO,
-                       private readonly userService: UserService)
+                       private readonly userService: UserService,
+                       private readonly auth: FireAuth.Auth)
     {
-        this.auth = FireAuth.getAuth();
         this.userRS = new ReplaySubject<AuthUser>(1);
         this.userObs = this.userRS.asObservable();
         this.authSubscription =
@@ -129,7 +124,7 @@ export class ConnectedUserService implements OnDestroy {
                     this.userRS.next(AuthUser.NOT_CONNECTED);
                     this.user = MGPOptional.empty();
                 } else { // new user logged in
-                    assert(this.user.isAbsent(), 'ConnectedUserService received a double update for an user, this is unexpected');
+                    Utils.assert(this.user.isAbsent(), 'ConnectedUserService received a double update for an user, this is unexpected');
                     this.userSubscription =
                         this.userDAO.subscribeToChanges(user.uid, (docOpt: MGPOptional<User>) => {
                             if (docOpt.isPresent()) {
@@ -224,7 +219,7 @@ export class ConnectedUserService implements OnDestroy {
             case 'auth/popup-blocked':
                 return $localize`The authentication popup was blocked. Try again after disabling popup blocking.`;
             default:
-                ErrorLoggerService.logError('ConnectedUserService', 'Unsupported firebase error', { errorCode: error.code, errorMessage: error.message });
+                Utils.logError('ConnectedUserService', 'Unsupported firebase error', { errorCode: error.code, errorMessage: error.message });
                 return error.message;
         }
     }
@@ -233,7 +228,7 @@ export class ConnectedUserService implements OnDestroy {
         if (user.isPresent()) {
             if (this.emailVerified(user.get())) {
                 // This should not be reachable from a component
-                return ErrorLoggerService.logError('ConnectedUserService', 'Verified users should not ask email verification after being verified');
+                return Utils.logError('ConnectedUserService', 'Verified users should not ask email verification after being verified');
             }
             try {
                 await Auth.sendEmailVerification(user.get());
@@ -243,7 +238,7 @@ export class ConnectedUserService implements OnDestroy {
             }
         } else {
             // This should not be reachable from a component
-            return ErrorLoggerService.logError('ConnectedUserService', 'Unlogged users cannot request for email verification');
+            return Utils.logError('ConnectedUserService', 'Unlogged users cannot request for email verification');
         }
     }
     /**
@@ -336,7 +331,7 @@ export class ConnectedUserService implements OnDestroy {
         await currentUser.reload();
     }
     public sendPresenceToken(): Promise<void> {
-        assert(this.user.isPresent(), 'Should not call sendPresenceToken when not connected');
+        Utils.assert(this.user.isPresent(), 'Should not call sendPresenceToken when not connected');
         return this.userService.updatePresenceToken(this.user.get().id);
     }
     public ngOnDestroy(): void {
diff --git a/src/app/services/CurrentGameService.ts b/src/app/services/CurrentGameService.ts
index 16d2cd2a3..239217b02 100644
--- a/src/app/services/CurrentGameService.ts
+++ b/src/app/services/CurrentGameService.ts
@@ -2,14 +2,11 @@ import { Injectable, OnDestroy } from '@angular/core';
 import { Observable, ReplaySubject, Subscription } from 'rxjs';

 import { CurrentGame, User, UserRoleInPart } from '../domain/User';
-import { MGPOptional } from '../utils/MGPOptional';
+import { MGPMap, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { UserDAO } from '../dao/UserDAO';
 import { AuthUser, ConnectedUserService, GameActionFailure } from './ConnectedUserService';
-import { MGPValidation } from '../utils/MGPValidation';
-import { assert } from '../utils/assert';
-import { MGPMap } from '../utils/MGPMap';
-import { Localized } from '../utils/LocaleUtils';
 import { UserService } from './UserService';
+import { Localized } from '../utils/LocaleUtils';

 @Injectable({
     providedIn: 'root',
@@ -50,7 +47,7 @@ export class CurrentGameService implements OnDestroy {
             // We need to subscribe to any change to the user's observed part
             this.userSubscription =
                 this.userService.observeUserOnServer(user.id, (docOpt: MGPOptional<User>) => {
-                    assert(docOpt.isPresent(), 'Observing part service expected user to already have a document!');
+                    Utils.assert(docOpt.isPresent(), 'Observing part service expected user to already have a document!');
                     const doc: User = docOpt.get();
                     this.onCurrentGameUpdate(doc.currentGame);
                 });
@@ -73,7 +70,7 @@ export class CurrentGameService implements OnDestroy {
         }
     }
     public updateCurrentGame(currentGame: Partial<CurrentGame>): Promise<void> {
-        assert(this.connectedUserService.user.isPresent(), 'Should not call updateCurrentGame when not connected');
+        Utils.assert(this.connectedUserService.user.isPresent(), 'Should not call updateCurrentGame when not connected');
         if (this.currentGame.isPresent()) {
             const oldCurrentGame: CurrentGame = this.currentGame.get();
             const mergedCurrentGame: CurrentGame = { ...oldCurrentGame, ...currentGame };
@@ -86,14 +83,14 @@ export class CurrentGameService implements OnDestroy {
             };
             const keys: string[] = Object.keys(fakeCurrentGame);
             for (const key of keys) {
-                assert(currentGame[key] != null, 'field ' + key + ' should be set before updating currentGame');
+                Utils.assert(currentGame[key] != null, 'field ' + key + ' should be set before updating currentGame');
             }
             // Here, we know that currentGame is not partial
             return this.userDAO.update(this.connectedUserService.user.get().id, { currentGame });
         }
     }
     public removeCurrentGame(): Promise<void> {
-        assert(this.connectedUserService.user.isPresent(), 'Should not call removeCurrentGame when not connected');
+        Utils.assert(this.connectedUserService.user.isPresent(), 'Should not call removeCurrentGame when not connected');
         return this.userDAO.update(this.connectedUserService.user.get().id, { currentGame: null });
     }
     public subscribeToCurrentGame(callback: (optCurrentGame: MGPOptional<CurrentGame>) => void): Subscription {
diff --git a/src/app/services/ErrorLoggerService.ts b/src/app/services/ErrorLoggerService.ts
index 825ea582f..852f1a0e4 100644
--- a/src/app/services/ErrorLoggerService.ts
+++ b/src/app/services/ErrorLoggerService.ts
@@ -3,9 +3,7 @@ import { Router } from '@angular/router';
 import { serverTimestamp } from 'firebase/firestore';
 import { ErrorDAO, ErrorDocument, MGPError } from '../dao/ErrorDAO';
 import { FirestoreDocument } from '../dao/FirestoreDAO';
-import { MGPOptional } from '../utils/MGPOptional';
-import { MGPValidation } from '../utils/MGPValidation';
-import { JSONValue } from '../utils/utils';
+import { JSONValue, MGPOptional, MGPValidation } from '@everyboard/lib';
 import { MessageDisplayer } from './MessageDisplayer';

 @Injectable({
@@ -15,9 +13,8 @@ export class ErrorLoggerService {

     private static singleton: MGPOptional<ErrorLoggerService> = MGPOptional.empty();

-    public static logErrorAndFail(component: string, message: string, data?: JSONValue): never {
-        ErrorLoggerService.logError(component, message, data);
-        throw new Error(`${component}: ${message} (extra data: ${JSON.stringify(data)})`);
+    public static setSingletonInstance(service: ErrorLoggerService): void {
+        ErrorLoggerService.singleton = MGPOptional.of(service);
     }
     public static logError(component: string, message: string, data?: JSONValue): MGPValidation {
         if (this.singleton.isAbsent()) {
@@ -31,12 +28,11 @@ export class ErrorLoggerService {
         this.singleton.get().logError(component, message, data);
         return MGPValidation.failure(component + ': ' + message);
     }
-
-    private constructor(private readonly errorDAO: ErrorDAO,
-                        private readonly router: Router,
-                        private readonly messageDisplayer: MessageDisplayer)
+    public constructor(private readonly errorDAO: ErrorDAO,
+                       private readonly router: Router,
+                       private readonly messageDisplayer: MessageDisplayer)
     {
-        ErrorLoggerService.singleton = MGPOptional.of(this);
+        ErrorLoggerService.setSingletonInstance(this);
     }
     public findErrors(component: string, route: string, message: string, data?: JSONValue): Promise<ErrorDocument[]> {
         if (data === undefined) {
diff --git a/src/app/services/GameEventService.ts b/src/app/services/GameEventService.ts
index 2dc3e0c99..95504ddeb 100644
--- a/src/app/services/GameEventService.ts
+++ b/src/app/services/GameEventService.ts
@@ -5,7 +5,7 @@ import { FirestoreCollectionObserver } from '../dao/FirestoreCollectionObserver'
 import { FirestoreDocument, IFirestoreDAO } from '../dao/FirestoreDAO';
 import { PartDAO } from '../dao/PartDAO';
 import { Action, GameEvent, Reply, RequestType } from '../domain/Part';
-import { JSONValue } from '../utils/utils';
+import { JSONValue } from '@everyboard/lib';
 import { MinimalUser } from '../domain/MinimalUser';

 @Injectable({
diff --git a/src/app/services/GameService.ts b/src/app/services/GameService.ts
index e1dea7914..15cb32442 100644
--- a/src/app/services/GameService.ts
+++ b/src/app/services/GameService.ts
@@ -1,13 +1,11 @@
 import { Injectable } from '@angular/core';
+import { MGPValidation, MGPOptional, Utils } from '@everyboard/lib';
 import { PartDAO } from '../dao/PartDAO';
 import { MGPResult, Part, PartDocument } from '../domain/Part';
 import { FirstPlayer, ConfigRoom, PartStatus } from '../domain/ConfigRoom';
 import { ConfigRoomService } from './ConfigRoomService';
 import { ChatService } from './ChatService';
 import { Player } from 'src/app/jscaip/Player';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { Debug, Utils } from 'src/app/utils/utils';
-import { MGPOptional } from '../utils/MGPOptional';
 import { Subscription } from 'rxjs';
 import { serverTimestamp } from 'firebase/firestore';
 import { MinimalUser } from '../domain/MinimalUser';
@@ -15,6 +13,7 @@ import { ConnectedUserService } from './ConnectedUserService';
 import { FirestoreTime } from '../domain/Time';
 import { GameEventService } from './GameEventService';
 import { PlayerNumberMap } from '../jscaip/PlayerMap';
+import { Debug } from '../utils/Debug';

 export interface StartingPartConfig extends Partial<Part> {
     playerZero: MinimalUser,
diff --git a/src/app/services/ThemeService.ts b/src/app/services/ThemeService.ts
index c1ffbd833..ccede7e60 100644
--- a/src/app/services/ThemeService.ts
+++ b/src/app/services/ThemeService.ts
@@ -1,7 +1,7 @@
 import { DOCUMENT } from '@angular/common';
 import { Inject, Injectable } from '@angular/core';
-import { MGPOptional } from '../utils/MGPOptional';
 import { UserSettingsService } from './UserSettingsService';
+import { MGPOptional } from '@everyboard/lib';

 type Theme = 'dark' | 'light';

diff --git a/src/app/services/UserService.ts b/src/app/services/UserService.ts
index db33a9472..f479d30a5 100644
--- a/src/app/services/UserService.ts
+++ b/src/app/services/UserService.ts
@@ -2,11 +2,10 @@ import { Injectable } from '@angular/core';
 import { Subscription } from 'rxjs';
 import { UserDAO } from '../dao/UserDAO';
 import { User } from '../domain/User';
-import { MGPOptional } from '../utils/MGPOptional';
 import { FirestoreTime } from '../domain/Time';
-import { assert } from '../utils/assert';
 import { FirestoreDocument } from '../dao/FirestoreDAO';
 import { serverTimestamp, Timestamp } from 'firebase/firestore';
+import { Utils, MGPOptional } from '@everyboard/lib';

 /**
   * The aim of this service is to:
@@ -52,7 +51,7 @@ export class UserService {
             return MGPOptional.empty();
         } else {
             const lastUpdateTime: FirestoreTime | undefined = user.get().lastUpdateTime;
-            assert(lastUpdateTime != null, 'should not receive a lastUpdateTime equal to null');
+            Utils.assert(lastUpdateTime != null, 'should not receive a lastUpdateTime equal to null');
             return MGPOptional.of(lastUpdateTime as FirestoreTime);
         }
     }
diff --git a/src/app/services/UserSettingsService.ts b/src/app/services/UserSettingsService.ts
index 4d8206deb..4e6cc5ae6 100644
--- a/src/app/services/UserSettingsService.ts
+++ b/src/app/services/UserSettingsService.ts
@@ -1,6 +1,6 @@
 import { Injectable } from '@angular/core';
+import { MGPOptional } from '@everyboard/lib';
 import { LocaleUtils } from '../utils/LocaleUtils';
-import { MGPOptional } from '../utils/MGPOptional';

 @Injectable({
     providedIn: 'root',
diff --git a/src/app/services/tests/ActivePartsService.spec.ts b/src/app/services/tests/ActivePartsService.spec.ts
index cbb2e48f1..f048fb623 100644
--- a/src/app/services/tests/ActivePartsService.spec.ts
+++ b/src/app/services/tests/ActivePartsService.spec.ts
@@ -4,7 +4,7 @@ import { PartDAO } from 'src/app/dao/PartDAO';
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { MGPResult, Part, PartDocument } from 'src/app/domain/Part';
 import { PartDAOMock } from 'src/app/dao/tests/PartDAOMock.spec';
-import { Utils } from 'src/app/utils/utils';
+import { Utils } from '@everyboard/lib';
 import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
 import { FirestoreCollectionObserver } from 'src/app/dao/FirestoreCollectionObserver';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
diff --git a/src/app/services/tests/ChatService.spec.ts b/src/app/services/tests/ChatService.spec.ts
index 3c4a1ceef..f2d1fb8a2 100644
--- a/src/app/services/tests/ChatService.spec.ts
+++ b/src/app/services/tests/ChatService.spec.ts
@@ -4,7 +4,7 @@ import { ChatDAO } from 'src/app/dao/ChatDAO';
 import { ChatDAOMock } from 'src/app/dao/tests/ChatDAOMock.spec';
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPValidation } from '@everyboard/lib';
 import { Message } from 'src/app/domain/Message';
 import { serverTimestamp } from 'firebase/firestore';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
diff --git a/src/app/services/tests/ConfigRoomService.spec.ts b/src/app/services/tests/ConfigRoomService.spec.ts
index f6b512b81..d3a60d49d 100644
--- a/src/app/services/tests/ConfigRoomService.spec.ts
+++ b/src/app/services/tests/ConfigRoomService.spec.ts
@@ -5,18 +5,16 @@ import { ConfigRoomDAO } from 'src/app/dao/ConfigRoomDAO';
 import { ConfigRoom, PartStatus } from 'src/app/domain/ConfigRoom';
 import { ConfigRoomDAOMock } from 'src/app/dao/tests/ConfigRoomDAOMock.spec';
 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { MinimalUser } from 'src/app/domain/MinimalUser';
 import { ConnectedUserService } from '../ConnectedUserService';
 import { ConnectedUserServiceMock } from './ConnectedUserService.spec';
 import { RouterTestingModule } from '@angular/router/testing';
-import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';
 import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
 import { ErrorLoggerServiceMock } from './ErrorLoggerServiceMock.spec';
-import { ErrorLoggerService } from '../ErrorLoggerService';
 import { RulesConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
+import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';

 describe('ConfigRoomService', () => {

@@ -192,7 +190,7 @@ describe('ConfigRoomService', () => {
         }));
         it('should throw when called by creator', fakeAsync(async() => {
             // Given a config room that we are observing but that we are creating
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             await configRoomDAO.set('configRoomId', ConfigRoomMocks.getInitial(MGPOptional.empty()));
             ConnectedUserServiceMock.setUser(UserMocks.CREATOR_AUTH_USER);
             configRoomService.subscribeToChanges('configRoomId', (doc: MGPOptional<ConfigRoom>): void => {});
@@ -206,7 +204,7 @@ describe('ConfigRoomService', () => {
         }));
         it('should throw when called by user absent from the room', fakeAsync(async() => {
             // Given a config room that we are not observing or creating and that we did not joined
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             await configRoomDAO.set('configRoomId', ConfigRoomMocks.getInitial(MGPOptional.empty()));
             ConnectedUserServiceMock.setUser(UserMocks.OTHER_OPPONENT_AUTH_USER);
             configRoomService.subscribeToChanges('configRoomId', (doc: MGPOptional<ConfigRoom>): void => {});
diff --git a/src/app/services/tests/ConfigRoomMock.spec.ts b/src/app/services/tests/ConfigRoomServiceMock.spec.ts
similarity index 97%
rename from src/app/services/tests/ConfigRoomMock.spec.ts
rename to src/app/services/tests/ConfigRoomServiceMock.spec.ts
index 35a803e98..94ba6072d 100644
--- a/src/app/services/tests/ConfigRoomMock.spec.ts
+++ b/src/app/services/tests/ConfigRoomServiceMock.spec.ts
@@ -1,6 +1,6 @@
 /* eslint-disable max-lines-per-function */
 import { FirstPlayer, ConfigRoom, ConfigRoomDocument, PartStatus, PartType } from 'src/app/domain/ConfigRoom';
-import { Debug } from 'src/app/utils/utils';
+import { Debug } from 'src/app/utils/Debug';

 @Debug.log
 export class ConfigRoomServiceMock {
diff --git a/src/app/services/tests/ConnectedUserService.spec.ts b/src/app/services/tests/ConnectedUserService.spec.ts
index 3a2427d26..d803e1aa1 100644
--- a/src/app/services/tests/ConnectedUserService.spec.ts
+++ b/src/app/services/tests/ConnectedUserService.spec.ts
@@ -2,17 +2,13 @@
 import { ReplaySubject, Subscription } from 'rxjs';
 import { fakeAsync, TestBed } from '@angular/core/testing';
 import { Injectable } from '@angular/core';
-import { FirebaseError } from '@firebase/app';
-import * as FireAuth from '@firebase/auth';
+import { FirebaseError } from '@angular/fire/app';
+import * as FireAuth from '@angular/fire/auth';
 import { serverTimestamp } from 'firebase/firestore';

-import { ConnectedUserService, AuthUser, Auth } from '../ConnectedUserService';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { MGPFallible } from 'src/app/utils/MGPFallible';
-import { Utils } from 'src/app/utils/utils';
+import { Auth, ConnectedUserService, AuthUser } from '../ConnectedUserService';
+import { MGPFallible, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { UserDAO } from 'src/app/dao/UserDAO';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { ErrorLoggerService } from '../ErrorLoggerService';
 import { ErrorLoggerServiceMock } from './ErrorLoggerServiceMock.spec';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { UserService } from '../UserService';
@@ -106,11 +102,12 @@ function setupAuthTestModule(): Promise<unknown> {
 export async function createConnectedGoogleUser(email: string, username?: string): Promise<FireAuth.User> {
     const userDAO: UserDAO = TestBed.inject(UserDAO);
     // Sign out current user in case there is one
-    await FireAuth.signOut(FireAuth.getAuth());
+    await FireAuth.signOut(TestBed.inject(FireAuth.Auth));
     // Create a new google user
     const token: string = '{"sub": "' + email + '", "email": "' + email + '", "email_verified": true}';
     const credential: FireAuth.UserCredential =
-        await FireAuth.signInWithCredential(FireAuth.getAuth(), FireAuth.GoogleAuthProvider.credential(token));
+        await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
+                                            FireAuth.GoogleAuthProvider.credential(token));
     await userDAO.set(credential.user.uid, { verified: false, currentGame: null });
     if (username != null) {
         // This needs to happen in multiple updates to match the security rules
@@ -127,13 +124,13 @@ export async function createConnectedUser(email: string, username: string): Prom

 export async function createDisconnectedUser(email: string, username: string): Promise<MinimalUser> {
     const user: FireAuth.User = await createConnectedGoogleUser(email, username);
-    await FireAuth.signOut(FireAuth.getAuth());
+    await FireAuth.signOut(TestBed.inject(FireAuth.Auth));
     return { id: user.uid, name: username };
 }

 export async function reconnectUser(email: string): Promise<void> {
     const token: string = '{"sub": "' + email + '", "email": "' + email + '", "email_verified": true}';
-    await FireAuth.signInWithCredential(FireAuth.getAuth(),
+    await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                         FireAuth.GoogleAuthProvider.credential(token));
 }

@@ -141,7 +138,7 @@ export async function createUnverifiedUser(email: string, username: string): Pro
     const userDAO: UserDAO = TestBed.inject(UserDAO);
     const token: string = '{"sub": "' + email + '", "email": "' + email + '", "email_verified": false}';
     const credential: FireAuth.UserCredential =
-        await FireAuth.signInWithCredential(FireAuth.getAuth(),
+        await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                             FireAuth.GoogleAuthProvider.credential(token));
     await userDAO.set(credential.user.uid, { verified: false, currentGame: null });
     await userDAO.update(credential.user.uid, { username });
@@ -149,7 +146,7 @@ export async function createUnverifiedUser(email: string, username: string): Pro
 }

 export function signOut(): Promise<void> {
-    return FireAuth.getAuth().signOut();
+    return TestBed.inject(FireAuth.Auth).signOut();
 }

 export async function createDisconnectedGoogleUser(email: string, username?: string): Promise<FireAuth.User> {
@@ -173,7 +170,7 @@ describe('ConnectedUserService', () => {
     beforeEach(async() => {
         await setupAuthTestModule();
         connectedUserService = TestBed.inject(ConnectedUserService);
-        auth = FireAuth.getAuth();
+        auth = TestBed.inject(FireAuth.Auth);
         userDAO = TestBed.inject(UserDAO);
         alreadyDestroyed = false;
     });
@@ -288,7 +285,7 @@ describe('ConnectedUserService', () => {
         });
         it('should fail and log the error if there is no connected user', async() => {
             // Given nothing
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             // When the email verification is requested
             const result: MGPValidation = await connectedUserService.sendEmailVerification();
@@ -296,12 +293,12 @@ describe('ConnectedUserService', () => {
             // Then it fails because this is not a valid user interaction
             expect(result.isFailure()).toBeTrue();
             expect(result.getReason()).toBe('ConnectedUserService: Unlogged users cannot request for email verification');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('ConnectedUserService', 'Unlogged users cannot request for email verification');
+            expect(Utils.logError).toHaveBeenCalledWith('ConnectedUserService', 'Unlogged users cannot request for email verification');
         });
         it('should fail if the user already verified its email', async() => {
             // Given a connected user that is registered and verified, for example through a google account
             await createConnectedGoogleUser('foo@bar.com');
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             // When the email verification is requested
             const result: MGPValidation = await connectedUserService.sendEmailVerification();
@@ -309,7 +306,7 @@ describe('ConnectedUserService', () => {
             // Then it fails because this is not a valid user interaction
             expect(result.isFailure()).toBeTrue();
             expect(result.getReason()).toBe('ConnectedUserService: Verified users should not ask email verification after being verified');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('ConnectedUserService', 'Verified users should not ask email verification after being verified');
+            expect(Utils.logError).toHaveBeenCalledWith('ConnectedUserService', 'Verified users should not ask email verification after being verified');
         });
         it('should fail if there is a genuine error in the email verification process from firebase', async() => {
             // Given a user that just registered and hence is not verified
@@ -390,7 +387,7 @@ describe('ConnectedUserService', () => {
             spyOn(connectedUserService, 'createUser').and.callThrough();
             const token: string = '{"sub": "' + email + '", "email": "' + email + '", "email_verified": true}';
             const credential: FireAuth.UserCredential =
-                await FireAuth.signInWithCredential(FireAuth.getAuth(),
+                await FireAuth.signInWithCredential(TestBed.inject(FireAuth.Auth),
                                                     FireAuth.GoogleAuthProvider.credential(token));
             const user: FireAuth.User = credential.user;
             spyOn(Auth, 'signInWithPopup').and.resolveTo(user);
@@ -466,7 +463,7 @@ describe('ConnectedUserService', () => {
     });
     describe('mapFirebaseError', () => {
         it('should call logError when encountering an unsupported error', async() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             // Given an unsupported error
             const error: FirebaseError = new FirebaseError('auth/unknown-error', 'Error message');
@@ -475,10 +472,10 @@ describe('ConnectedUserService', () => {
             connectedUserService.mapFirebaseError(error);

             // Then logError is called
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'auth/unknown-error', errorMessage: 'Error message' });
+            expect(Utils.logError).toHaveBeenCalledWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'auth/unknown-error', errorMessage: 'Error message' });
         });
         it('should map the errors encountered in the wild but that we cannot reproduce in a test environment', async() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             const errorCodes: string[] = [
                 'auth/too-many-requests',
                 'auth/popup-closed-by-user',
@@ -493,7 +490,7 @@ describe('ConnectedUserService', () => {
                 connectedUserService.mapFirebaseError(error);

                 // Then it is properly handled
-                expect(ErrorLoggerService.logError).not.toHaveBeenCalled();
+                expect(Utils.logError).not.toHaveBeenCalled();
             }
         });
     });
@@ -511,7 +508,7 @@ describe('ConnectedUserService', () => {
             expect(result.isSuccess()).toBeTrue();
         });
         it('should not throw upon failure', async() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);

             // When the username is set but fails
             const error: FirebaseError = new FirebaseError('unknown/error', 'Error');
@@ -521,7 +518,7 @@ describe('ConnectedUserService', () => {
             // Then it fails
             expect(result.isFailure()).toBeTrue();
             expect(result.getReason()).toEqual('Error');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'unknown/error', errorMessage: 'Error' });
+            expect(Utils.logError).toHaveBeenCalledOnceWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'unknown/error', errorMessage: 'Error' });
         });
         it('should reject empty usernames', async() => {
             // When the username is set to an empty username
@@ -556,7 +553,7 @@ describe('ConnectedUserService', () => {
             expect(Utils.getNonNullable(auth.currentUser).photoURL).toEqual(photoURL);
         });
         it('should not throw upon failure', async() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             // Given a registered and logged in user
             await createConnectedGoogleUser('foo@bar.com');

@@ -568,7 +565,7 @@ describe('ConnectedUserService', () => {
             // Then it fails and logs the error
             expect(result.isFailure()).toBeTrue();
             expect(result.getReason()).toEqual('Error');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledOnceWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'unknown/error', errorMessage: 'Error' });
+            expect(Utils.logError).toHaveBeenCalledOnceWith('ConnectedUserService', 'Unsupported firebase error', { errorCode: 'unknown/error', errorMessage: 'Error' });
         });
     });
     describe('sendPasswordResetEmail', () => {
@@ -610,7 +607,7 @@ describe('ConnectedUserService', () => {
     });
     describe('sendPresenceToken', () => {
         it('should throw when asking to send presence token while no user is logged', fakeAsync(() => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
             const expectedError: string = 'Assertion failure: Should not call sendPresenceToken when not connected';
             expect(() => connectedUserService.sendPresenceToken()).toThrowError(expectedError);
         }));
diff --git a/src/app/services/tests/CurrentGameService.spec.ts b/src/app/services/tests/CurrentGameService.spec.ts
index 0e0214ca2..341272977 100644
--- a/src/app/services/tests/CurrentGameService.spec.ts
+++ b/src/app/services/tests/CurrentGameService.spec.ts
@@ -4,18 +4,16 @@ import { ReplaySubject, Subscription } from 'rxjs';
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { CurrentGame } from 'src/app/domain/User';
 import { CurrentGameService } from '../CurrentGameService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { MGPValidation } from 'src/app/utils/MGPValidation';
+import { MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { AuthUser, ConnectedUserService, GameActionFailure } from '../ConnectedUserService';
 import { UserDAO } from 'src/app/dao/UserDAO';
 import { ConnectedUserServiceMock } from './ConnectedUserService.spec';
 import { UserDAOMock } from 'src/app/dao/tests/UserDAOMock.spec';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
-import { ErrorLoggerService } from '../ErrorLoggerService';
 import { ErrorLoggerServiceMock } from './ErrorLoggerServiceMock.spec';
 import { CurrentGameMocks } from 'src/app/domain/mocks/CurrentGameMocks.spec';
-import { prepareUnsubscribeCheck } from 'src/app/utils/tests/TestUtils.spec';
 import { UserService } from '../UserService';
+import { prepareUnsubscribeCheck } from 'src/app/utils/tests/TestUtils.spec';

 export class CurrentGameServiceMock {

@@ -200,7 +198,7 @@ describe('CurrentGameService', () => {
         describe('updateCurrentGame', () => {
             it('should throw when called whilst no user is logged', fakeAsync(async() => {
                 // Given a moment at which service is not observing any user (not even AuthUser.NOT_CONNECTED)
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
                 const expectedError: string = 'Assertion failure: Should not call updateCurrentGame when not connected';

                 // When calling updateCurrentGame
@@ -250,7 +248,7 @@ describe('CurrentGameService', () => {
                 ConnectedUserServiceMock.setUser(UserMocks.CREATOR_AUTH_USER);

                 // When updating with only one field the part
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
                 const expectedError: string = 'Assertion failure: field role should be set before updating currentGame';

                 // Then the userDAO should update the connected user doc
@@ -265,7 +263,7 @@ describe('CurrentGameService', () => {
                 ConnectedUserServiceMock.setUser(UserMocks.CREATOR_AUTH_USER);

                 // When updating with only one field the part
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
                 const expectedError: string = 'Assertion failure: field typeGame should be set before updating currentGame';

                 // Then it should throw
@@ -279,7 +277,7 @@ describe('CurrentGameService', () => {
         describe('removeCurrentGame', () => {
             it('should throw when asking to remove whilst no user is logged', fakeAsync(async() => {
                 // Given a moment at which service is not observing any user (not even AuthUser.NOT_CONNECTED)
-                spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+                spyOn(Utils, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
                 const expectedError: string = 'Assertion failure: Should not call removeCurrentGame when not connected';

                 // When calling updateCurrentGame
diff --git a/src/app/services/tests/ErrorLoggerService.spec.ts b/src/app/services/tests/ErrorLoggerService.spec.ts
index aac9001a0..30214ea31 100644
--- a/src/app/services/tests/ErrorLoggerService.spec.ts
+++ b/src/app/services/tests/ErrorLoggerService.spec.ts
@@ -2,15 +2,14 @@
 import { CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { FirestoreDocument } from 'src/app/dao/FirestoreDAO';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
-import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPOptional } from '@everyboard/lib';
 import { ErrorLoggerService } from '../ErrorLoggerService';
 import { RouterTestingModule } from '@angular/router/testing';
 import { serverTimestamp } from 'firebase/firestore';
 import { ErrorDAO, MGPError } from 'src/app/dao/ErrorDAO';
 import { ErrorDAOMock } from 'src/app/dao/tests/ErrorDAOMock.spec';
 import { MessageDisplayer } from '../MessageDisplayer';
+import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';

 describe('ErrorLoggerService', () => {

diff --git a/src/app/services/tests/ErrorLoggerServiceMock.spec.ts b/src/app/services/tests/ErrorLoggerServiceMock.spec.ts
index 66d3ed69a..d1ba28993 100644
--- a/src/app/services/tests/ErrorLoggerServiceMock.spec.ts
+++ b/src/app/services/tests/ErrorLoggerServiceMock.spec.ts
@@ -1,8 +1,8 @@
-import { MGPValidation } from 'src/app/utils/MGPValidation';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue, MGPValidation } from '@everyboard/lib';

 export class ErrorLoggerServiceMock {

+    // TODO:  grep for ErrorLoggerServiceMock.logError, use TestUtils.expectToThrowInstead there
     public static logError(component: string, message: string, data?: JSONValue): MGPValidation {
         return MGPValidation.failure(component + ': ' + message);
     }
diff --git a/src/app/services/tests/GameEventService.spec.ts b/src/app/services/tests/GameEventService.spec.ts
index d74a0e198..c1c554a2a 100644
--- a/src/app/services/tests/GameEventService.spec.ts
+++ b/src/app/services/tests/GameEventService.spec.ts
@@ -5,7 +5,7 @@ import { serverTimestamp } from 'firebase/firestore';
 import { GameEventService } from '../GameEventService';
 import { PartDAO } from 'src/app/dao/PartDAO';
 import { GameEvent, Reply, RequestType, Action } from 'src/app/domain/Part';
-import { JSONValue } from 'src/app/utils/utils';
+import { JSONValue } from '@everyboard/lib';
 import { PartDAOMock } from 'src/app/dao/tests/PartDAOMock.spec';
 import { IFirestoreDAO } from '../../dao/FirestoreDAO';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
diff --git a/src/app/services/tests/GameService.spec.ts b/src/app/services/tests/GameService.spec.ts
index 78d722a75..39e310015 100644
--- a/src/app/services/tests/GameService.spec.ts
+++ b/src/app/services/tests/GameService.spec.ts
@@ -11,20 +11,19 @@ import { Player } from 'src/app/jscaip/Player';
 import { FirstPlayer, ConfigRoom, PartType } from 'src/app/domain/ConfigRoom';
 import { ConfigRoomDAO } from 'src/app/dao/ConfigRoomDAO';
 import { RouterTestingModule } from '@angular/router/testing';
-import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';
 import { ConnectedUserService } from '../ConnectedUserService';
 import { ConnectedUserServiceMock } from './ConnectedUserService.spec';
 import { ConfigRoomMocks } from 'src/app/domain/ConfigRoomMocks.spec';
 import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
-import { Utils } from 'src/app/utils/utils';
+import { MGPOptional, Utils } from '@everyboard/lib';
 import { ConfigRoomService } from '../ConfigRoomService';
-import { MGPOptional } from 'src/app/utils/MGPOptional';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { PartMocks } from 'src/app/domain/PartMocks.spec';
 import { Subscription } from 'rxjs';
 import { GameEventService } from '../GameEventService';
 import { PlayerNumberMap } from 'src/app/jscaip/PlayerMap';
 import { NoConfig, RulesConfigUtils } from 'src/app/jscaip/RulesConfigUtil';
+import { BlankComponent } from 'src/app/utils/tests/TestUtils.spec';

 describe('GameService', () => {

diff --git a/src/app/services/tests/ThemeService.spec.ts b/src/app/services/tests/ThemeService.spec.ts
index dd72df43a..587438f91 100644
--- a/src/app/services/tests/ThemeService.spec.ts
+++ b/src/app/services/tests/ThemeService.spec.ts
@@ -2,8 +2,8 @@
 import { DOCUMENT } from '@angular/common';
 import { fakeAsync, TestBed, tick } from '@angular/core/testing';
 import { WelcomeComponent } from 'src/app/components/normal-component/welcome/welcome.component';
-import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';
 import { ThemeService } from '../ThemeService';
+import { SimpleComponentTestUtils } from 'src/app/utils/tests/TestUtils.spec';

 describe('ThemeService', () => {

diff --git a/src/app/services/tests/UserSettingsService.spec.ts b/src/app/services/tests/UserSettingsService.spec.ts
index 7cee9ee1f..8488584c7 100644
--- a/src/app/services/tests/UserSettingsService.spec.ts
+++ b/src/app/services/tests/UserSettingsService.spec.ts
@@ -1,5 +1,5 @@
 /* eslint-disable max-lines-per-function */
-import { MGPOptional } from 'src/app/utils/MGPOptional';
+import { MGPOptional } from '@everyboard/lib';
 import { UserSettingsService } from '../UserSettingsService';

 describe('UserSettingsService', () => {
diff --git a/src/app/utils/utils.ts b/src/app/utils/Debug.ts
similarity index 61%
rename from src/app/utils/utils.ts
rename to src/app/utils/Debug.ts
index 9f24a1638..d50feb10c 100644
--- a/src/app/utils/utils.ts
+++ b/src/app/utils/Debug.ts
@@ -1,31 +1,4 @@
-import { FieldValue } from '@firebase/firestore';
-import { ErrorLoggerService } from '../services/ErrorLoggerService';
-
-// These are the datatypes supported by firestore. Arrays of arrays are not
-// supported, but arrays containing objects containing arrays are, which is what
-// is encoded in these types.
-
-export type JSONPrimitive = string | number | boolean | null | undefined;
-export type JSONValue = JSONPrimitive | JSONObject | Array<JSONValueWithoutArray>;
-export type JSONValueWithoutArray = JSONPrimitive | JSONObject
-export type JSONObject = { [member: string]: JSONValue };
-
-export function isJSONPrimitive(value: unknown): value is JSONPrimitive {
-    if (typeof value === 'string') return true;
-    if (typeof value === 'number') return true;
-    if (typeof value === 'boolean') return true;
-    if (value === null) return true;
-    return false;
-}
-
-export type FirestoreJSONPrimitive = JSONPrimitive | FieldValue;
-export type FirestoreJSONValue =
-    FirestoreJSONPrimitive |
-    FirestoreJSONObject |
-    Array<FirestoreJSONValueWithoutArray> |
-    ReadonlyArray<FirestoreJSONValueWithoutArray>;
-export type FirestoreJSONValueWithoutArray = FirestoreJSONPrimitive | FirestoreJSONObject
-export type FirestoreJSONObject = { [member: string]: FirestoreJSONValue };
+import { Utils } from '@everyboard/lib';

 export class Debug {
     /**
@@ -117,56 +90,7 @@ export class Debug {
     }
 }

-// This makes Debug.enableLog accessible in the console
-// To use it, one just has to do window.enableLog([true, true], 'SomeClass, 'someMethod')
+// To make Debug.enableLog accessible in the console, run this somewhere in the app's initialization code:
 // eslint-disable-next-line dot-notation
 window['enableLog'] = Debug.enableLog;
-
-export class Utils {
-
-    public static expectToBe<T>(value: T, expected: T, message?: string): void {
-        if (value !== expected) {
-            if (message !== undefined) {
-                throw new Error(message);
-            }
-            throw new Error(`A default switch case did not observe the correct value, expected ${expected}, but got ${value} instead.`);
-        }
-    }
-
-    public static expectToBeMultiple<T>(value: T, expectedValues: T[]): void {
-        let found: boolean = false;
-        for (const expected of expectedValues) {
-            if (value === expected) {
-                found = true;
-                break;
-            }
-        }
-        if (found === false) {
-            throw new Error(`A default switch case did not observe the correct value, expected a value among ${expectedValues}, but got ${value} instead.`);
-        }
-    }
-
-    public static getNonNullable<T>(value : T | null | undefined): T {
-        if (value == null) {
-            throw new Error(`Expected value not to be null or undefined, but it was.`);
-        } else {
-            return value;
-        }
-    }
-
-    public static assert(condition: boolean, message: string): void {
-        if (condition === false) {
-            // We log the error but we also throw an exception
-            // This is because if an assertion fails,
-            // we don't want to execute the code after the assertion.
-            // Otherwise, this could result in potentially very serious issues.
-            ErrorLoggerService.logError('Assertion failure', message);
-            throw new Error(`Assertion failure: ${message}`);
-        }
-    }
-
-    public static identity<T>(thing: T): T {
-        return thing;
-    }
-
-}
+// To use it, one just has to do window.enableLog([true, true], 'SomeClass, 'someMethod')
diff --git a/src/app/utils/MGPValidator.ts b/src/app/utils/MGPValidator.ts
index fefc1a6b3..32da3dbae 100644
--- a/src/app/utils/MGPValidator.ts
+++ b/src/app/utils/MGPValidator.ts
@@ -1,4 +1,4 @@
-import { MGPValidation } from './MGPValidation';
+import { MGPValidation } from '@everyboard/lib';

 export type MGPValidator = (v: number | null) => MGPValidation;

diff --git a/src/app/utils/assert.ts b/src/app/utils/assert.ts
deleted file mode 100644
index a3282fade..000000000
--- a/src/app/utils/assert.ts
+++ /dev/null
@@ -1,17 +0,0 @@
-import { ErrorLoggerService } from '../services/ErrorLoggerService';
-
-// @deprecated Prefer to use Utils.assert instead
-// eslint-disable-next-line @typescript-eslint/no-explicit-any
-export function assert(condition: boolean, message: string, notStringMessage?: any): void {
-    if (condition === false) {
-        // We log the error but we also throw an exception
-        // This is because if an assertion fails,
-        // we don't want to execute the code after the assertion.
-        // Otherwise, this could result in potentially very serious issues.
-        if (notStringMessage !== undefined) {
-            console.log(notStringMessage);
-        }
-        ErrorLoggerService.logError('Assertion failure', message);
-        throw new Error(`Assertion failure: ${message}`);
-    }
-}
diff --git a/src/app/utils/tests/ArrayUtils.spec.ts b/src/app/utils/tests/ArrayUtils.spec.ts
deleted file mode 100644
index 276df5040..000000000
--- a/src/app/utils/tests/ArrayUtils.spec.ts
+++ /dev/null
@@ -1,266 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { Coord } from 'src/app/jscaip/Coord';
-import { ArrayUtils, Table, TableUtils, TableWithPossibleNegativeIndices } from '../ArrayUtils';
-import { MGPOptional } from '../MGPOptional';
-import { TestUtils } from './TestUtils.spec';
-import { Utils } from '../utils';
-
-describe('ArrayUtils', () => {
-
-    describe('isPrefix', () => {
-
-        it('should be false when the prefix is longer than the list', () => {
-            const prefix: number[] = [1, 2, 3];
-            const list: number[] = [1];
-            expect(ArrayUtils.isPrefix(prefix, list)).toBeFalse();
-        });
-
-        it('should be false when we the prefix is not a prefix', () => {
-            const prefix: number[] = [1, 4];
-            const list: number[] = [1, 2, 3];
-            expect(ArrayUtils.isPrefix(prefix, list)).toBeFalse();
-        });
-
-        it('should be true when we have a prefix', () => {
-            const prefix: number[] = [1, 2, 3];
-            const list: number[] = [1, 2, 3, 4, 5];
-            expect(ArrayUtils.isPrefix(prefix, list)).toBeTrue();
-        });
-
-    });
-
-    describe('isGreaterThan && isLessThan', () => {
-
-        function expectComparisonCorrectness(left: number[], status: '<' | '=' | '>', right: number[]): void {
-            const actualIsGreaterThan: boolean = ArrayUtils.isGreaterThan(left, right);
-            const actualIsLessThan: boolean = ArrayUtils.isLessThan(left, right);
-            switch (status) {
-                case '<':
-                    expect(actualIsLessThan).toBeTrue();
-                    expect(actualIsGreaterThan).toBeFalse();
-                    break;
-                case '=':
-                    expect(actualIsLessThan).toBeFalse();
-                    expect(actualIsGreaterThan).toBeFalse();
-                    break;
-                default:
-                    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
-                    Utils.assert(status === '>', 'should be >');
-                    expect(actualIsLessThan).toBeFalse();
-                    expect(actualIsGreaterThan).toBeTrue();
-                    break;
-
-            }
-        }
-
-        it('should discover superiority on short list', () => {
-            // Given a list being superior in the early number
-            const superior: number[] = [874797];
-            // and another list being inferior in the early number
-            const inferior: number[] = [Number.MIN_SAFE_INTEGER];
-
-            // When comparing them
-            // Then isGreaterThan should be true and isLessThan false
-            expectComparisonCorrectness(superior, '>', inferior);
-        });
-
-        it('should discover superiority', () => {
-            // Given a list being superior in the early number
-            const superior: number[] = [3, 2, 1];
-            // and another list being inferior in the early number
-            const inferior: number[] = [2, 2, 1];
-
-            // When comparing them
-            // Then isGreaterThan should be true and isLessThan false
-            expectComparisonCorrectness(superior, '>', inferior);
-        });
-
-        it('should discover inferiority', () => {
-            // Given a list being inferior in the early number
-            const inferior: number[] = [2, 2, 1];
-            // and another list being superior in the early number
-            const superior: number[] = [3, 2, 1];
-
-            // When comparing them
-            // Then isGreaterThan should be false and isLessThan true
-            expectComparisonCorrectness(inferior, '<', superior);
-        });
-
-        it('should discover inferiority on short list', () => {
-            // Given a list being inferior in the early number
-            const inferior: number[] = [9876156];
-            // and another list being superior in the early number
-            const superior: number[] = [Number.MAX_SAFE_INTEGER];
-
-            // When comparing them
-            // Then isGreaterThan should be false and isLessThan true
-            expectComparisonCorrectness(inferior, '<', superior);
-        });
-
-        it('should discover equality', () => {
-            // Given two equal lists
-            const left: number[] = [3, 2, 1];
-            const right: number[] = [3, 2, 1];
-
-            // When comparing them
-            // Then isGreaterThan should be false and isLessThan false
-            expectComparisonCorrectness(left, '=', right);
-        });
-
-        it('should discover equality on short list', () => {
-            // Given two equal lists
-            const left: number[] = [123456789];
-            const right: number[] = [123456789];
-
-            // When comparing them
-            // Then isGreaterThan should be false and isLessThan false
-            expectComparisonCorrectness(left, '=', right);
-        });
-
-        it('should throw with empty list (isGreaterThan)', () => {
-            // Given one empty list and one normal
-            // When comparing both list
-            const reason: string = 'ArrayUtils.isLessThan/isGreaterThan should have two non-empty list as parameter';
-            TestUtils.expectToThrowAndLog(() => {
-                ArrayUtils.isGreaterThan([], [1]);
-            }, reason);
-        });
-
-        it('should throw with empty list (isLessThan)', () => {
-            // Given one empty list and one normal
-            // When comparing both list
-            const reason: string = 'ArrayUtils.isLessThan/isGreaterThan should have two non-empty list as parameter';
-            TestUtils.expectToThrowAndLog(() => {
-                ArrayUtils.isLessThan([], [1]);
-            }, reason);
-        });
-
-    });
-
-    describe('maximumsBy', () => {
-
-        it('should extract the maximums', () => {
-            // Given an array and a metric
-            const array: number[] = [0, 3, 1, 2, 3];
-            const metric: (value: number) => number = Utils.identity;
-            // When extracting the maximums
-            const maximums: number[] = ArrayUtils.maximumsBy(array, metric);
-            // Then it should return all the maximum elements
-            expect(maximums).toEqual([3, 3]);
-        });
-
-    });
-
-});
-
-describe('TableUtils', () => {
-
-    describe('equals', () => {
-
-        it('should notice different table sizes', () => {
-            const shortBoard: Table<number> = [[1]];
-            const longBoard: Table<number> = [[1], [2]];
-            expect(TableUtils.compare(shortBoard, longBoard)).toBeFalse();
-        });
-
-        it('should delegate sub-list comparaison to ArrayUtils and return false if it does', () => {
-            spyOn(ArrayUtils, 'equals').and.returnValue(false);
-            const table: Table<number> = [[1], [2]];
-            expect(TableUtils.compare(table, table)).toBeFalse();
-        });
-
-        it('should delegate sub-list comparaison to ArrayUtils and return true if ArrayUtils.compare always does', () => {
-            spyOn(ArrayUtils, 'equals').and.returnValue(true);
-            const table: Table<number> = [[1], [2]];
-            expect(TableUtils.compare(table, table)).toBeTrue();
-        });
-
-    });
-
-    describe('sum', () => {
-
-        it('should add all element of a number table', () => {
-            // Given any list of number
-            const table: number[][] = [
-                [11, 12, 13, 14, 15],
-                [20, 19, 18, 17, 16],
-            ];
-
-            // When calling TableUtils.sum
-            const sum: number = TableUtils.sum(table);
-
-            // Then it should be correct
-            expect(sum).toBe(155);
-        });
-
-    });
-
-    describe('add', () => {
-
-        it('should add elements of same index of a number table', () => {
-            // Given two element
-            const left: Table<number> = [
-                [+1, +2, +3],
-                [+4, +2, +6],
-                [-1, -2, -3],
-            ];
-            const right: Table<number> = [
-                [+1, -2, +9],
-                [-2, +1, +1],
-                [-5, -1, +3],
-            ];
-
-            // When adding them
-            const sum: Table<number> = TableUtils.add(left, right);
-
-            // Then the result should be the sum of same-coorded-place
-            expect(sum).toEqual([
-                [2, 0, 12],
-                [2, 3, 7],
-                [-6, -3, 0],
-            ]);
-        });
-
-    });
-
-});
-
-describe('Table2DWithPossibleNegativeIndices', () => {
-
-    it('should return empty when accessing a non existing element', () => {
-        // Given a table
-        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
-        // When getting an element that does not exist
-        const element: MGPOptional<number> = table.get(new Coord(0, 0));
-        // Then it should be empty
-        expect(element.isAbsent()).toBeTrue();
-    });
-
-    it('should return the accessed element after it has been set', () => {
-        // Given a table with a set element
-        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
-        const somePiece: number = 42; // dummy value to represent something stored in the table
-        table.set(new Coord(1, 2), somePiece);
-        // When getting the element
-        const element: MGPOptional<number> = table.get(new Coord(1, 2));
-        // Then the element exists and is the same
-        expect(element.isPresent()).toBeTrue();
-        expect(element.get()).toBe(somePiece);
-    });
-
-    it('should iterate over elements in order', () => {
-        // Given a table with multiple elements
-        const table: TableWithPossibleNegativeIndices<number> = new TableWithPossibleNegativeIndices();
-        table.set(new Coord(0, 0), 1);
-        table.set(new Coord(0, 1), 2);
-        table.set(new Coord(1, 1), 3);
-        // When iterating over the elements
-        const seen: number[] = [];
-        for (const cell of table) {
-            seen.push(cell.content);
-        }
-        // Then it should have seen ys from low to high, and xs from low to high
-        expect(seen).toEqual([1, 2, 3]);
-    });
-
-});
diff --git a/src/app/utils/tests/utils.spec.ts b/src/app/utils/tests/Debug.spec.ts
similarity index 68%
rename from src/app/utils/tests/utils.spec.ts
rename to src/app/utils/tests/Debug.spec.ts
index bc229d591..6321caae0 100644
--- a/src/app/utils/tests/utils.spec.ts
+++ b/src/app/utils/tests/Debug.spec.ts
@@ -1,71 +1,6 @@
 /* eslint-disable max-lines-per-function */
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
-import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { Debug, isJSONPrimitive, Utils } from '../utils';
-
-describe('utils', () => {
-
-    describe('isJSONPrimitive', () => {
-        it('should return true for all types of JSON primitives', () => {
-            expect(isJSONPrimitive('foo')).toBeTrue();
-            expect(isJSONPrimitive(42)).toBeTrue();
-            expect(isJSONPrimitive(true)).toBeTrue();
-            expect(isJSONPrimitive(null)).toBeTrue();
-        });
-        it('should return false for non-JSON primitives', () => {
-            expect(isJSONPrimitive([1, 2, 3])).toBeFalse();
-            expect(isJSONPrimitive({})).toBeFalse();
-            expect(isJSONPrimitive(undefined)).toBeFalse(); // undefined is not valid in JSON!
-        });
-    });
-    describe('expectToBe', () => {
-        it('should fail when the default case has a different value than expected', () => {
-            const value: number = 2;
-            expect(() => {
-                switch (value) {
-                    case 0:
-                        break;
-                    default:
-                        // we expect that value can only be 0 or 1
-                        Utils.expectToBe(value, 1);
-                        break;
-                }
-            }).toThrowError(`A default switch case did not observe the correct value, expected 1, but got 2 instead.`);
-        });
-        it('should use the message if it is passed', () => {
-            expect(() => Utils.expectToBe(1, 2, 'message')).toThrowError('message');
-        });
-    });
-    describe('expectToBeMultiple', () => {
-        it('should fail when the default case has a different value than one of the expected values', () => {
-            const value: number = 2;
-            expect(() => {
-                switch (value) {
-                    default:
-                        // we expect that value can only be 0 or 1
-                        Utils.expectToBeMultiple(value, [0, 1]);
-                        break;
-                }
-            }).toThrowError(`A default switch case did not observe the correct value, expected a value among 0,1, but got 2 instead.`);
-        });
-    });
-    describe('getNonNullable', () => {
-        it('should fail if the value is null or undefined', () => {
-            expect(() => Utils.getNonNullable(null)).toThrowError('Expected value not to be null or undefined, but it was.');
-            expect(() => Utils.getNonNullable(undefined)).toThrowError('Expected value not to be null or undefined, but it was.');
-        });
-        it('should return the value if it is not null', () => {
-            expect(Utils.getNonNullable(42)).toBe(42);
-        });
-    });
-    describe('assert', () => {
-        it('should log error and throw when condition is false', () => {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
-            expect(() => Utils.assert(false, 'error')).toThrowError('Assertion failure: error');
-            expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'error');
-        });
-    });
-});
+import { Utils } from '@everyboard/lib';
+import { Debug } from '../Debug';

 @Debug.log
 class MyClass {
@@ -116,7 +51,7 @@ describe('Debug', () => {
         });
         it('should throw when verbose is set to something invalid', () => {
             // Given a verbose-disabled method and class
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
+            spyOn(Utils, 'logError').and.callFake(Utils.logError);
             spyOn(console, 'log').and.returnValue();
             localStorage.setItem('verbosity', 'lolilol');
             // When calling Debug.display
@@ -125,7 +60,7 @@ describe('Debug', () => {
                 .toThrowError('malformed verbosity object: lolilol');
             expect(console.log).not.toHaveBeenCalled();
             // because this is an error resulting from a user error, devs don't want to know about it
-            expect(ErrorLoggerService.logError).not.toHaveBeenCalled();
+            expect(Utils.logError).not.toHaveBeenCalled();
         });
         it('should not log when verbose is unset', () => {
             // Given a verbose-unset method and class
diff --git a/src/app/utils/tests/Encoder.spec.ts b/src/app/utils/tests/Encoder.spec.ts
deleted file mode 100644
index 955c2ae1e..000000000
--- a/src/app/utils/tests/Encoder.spec.ts
+++ /dev/null
@@ -1,76 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { Coord } from 'src/app/jscaip/Coord';
-import { Move } from 'src/app/jscaip/Move';
-import { MoveCoordToCoord } from 'src/app/jscaip/MoveCoordToCoord';
-import { comparableEquals } from 'src/app/utils/Comparable';
-import { JSONValue, Utils } from 'src/app/utils/utils';
-import { Encoder } from '../Encoder';
-
-export class EncoderTestUtils {
-    public static expectToBeBijective<T>(encoder: Encoder<T>, value: T): void {
-        const encoded: JSONValue = encoder.encode(value);
-        const decoded: T = encoder.decode(encoded);
-        expect(comparableEquals(decoded, value))
-            .withContext(`Expected decoded value ${decoded} to be ${value}`)
-            .toBeTrue();
-    }
-}
-
-describe('MoveEncoder', () => {
-    describe('tuple', () => {
-        class MyMove extends MoveCoordToCoord {}
-        const myMoveEncoder: Encoder<MyMove> = Encoder.tuple<MyMove, [Coord, Coord]>(
-            [Coord.encoder, Coord.encoder],
-            (move: MyMove): [Coord, Coord] => [move.getStart(), move.getEnd()],
-            (fields: [Coord, Coord]): MyMove => new MyMove(fields[0], fields[1]));
-
-        class MyComplexMove extends Move {
-            public constructor(public coords: [Coord, Coord, Coord]) {
-                Utils.assert(Array.isArray(coords), 'coords should be an array');
-                super();
-            }
-            public toString(): string {
-                return 'MyComplexMove';
-            }
-            public equals(other: this): boolean {
-                for (let i: number = 0; i < this.coords.length; i++) {
-                    if (this.coords[i].equals(other.coords[i]) === false) {
-                        return false;
-                    }
-                }
-                return true;
-            }
-        }
-
-        const myComplexMoveEncoder: Encoder<MyComplexMove> =
-            Encoder.tuple<MyComplexMove, [Coord, Coord, Coord]>(
-                [Coord.encoder, Coord.encoder, Coord.encoder],
-                (move: MyComplexMove): [Coord, Coord, Coord] => move.coords,
-                (fields: [Coord, Coord, Coord]): MyComplexMove => new MyComplexMove(fields));
-
-        it('should successfully encode and decode', () => {
-            EncoderTestUtils.expectToBeBijective(myMoveEncoder, new MyMove(new Coord(0, 0), new Coord(2, 3)));
-            EncoderTestUtils.expectToBeBijective(myComplexMoveEncoder, new MyComplexMove(
-                [new Coord(0, 0), new Coord(2, 3), new Coord(3, 4)]));
-        });
-    });
-    describe('disjunction', () => {
-        const encoder1: Encoder<number> = Encoder.identity<number>();
-        function is1(value : number | boolean): value is number {
-            return typeof(value) === 'number';
-        }
-        const encoder2: Encoder<boolean> = Encoder.identity<boolean>();
-        function is2(value : number | boolean): value is boolean {
-            return typeof(value) === 'boolean';
-        }
-        const encoder: Encoder<number | boolean> = Encoder.disjunction([is1, is2], [encoder1, encoder2]);
-
-        it('should have a bijective encoder', () => {
-            const disjunctedValues: (number | boolean)[] = [0, 1, 3, true, false];
-
-            for (const disjunctedValue of disjunctedValues) {
-                EncoderTestUtils.expectToBeBijective(encoder, disjunctedValue);
-            }
-        });
-    });
-});
diff --git a/src/app/utils/tests/LocaleUtils.spec.ts b/src/app/utils/tests/LocaleUtils.spec.ts
index ca0918843..f66f05384 100644
--- a/src/app/utils/tests/LocaleUtils.spec.ts
+++ b/src/app/utils/tests/LocaleUtils.spec.ts
@@ -1,7 +1,7 @@
 /* eslint-disable max-lines-per-function */
 import { LocaleUtils } from '../LocaleUtils';

-describe('LocaleUtils', () => {
+describe('@everyboard/lib', () => {
     describe('getLocale', () => {
         it('should use locale stored in localStorage', () => {
             // Given a localStage that defines a locale
diff --git a/src/app/utils/tests/MGPMap.spec.ts b/src/app/utils/tests/MGPMap.spec.ts
deleted file mode 100644
index 7ce37ce2a..000000000
--- a/src/app/utils/tests/MGPMap.spec.ts
+++ /dev/null
@@ -1,175 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { MGPMap } from '../MGPMap';
-import { MGPOptional } from '../MGPOptional';
-import { TestUtils } from './TestUtils.spec';
-
-describe('MGPMap', () => {
-
-    it('Set should bug if key value was already present', () => {
-        const map: MGPMap<string, string> = new MGPMap();
-        map.set('oui', 'yes');
-        expect(() => map.set('oui', 'si')).toThrow();
-    });
-
-    it('Put should replace value if key value was already present', () => {
-        const map: MGPMap<string, string> = new MGPMap();
-        map.put('oui', 'yes');
-        expect(() => map.put('oui', 'DA')).not.toThrow();
-        expect(map.get('oui')).toEqual(MGPOptional.of('DA'));
-    });
-
-    it('ListKey should work', () => {
-        const map: MGPMap<string, number> = new MGPMap();
-        map.set('first', 1);
-        map.set('second', 2);
-
-        expect(map.listKeys()).toEqual(['first', 'second']);
-    });
-
-    describe('replace', () => {
-        it('Replace should work', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 1);
-            map.replace('first', 0);
-
-            expect(map.get('first')).toEqual(MGPOptional.of(0));
-        });
-        it('Replace should throw when value not found', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 1);
-
-            expect(() => map.replace('firstZUUU', 0))
-                .toThrowError('No Value to replace for key firstZUUU!');
-        });
-    });
-
-    describe('delete', () => {
-        it('should delete element', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 0);
-            map.set('second', 1);
-            map.set('third', 2);
-            map.delete('first');
-
-            expect(map.get('first')).toEqual(MGPOptional.empty());
-        });
-        it('should throw when unexisting key passed', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 0);
-            expect(() => map.delete('second')).toThrowError('No Value to delete for key "second"!');
-        });
-    });
-
-    it('should throw when calling set after making immutable', () => {
-        const map: MGPMap<string, number> = new MGPMap();
-        map.set('first', 0);
-        map.set('second', 1);
-        map.makeImmutable();
-        const reason: string = 'Cannot call set on immutable map!';
-        TestUtils.expectToThrowAndLog(() => {
-            map.set('third', 2);
-        }, reason);
-    });
-
-    it('PutAll should concantenate two maps, erasing the overlapping content on the receiver', () => {
-        const receiver: MGPMap<string, number> = new MGPMap();
-        receiver.set('first', 0);
-        receiver.set('second', 1);
-
-        const giver: MGPMap<string, number> = new MGPMap();
-        giver.set('first', 1);
-        giver.set('third', 3);
-
-        receiver.putAll(giver);
-
-        const expectedSum: MGPMap<string, number> = new MGPMap();
-        expectedSum.set('first', 1);
-        expectedSum.set('second', 1);
-        expectedSum.set('third', 3);
-
-        expect(receiver).toEqual(expectedSum);
-    });
-
-    it('Size should work', () => {
-        const map: MGPMap<string, number> = new MGPMap();
-        expect(map.size()).toBe(0);
-    });
-
-    describe('copy', () => {
-        it('Copy should be identical when no immutable', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 0);
-            map.set('second', 1);
-
-            const copy: MGPMap<string, number> = map.getCopy();
-            expect(copy).toEqual(map);
-
-            map.set('third', 2);
-            expect(copy).not.toEqual(map);
-        });
-        it('Copy should bethe same but mutable when immutable', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 0);
-            map.set('second', 1);
-
-            const copy: MGPMap<string, number> = map.getCopy();
-            map.makeImmutable();
-
-            expect(copy).not.toEqual(map);
-            copy.makeImmutable();
-            expect(copy).toEqual(map);
-        });
-    });
-
-    describe('equals', () => {
-        it('should detect maps with distinct keys as different', () => {
-            const map1: MGPMap<string, number> = new MGPMap();
-            map1.set('first', 0);
-
-            const map2: MGPMap<string, number> = new MGPMap();
-            map2.set('second', 1);
-
-            expect(map1.equals(map2)).toBeFalse();
-        });
-        it('should detect map with same keys but distinct values as different', () => {
-            const map1: MGPMap<string, number> = new MGPMap();
-            map1.set('first', 0);
-
-            const map2: MGPMap<string, number> = new MGPMap();
-            map2.set('first', 1);
-
-            expect(map1.equals(map2)).toBeFalse();
-        });
-    });
-
-    describe('forEach', () => {
-        it('should iterate over all elements of the map', () => {
-            // Given a map with elements
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('first', 1);
-            map.set('second', 2);
-
-            // When calling forEach
-            let sum: number = 0;
-            map.forEach((item: {key: string, value: number}) => sum += item.value);
-
-            // Then all elements should have been iterated over
-            expect(sum).toBe(3);
-        });
-    });
-
-    describe('getAnyPair', () => {
-        it('should return an element from the map', () => {
-            const map: MGPMap<string, number> = new MGPMap();
-            map.set('salut', 5);
-
-            const element: number = map.getAnyPair().get().value;
-            expect(element).toBe(5);
-        });
-        it('should not return anything if the map is empty', () => {
-            const emptyMap: MGPMap<string, number> = new MGPMap();
-            expect(emptyMap.getAnyPair().isAbsent()).toBeTrue();
-        });
-    });
-
-});
diff --git a/src/app/utils/tests/MGPOptional.spec.ts b/src/app/utils/tests/MGPOptional.spec.ts
deleted file mode 100644
index 5d092eb22..000000000
--- a/src/app/utils/tests/MGPOptional.spec.ts
+++ /dev/null
@@ -1,27 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { Encoder } from '../Encoder';
-import { MGPOptional } from '../MGPOptional';
-import { EncoderTestUtils } from './Encoder.spec';
-
-describe('MGPOptional', () => {
-
-    it('MGPOptional.get should throw if empty', () => {
-        const optional: MGPOptional<string> = MGPOptional.empty();
-        expect(() => optional.get()).toThrowError('Value is absent');
-    });
-    describe('toString', () => {
-        it('should succeed for empty values', () => {
-            expect(MGPOptional.empty<string>().toString()).toBe('MGPOptional.empty()');
-        });
-        it('should rely include value for non-empty values', () => {
-            expect(MGPOptional.of('foo').toString()).toBe('MGPOptional.of(foo)');
-        });
-    });
-    describe('getEncoder', () => {
-        it('should give a bijective encoder', () => {
-            const encoder: Encoder<MGPOptional<number>> = MGPOptional.getEncoder(Encoder.identity());
-            EncoderTestUtils.expectToBeBijective(encoder, MGPOptional.empty());
-            EncoderTestUtils.expectToBeBijective(encoder, MGPOptional.of(5));
-        });
-    });
-});
diff --git a/src/app/utils/tests/MGPSet.spec.ts b/src/app/utils/tests/MGPSet.spec.ts
deleted file mode 100644
index 469764c8d..000000000
--- a/src/app/utils/tests/MGPSet.spec.ts
+++ /dev/null
@@ -1,153 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { Coord } from 'src/app/jscaip/Coord';
-import { MGPSet } from '../MGPSet';
-import { MGPOptional } from '../MGPOptional';
-
-describe('MGPSet', () => {
-
-    it('should create an empty set when not provided with argument', () => {
-        const set: MGPSet<number> = new MGPSet<number>();
-        expect(set.size()).toBe(0);
-    });
-
-    describe('equals', () => {
-
-        it('should test size', () => {
-            const one: MGPSet<string> = new MGPSet(['salut']);
-            const two: MGPSet<string> = new MGPSet(['salut', 'kutentak']);
-            expect(one.equals(two)).toBeFalse();
-        });
-
-        it('should not care about order', () => {
-            const one: MGPSet<string> = new MGPSet(['un', 'deux']);
-            const two: MGPSet<string> = new MGPSet(['deux', 'un']);
-            expect(one.equals(two)).toBeTrue();
-        });
-
-        it('should detect inequality', () => {
-            const one: MGPSet<string> = new MGPSet(['un', 'deux']);
-            const two: MGPSet<string> = new MGPSet(['deux', 'trois']);
-            expect(one.equals(two)).toBeFalse();
-        });
-
-    });
-
-    describe('toString', () => {
-        it('should work as expected', () => {
-            const a: Coord = new Coord(0, 0);
-            const b: Coord = new Coord(1, 1);
-            const set: MGPSet<Coord> = new MGPSet([a, b]);
-            expect(set.toString()).toBe('[' + a.toString() + ', ' + b.toString() + ']');
-        });
-        it('should support null', () => {
-            const set: MGPSet<Coord | null> = new MGPSet([null]);
-            expect(set.toString()).toBe('[null]');
-        });
-    });
-
-    describe('toList', () => {
-        it('should provide a copy of the set and disallow set modifications', () => {
-            const originalData: Coord[] = [new Coord(0, 0), new Coord(1, 1)];
-            const set: MGPSet<Coord> = new MGPSet(originalData);
-            const assigned: MGPSet<Coord> = set;
-            const copiedData: Coord[] = set.toList();
-
-            assigned.add(new Coord(2, 2));
-
-            expect(set.equals(assigned)).toBeTrue();
-            expect(copiedData).toEqual(originalData);
-        });
-    });
-
-    describe('add', () => {
-        it('should not add duplicate elements, and return false instead', () => {
-            const set: MGPSet<Coord> = new MGPSet([new Coord(0, 0), new Coord(1, 1)]);
-            expect(set.add(new Coord(2, 2))).toBeTrue();
-            expect(set.add(new Coord(0, 0))).toBeFalse();
-        });
-    });
-
-    describe('getAnyElement', () => {
-        it('should return an element from the set', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            const element: number = set.getAnyElement().get();
-            expect(element === 1 || element === 2).toBeTrue();
-        });
-        it('should not return anything if the set is empty', () => {
-            const emptySet: MGPSet<number> = new MGPSet();
-            expect(emptySet.getAnyElement().isAbsent()).toBeTrue();
-        });
-    });
-
-    describe('isEmpty', () => {
-        it('should return true for the empty set', () => {
-            const set: MGPSet<number> = new MGPSet();
-            expect(set.isEmpty()).toBeTrue();
-        });
-        it('should return false for any non-empty set', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            expect(set.isEmpty()).toBeFalse();
-        });
-    });
-
-    describe('remove', () => {
-        it('should remove element from the set and return true', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            expect(set.remove(2)).toBeTrue();
-            expect(set.equals(new MGPSet([1]))).toBeTrue();
-        });
-        it('should preserve set and return false if element is not contained', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            expect(set.remove(3)).toBeFalse();
-            expect(set.equals(new MGPSet([1, 2]))).toBeTrue();
-        });
-    });
-
-    describe('map', () => {
-        it('should iterate over the elements of the set', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            function increment(x: number): number {
-                return x+1;
-            }
-            expect(set.map(increment).equals(new MGPSet([2, 3]))).toBeTrue();
-        });
-    });
-
-    describe('flatMap', () => {
-        it('should iterate over the elements of the set, and then flatten it again', () => {
-            const set: MGPSet<number> = new MGPSet([1, 2]);
-            function makeTwo(x: number): MGPSet<number> {
-                return new MGPSet([x, x+1]);
-            }
-            expect(set.flatMap(makeTwo).equals(new MGPSet([1, 2, 3]))).toBeTrue();
-        });
-    });
-
-    describe('getMissingElement', () => {
-
-        it('should return a missing element', () => {
-            // Given two set, one with one element, the other empty
-            const fullSet: MGPSet<number> = new MGPSet([0]);
-            const emptySet: MGPSet<number> = new MGPSet([]);
-
-            // When calling getMissingElement on the empty one
-            const missingElement: MGPOptional<number> = emptySet.getMissingElementFrom(fullSet);
-
-            // Then it should appear than the empty set miss one element
-            expect(missingElement).toEqual(MGPOptional.of(0));
-        });
-
-        it('should return empty when nothing is missing', () => {
-            // Given two set, one with one element, the other empty
-            const fullSet: MGPSet<number> = new MGPSet([0]);
-            const emptySet: MGPSet<number> = new MGPSet([]);
-
-            // When calling getMissingElement on the full one
-            const missingElement: MGPOptional<number> = fullSet.getMissingElementFrom(emptySet);
-
-            // Then it should appear than the full set miss nothing
-            expect(missingElement).toEqual(MGPOptional.empty());
-        });
-
-    });
-});
diff --git a/src/app/utils/tests/MGPValidation.spec.ts b/src/app/utils/tests/MGPValidation.spec.ts
deleted file mode 100644
index 419b3c5ae..000000000
--- a/src/app/utils/tests/MGPValidation.spec.ts
+++ /dev/null
@@ -1,38 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { MGPFallible } from '../MGPFallible';
-import { MGPValidation } from '../MGPValidation';
-
-export class MGPValidationTestUtils {
-
-    public static expectToBeSuccess(fallible: MGPValidation): void {
-        expect(fallible.isSuccess()).toBeTrue();
-    }
-
-    public static expectToBeFailure(fallible: MGPValidation, reason: string): void {
-        expect(fallible.isFailure()).toBeTrue();
-        expect(fallible.getReason()).toBe(reason);
-    }
-}
-
-describe('MGPValidation', () => {
-
-    it('should throw when asking MGPValidation.SUCCESS.getReason()', () => {
-        const expectedError: string = 'Cannot get failure reason from a success';
-        expect(() => MGPValidation.SUCCESS.getReason()).toThrowError(expectedError);
-    });
-    describe('ofFallible', () => {
-        it('should return MGPValidation.SUCCESS when given a success', () => {
-            // Given a successful MGPFallible
-            const fallible: MGPFallible<number> = MGPFallible.success(42);
-
-            // When converting it to a MGPValidation
-            const validation: MGPValidation = MGPValidation.ofFallible(fallible);
-
-            // Then it should be MGPValidation.SUCCESS
-            expect(validation).toBe(MGPValidation.SUCCESS);
-        });
-    });
-    it('should construct a failure with MGPValidation.failure', () => {
-        expect(MGPValidation.failure('error').isFailure()).toBeTrue();
-    });
-});
diff --git a/src/app/utils/tests/TestUtils.spec.ts b/src/app/utils/tests/TestUtils.spec.ts
index a87902c13..a9cd12696 100644
--- a/src/app/utils/tests/TestUtils.spec.ts
+++ b/src/app/utils/tests/TestUtils.spec.ts
@@ -8,8 +8,7 @@ import { FormsModule, ReactiveFormsModule } from '@angular/forms';
 import { NoopAnimationsModule } from '@angular/platform-browser/animations';
 import { GameState } from '../../jscaip/GameState';
 import { Move } from '../../jscaip/Move';
-import { MGPValidation } from '../MGPValidation';
-import { AppModule } from '../../app.module';
+import { AppModule, FirebaseProviders } from '../../app.module';
 import { UserDAO } from '../../dao/UserDAO';
 import { ConnectedUserService, AuthUser } from '../../services/ConnectedUserService';
 import { GameNode } from '../../jscaip/AI/GameNode';
@@ -26,20 +25,20 @@ import { ChatDAOMock } from '../../dao/tests/ChatDAOMock.spec';
 import { PartDAOMock } from '../../dao/tests/PartDAOMock.spec';
 import { LocalGameWrapperComponent }
     from '../../components/wrapper-components/local-game-wrapper/local-game-wrapper.component';
-import { Utils } from '../utils';
+import { Comparable, MGPOptional, MGPValidation, Utils } from '@everyboard/lib';
 import { HttpClient, HttpClientModule } from '@angular/common/http';
-import { MGPOptional } from '../MGPOptional';
 import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
 import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
 import { AbstractGameComponent } from 'src/app/components/game-components/game-component/GameComponent';
 import { findMatchingRoute } from 'src/app/app.module.spec';
+import * as Firestore from '@angular/fire/firestore';
+import * as Auth from '@angular/fire/auth';
 import { HumanDurationPipe } from 'src/app/pipes-and-directives/human-duration.pipe';
 import { AutofocusDirective } from 'src/app/pipes-and-directives/autofocus.directive';
 import { ToggleVisibilityDirective } from 'src/app/pipes-and-directives/toggle-visibility.directive';
 import { FirestoreTimePipe } from 'src/app/pipes-and-directives/firestore-time.pipe';
 import { UserMocks } from 'src/app/domain/UserMocks.spec';
 import { FirebaseError } from 'firebase/app';
-import { Comparable } from '../Comparable';
 import { Subscription } from 'rxjs';
 import { CurrentGameService } from 'src/app/services/CurrentGameService';
 import { CurrentGameServiceMock } from 'src/app/services/tests/CurrentGameService.spec';
@@ -88,7 +87,7 @@ export class SimpleComponentTestUtils<T> {
     public static async create<T>(componentType: Type<T>, activatedRouteStub?: ActivatedRouteStub)
     : Promise<SimpleComponentTestUtils<T>>
     {
-        await TestUtils.configureTestingModule(componentType, activatedRouteStub);
+        await ConfigureTestingModuleUtils.configureTestingModule(componentType, activatedRouteStub);
         ConnectedUserServiceMock.setUser(UserMocks.CONNECTED_AUTH_USER);
         const testUtils: SimpleComponentTestUtils<T> = new SimpleComponentTestUtils<T>();
         testUtils.prepareFixture(componentType);
@@ -317,7 +316,7 @@ export class ComponentTestUtils<T extends AbstractGameComponent, P extends Compa
     {
         const activatedRouteStub: ActivatedRouteStub = new ActivatedRouteStub(game, 'configRoomId');
         if (configureTestingModule) {
-            await TestUtils.configureTestingModuleForGame(activatedRouteStub);
+            await ConfigureTestingModuleUtils.configureTestingModuleForGame(activatedRouteStub);
         }
         const testUtils: ComponentTestUtils<T, P> = new ComponentTestUtils<T, P>();
         testUtils.prepareMessageDisplayerSpies();
@@ -543,22 +542,7 @@ export class ComponentTestUtils<T extends AbstractGameComponent, P extends Compa

 }

-export class TestUtils {
-
-    public static expectValidationSuccess(validation: MGPValidation, context?: string): void {
-        const reason: string = validation.getReason();
-        expect(validation.isSuccess()).withContext(context + ': ' + reason).toBeTrue();
-    }
-
-    public static expectToThrowAndLog(func: () => void, error: string): void {
-        if (jasmine.isSpy(ErrorLoggerService.logError) === false) {
-            spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
-        }
-        expect(func)
-            .withContext('Expected Assertion failure: ' + error)
-            .toThrowError('Assertion failure: ' + error);
-        expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', error);
-    }
+export class ConfigureTestingModuleUtils {

     public static async configureTestingModuleForGame(activatedRouteStub: ActivatedRouteStub): Promise<void> {
         await TestBed.configureTestingModule({
@@ -621,15 +605,19 @@ export class TestUtils {
 }

 export async function setupEmulators(): Promise<unknown> {
-    new AppModule(); // This will initialize firebase with the emulators
     await TestBed.configureTestingModule({
         imports: [
             HttpClientModule,
+            FirebaseProviders.app(),
+            FirebaseProviders.firestore(),
+            FirebaseProviders.auth(),
         ],
         providers: [
             ConnectedUserService,
         ],
     }).compileComponents();
+    TestBed.inject(Firestore.Firestore);
+    TestBed.inject(Auth.Auth);
     const http: HttpClient = TestBed.inject(HttpClient);
     // Clear the content of the firestore database in the emulator
     await http.delete('http://localhost:8080/emulator/v1/projects/my-project/databases/(default)/documents').toPromise();
@@ -648,7 +636,7 @@ function getComponentClassName(component: Type<any>): string {

 /**
  * Tests that the routes are used as expected. The router.navigate method should
- * be spied on. This function will match the route that is navigated to with
+ * be spyed on. This function will match the route that is navigated to with
  * the declared routes of the application, and ensure that the component that is
  * routed to matches `component`. In case multiple router.navigate calls happen,
  * set otherRoutes to true.
diff --git a/src/app/utils/tests/assert.spec.ts b/src/app/utils/tests/assert.spec.ts
deleted file mode 100644
index a744d76a7..000000000
--- a/src/app/utils/tests/assert.spec.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-/* eslint-disable max-lines-per-function */
-import { ErrorLoggerService } from 'src/app/services/ErrorLoggerService';
-import { ErrorLoggerServiceMock } from 'src/app/services/tests/ErrorLoggerServiceMock.spec';
-import { assert } from '../assert';
-
-describe('assert', () => {
-    it('should log error and throw when condition is false', () => {
-        // Given the assert function at any moment
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
-
-        // When calling it with a false and an error message
-        expect(() => assert(false, 'error')).toThrowError('Assertion failure: error');
-
-        // Then ErrorLoggerService.logError should have been called
-        expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'error');
-    });
-    it('should console.log the second parameter when provided', () => {
-        // Given the assert function at any moment
-        spyOn(ErrorLoggerService, 'logError').and.callFake(ErrorLoggerServiceMock.logError);
-        spyOn(console, 'log').and.returnValue();
-
-        // When calling it with a false and an error message and a second parameter of any type
-        expect(() => assert(false, 'error', ['1', '2'])).toThrowError('Assertion failure: error');
-
-        // Then ErrorLoggerService.logError should have been called as well as console.log
-        expect(ErrorLoggerService.logError).toHaveBeenCalledWith('Assertion failure', 'error');
-        expect(console.log).toHaveBeenCalledOnceWith(['1', '2']);
-    });
-});
diff --git a/src/karma.conf.js b/src/karma.conf.js
index cc08d6628..8c938edf4 100644
--- a/src/karma.conf.js
+++ b/src/karma.conf.js
@@ -9,7 +9,6 @@ module.exports = function(config) {
             require('karma-jasmine'),
             require('karma-chrome-launcher'),
             require('karma-jasmine-html-reporter'),
-            require('karma-time-stats-reporter'),
             require('karma-coverage'),
             require('@angular-devkit/build-angular/plugins/karma'),
         ],
@@ -34,14 +33,6 @@ module.exports = function(config) {
                 },
             },
         },
-        timeStatsReporter: {
-            reportTimeStats: true,
-            binSize: 100, // in ms
-            slowThreshold: 500,
-            reportSlowestTests: true,
-            longestTestsCount: Infinity,
-            reportOnlyBeyondThreshold: true,
-        },
         customLaunchers: {
             ChromeHeadlessCustom: {
                 base: 'ChromeHeadless',
@@ -51,8 +42,7 @@ module.exports = function(config) {
                 pingTimeout: 10000
             },
         },
-
-        reporters: ['progress', 'coverage', 'kjhtml', 'time-stats'],
+        reporters: ['progress', 'coverage', 'kjhtml'],
         port: 9876,
         colors: true,
         logLevel: config.LOG_INFO,
