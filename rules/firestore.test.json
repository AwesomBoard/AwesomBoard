rules_version = "2";
service cloud.firestore {
    match /databases/{database}/documents {
        // ----------------8<-------------[ cut from here ]------------------
        // The rules used for testing are the production rules, with the addition that we have a /foo/ collection to test our DAO mock.
        match /foo/{document=**} {
            // only used for testing purposes, do not push to production
            allow read, write: if true;
        }
        match /chats/{id} {
            // only used for testing purposes, do not push to production
            allow create: if userIsVerified();
        }
        // -----------[ cut until here ]--------------->8---------------------
        // From here, the rest of the file matches with firestore.rules
        function hasField(data, field) {
            return field in data && data[field] != null;
        }
        function preservesField(fieldName) {
            // A field is preserved if it is not part of the update
            // or if the same value is given in the update
            return !(fieldName in request.resource.data) || (fieldName in resource.data && request.resource.data[fieldName] == resource.data[fieldName]);
        }
        match /{document=**} {
            // by default, nothing can be read or written unless explicitly authorized
            allow read, write: if false;
        }
        match /errors/{errorId} {
            // Anybody can read, create and update errors
            allow create: if true;
            allow update: if true;
            allow read: if true;
        }
        match /chats/lobby {
            allow create: if userIsVerified();
            allow update, delete: if false;
            allow read: if false;
        }
        match /chats/{id} {
            // Chats can't be created by anyone except the backend
            allow read, write: if false;
        }
        match /chats/{chatId}/messages/{messageId} {
            allow create: if verifiedUserPostsValidMessage(request.resource.data);
            allow delete: if verifiedUserIsMessageAuthor(resource.data);
            allow update: if verifiedUserUpdatesMessage(resource.data, request.resource.data);
            allow read: if userIsVerified();
        }
        function verifiedUserPostsValidMessage(message) {
            return userIsVerified() && isValidMessage(message);
        }
        function isValidMessage(message) {
            return hasField(message, 'content') &&
                   hasField(message, 'sender') &&
                   isMessageAuthorWithCorrectUsername(message) &&
                   hasField(message, 'postedTime');
        }
        function isMessageAuthorWithCorrectUsername(message) {
            return isMessageAuthor(message) &&
                   usernameOf(message.sender.id) == message.sender.name;
        }
        function isMessageAuthor(message) {
            return request.auth.uid == message.sender.id
        }
        function verifiedUserIsMessageAuthor(message) {
            return userIsVerified() && isMessageAuthor(message)
        }
        function usernameOf(uid) {
            return get(/databases/$(database)/documents/users/$(uid)).data.username
        }
        function verifiedUserUpdatesMessage(message, update) {
            return userIsVerified() &&
                isMessageAuthor(message) &&
                preservesField('sender') &&
                isValidMessage(update);
        }
        match /users/{userId} {
            allow delete: if false;
            allow create: if authenticatedUserCreatesUnverifiedUser(userId, request.resource.data);
            allow update: if authenticatedUserUpdatesUser(userId, resource.data, request.resource.data);
            // Anybody can read the fields of a user.
            // This is because before user creation, we need to check if the username is free.
            allow read: if true;
        }
        match /users/{userId}/elos/{typeGame} {
            // Nobody can write elos (except the backend)
            allow write: if false;
            // Any verified user can read the user elo
            allow read: if userIsVerified();
        }
        function authenticatedUserCreatesUnverifiedUser(userId, update) {
            // Only an authenticated account can create its own user, and they cannot directly be verified
            return isAuthenticated() && request.auth.uid == userId && update.verified == false;
        }
        function isAuthenticated() {
            return request != null && request.auth != null;
        }
        function authenticatedUserUpdatesUser(userId, user, update) {
            // Only the user can change its fields
            // Moreover, the username cannot be changed once set
            // And the verified field can only be changed to true if the user has a username and has its email verified
            return isAuthenticated() &&
                request.auth.uid == userId &&
                doesNotModifyUsernameIfSet(user, update) &&
                onlyModifiesVerifiedFieldIfUserIsVerified(user, update);
        }
        function doesNotModifyUsernameIfSet(user, update) {
            let usernameWasAbsent = hasField(user, 'username') == false;
            let usernameIsAbsentFromRequest = hasField(update, 'username') == false;
            // It sometimes happens that firebase sends the username as part as updates,
            // even though it is not actually updated.
            // Hence, we accept usernames as part of updates, only if it doesn't change.
            let usernameIsNotChanged = preservesField('username');
            return usernameWasAbsent || usernameIsAbsentFromRequest || usernameIsNotChanged;
        }
        function onlyModifiesVerifiedFieldIfUserIsVerified(user, update) {
            let verifiedKeptSameValue = user.verified == update.verified;
            let verifiedSetToTrueAfterVerification = user.verified == false && userIsVerified() && user.username != null;
            return verifiedKeptSameValue || verifiedSetToTrueAfterVerification
        }
        match /parts/{id} {
            // Nobody can write on a game (only the backend can do so)
            allow write: if false;
            // All verified user can read games (needed for the lobby)
            allow read: if userIsVerified();
        }
        match /parts/{partId}/events/{eventId} {
            // Nobody can write on a game (only the backend can do so)
            allow write: if false;
            // All verified user can observe games
            allow read: if userIsVerified();
        }
        match /config-room/{partId} {
            // Nobody can write to the config room (except the backend)
            allow write: if false;
            // Any verified user can read a config room
            allow read: if userIsVerified();
        }
        match /config-room/{partId}/candidates/{userId} {
            // Nobody can write to candidates (except the backend)
            allow write: if false;
            // Any verified user can read the candidate list
            allow read: if userIsVerified();
        }
        function userIsVerified() {
            return request != null &&
                   request.auth != null &&
                   request.auth.uid != null &&
                   request.auth.token.email_verified == true;
        }
    }
}
