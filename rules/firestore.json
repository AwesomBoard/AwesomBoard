rules_version = "2";
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {
            // by default, nothing can be read or written unless explicitly authorized
            allow read, write: if false;
        }
        match /errors/{errorId} {
            // Anybody can read, create and update errors
            allow create: if true;
            allow update: if true;
            allow read: if true;
        }
        match /chats/lobby {
            allow create: if userVerified();
        }
        match /chats/{chatId} {
            allow create, delete: if userVerified() && partExistsAndOwnedByCurrentUser(chatId);
        }
        function partExistsAndOwnedByCurrentUser(partId) {
            let joiner = get(/databases/$(database)/documents/joiners/$(partId)).data;
            return joiner != null && joiner.creator.id == request.auth.uid;
        }
        match /chats/{chatId}/messages/{messageId} {
            allow create: if userVerified() && isValidMessage(request.resource.data);
            allow delete: if userVerified() && isMessageAuthor(resource.data);
            allow update: if userVerified() && isMessageAuthor(resource.data) && isValidMessage(request.resource.data);
            allow read: if userVerified();
        }
        function isValidMessage(message) {
            return hasField(message, 'content') &&
                   hasField(message, 'sender') &&
                   isMessageAuthor(message) &&
                   usernameOf(message.sender.id) == message.sender.name &&
                   hasField(message, 'postedTime');
        }
        function hasField(data, field) {
            return data[field] != null;
        }
        function isMessageAuthor(message) {
            return request.auth.uid == message.sender.id
        }
        function usernameOf(uid) {
            return get(/databases/$(database)/documents/joueurs/$(uid)).data.username
        }
        // joueurs will be renamed to users
        match /joueurs/{userId} {
            // Anybody can create a user
            allow create: if true;
            // Only a user can update its own fields
            allow update: if isOwner(userId);
            // Anybody can read the fields of a user
            allow read: if true;
        }
        match /users/{userId} {
            // Anybody can create a user
            allow create: if true;
            // Only a user can update its own fields
            allow update: if isOwner(userId);
            // Anybody can read the fields of a user
            allow read: if true;
        }
        match /parties/{id} {
            allow write, read: if userVerified();
        }
        match /joiners/{id} {
            allow write, read: if userVerified();
        }
        function userVerified() {
            return isAuthentified() &&
                   request.auth.uid != null &&
                   request.auth.token.email_verified == true;
        }
        function isAuthentified() {
            return request != null &&
                   request.auth != null;
        }
        function isOwner(userId) {
            return request != null &&
                request.auth != null &&
                request.auth.uid == userId;
        }
    }
}
