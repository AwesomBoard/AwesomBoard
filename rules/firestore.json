rules_version = "2";
service cloud.firestore {
    match /databases/{database}/documents {
        match /{document=**} {
            // by default, nothing can be read or written unless explicitly authorized
            allow read, write: if true; // TODO: should be if false
        }
        match /foo/{document=**} {
            // only used for testing purposes, do not push to production
            allow read, write: if true;
        }
        match /errors/{errorId} {
            // Anybody can read, create and update errors
            allow create: if true;
            allow update: if true;
            allow read: if true;
        }
        match /chats/{id} {
            allow create: if canCreateChat(id)
            allow read: if canReadChat(id)
        }
        function canCreateChat(id) {
            return userVerified() && id == 'lobby';
        }
        function canReadChat(id) {
            return false; // userVerified();
        }
        // joueurs will be renamed to users
        match /joueurs/{userId} {
            // Anybody can create a user
            allow create: if true;
            // Only a user can update its own fields
            allow update: if isOwner(userId);
            // Anybody can read the fields of a user
            allow read: if true;
        }
        match /users/{userId} {
            // Anybody can create a user
            allow create: if true;
            // Only a user can update its own fields
            allow update: if isOwner(userId);
            // Anybody can read the fields of a user
            allow read: if true;
        }
        function isAllowed() {
            return userVerified() ||
                   userIsGoogle();
        }
        function userVerified() {
            return isAuthentified() &&
                   request.auth.uid != null &&
                   request.auth.token.email_verified == true;
        }
        function userIsGoogle() {
            return request != null &&
                   request.auth != null &&
                   request.auth.token.email.matches('.*google[.]com$') == true;
        }
        function isAuthentified() {
            return request != null &&
                   request.auth != null;
        }
        function isOwner(userId) {
            return request != null &&
                request.auth != null &&
                request.auth.uid == userId;
        }
    }
}
