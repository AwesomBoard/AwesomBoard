{
    "compileOnSave": false,
    "angularCompilerOptions": {
        "enableI18nLegacyMessageIdFormat": false,
        "strictTemplates": true,
        "strictInjectionParameters": true,
        "strictInputAccessModifiers": true
    },
    "compilerOptions": {
        "baseUrl": "./",
        "outDir": "./dist/out-tsc",
        "sourceMap": true,
        "declaration": false,
        "alwaysStrict": true,
        "strictNullChecks": true,
        //"noImplicitOverride": true,
        "strict": true,
        "noImplicitThis": true,
        //"useUnknownInCatchVariables": true,
        "strictBindCallApply": true,
        // The following options still need to be set to true (they are false by default, but we list them explicitly)
        "strictFunctionTypes": false, // requires improving genericity (quite a lot)
        "strictPropertyInitialization": false, // would be nice to have, but requires solving the error for @Input parameters
        // The following may not be desired at all, as they will complexify the code quite a lot
        // "noUncheckedIndexedAccess": false, // Include 'undefined' in index signature results, e.g., a[0] could be undefined
        "noImplicitAny": false, // cannot be enabled if we want to access object fields with their name in a weakly-typed setting
        "module": "es2020",
        "moduleResolution": "node",
        "experimentalDecorators": true,
        "target": "es2022",
        "typeRoots": [
            "node_modules/@types"
        ],
        "lib": [
            "es2020",
            "dom"
        ],
        "paths": {
            "core-js/es7/reflect": [
                "node_modules/core-js/proposals/reflect-metadata"
            ],
            "core-js/es6/*": ["node_modules/core-js/es"]
        }
    }
}
