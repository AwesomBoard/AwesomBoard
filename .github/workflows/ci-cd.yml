name: CI/CD On Action

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Build
        run: npm run build

  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Run test suite
        run: npm run test:ci
      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: lxml pandas
      - name: Check coverage
        run: python ./scripts/coverage.py check

  linter:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Run linter with config
        run: npm run lint

  images:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Check the presence of all game images
        run: ./scripts/check-images.sh

  translations:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: lxml
      - name: Update translations
        run: ./scripts/update-translations.sh
      - name: Check completeness of translations
        run: ./scripts/check-translations.sh

  deployment:
    runs-on: ubuntu-latest
    needs: [ build, tests, linter, images, translations ]
    environment: netlify
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup Firebase secret)
        run: |
          echo "export const firebaseConfig = { apiKey: '${{ secrets.FIREBASE_API_KEY }}', authDomain: '${{ secrets.FIREBASE_AUTH_DOMAIN }}', databaseURL: '${{ secrets.FIREBASE_DATABASE_URL }}', projectId: '${{ secrets.FIREBASE_PROJECT_ID }}', storageBucket: '${{ secrets.FIREBASE_STORAGE_BUCKET }}', messagingSenderId: '${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}' };" > src/app/firebaseConfig.ts
      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: selenium lxml pandas
      - name: Check if push by an org member
        id: is_organization_member
        uses: jamessingleton/is-organization-member@1.0.1
        with:
          organization: EveryBoard
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy master on push if org member
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            npx ng deploy --base-href=/ --repo=https://github.com/EveryBoard/master --cname=everyboard.org --message="Deployment from action (commit $GITHUB_SHA)" --name acieroid --email 'everyboard@everyboard.org'
          fi
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_GH_TOKEN }}
      - name: Deploy develop on push if org member
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            npm install @angular-devkit/architect
            npx ng deploy --base-href=/ --repo=https://github.com/EveryBoard/develop --cname=dev.everyboard.org --message="Deployment from action (commit $GITHUB_SHA)" --name acieroid --email 'everyboard@everyboard.org'
          fi
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_GH_TOKEN }}
      - name: Deploy feature branch if org member
        if: ${{ github.ref != 'refs/heads/master'  && github.ref != 'refs/heads/develop' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            npm run build:netlify
            npm install netlify-cli
            netlify deploy --dir=dist/everyboard --alias="$GITHUB_HEAD_REF" --message="Deployment from github ($GITHUB_HEAD_REF, commit $GITHUB_SHA)"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
