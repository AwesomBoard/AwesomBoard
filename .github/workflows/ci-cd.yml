name: CI/CD On Action

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Build
        run: npm run build

  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Run test suite
        run: npm run test:ci
      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: lxml selenium pandas
      - name: Check coverage
        run: python ./scripts/coverage.py check

  linter:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Run linter with config
        run: npm run lint

  images:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Check the presence of all game images
        run: ./scripts/check-images.sh

  translations:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts

      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: lxml
      - name: Update translations
        run: ./scripts/update-translations.sh
      - name: Check completeness of translations
        run: ./scripts/check-translations.sh

  deployment:
    runs-on: ubuntu-latest
    needs: [ build, tests, linter, images, translations ]
    environment: netlify
# TODO:    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v1
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Setup dependencies (setup Firebase secret)
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$ENC_SECRET" --output src/app/firebaseConfig.ts .github/firebaseConfig.ts.gpg
        env:
          ENC_SECRET: ${{ secrets.ENC_SECRET }}
      - name: Build
        run: npm run build:netlify
      - name: Deploy develop on deployment (only temporary for testing)
        run: netlify deploy --dir=dist/pantheonsgame --branch=deployment
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
