name: CI/CD On Action

on:
  push:
    branches: [master, develop]
  pull_request:
    branches: [master, develop]

jobs:
  build-front:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
      - name: Build
        run: npm run build

  tests-front:
    runs-on: ubuntu-latest
    needs: build-front
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
      - name: Run test suites
        run: npm run libtest:ci && npm run test:ci
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install python dependencies
        run: pip install lxml pandas
      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage/
      - name: Check coverage
        run: python ./scripts/coverage.py check

  tests-back:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repository
      uses: actions/checkout@v4
    - name: Install OS dependencies
      run: sudo apt-get install -y libev-dev
    - name: Setup OCaml
      uses: ocaml/setup-ocaml@v2
      with:
        ocaml-compiler: 5.1
    - name: Install OCaml dependencies
      run: cd backend && opam install . --deps-only --with-test
    - name: Build
      run: cd backend && make
    - name: Test
      run: cd backend && make test
    - name: Archive code coverage results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: backend-code-coverage-report
        path: backend/_coverage/
    - name: Check coverage
      run: cd backend && make check-coverage

  e2e:
    runs-on: ubuntu-latest
    needs: [ build-front, tests-front, tests-back ]
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Install python dependencies
        run: pip install --upgrade selenium requests killport
      - name: Run e2e tests
        run: npm run e2e

  linter:
    runs-on: ubuntu-latest
    needs: build-front
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
      - name: Run linter with config
        run: npm run lint

  images:
    runs-on: ubuntu-latest
    needs: build-front
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Check the presence of all game images
        run: ./scripts/check-images.sh

  translations:
    runs-on: ubuntu-latest
    needs: build-front
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup dummy Firebase secret)
        run: cp ./src/app/firebaseConfig.ts.dummy ./src/app/firebaseConfig.ts
      - name: Install python dependencies
        uses: BSFishy/pip-action@v1
        with:
          packages: lxml
      - name: Update translations
        run: ./scripts/update-translations.sh
      - name: Check completeness of translations
        run: ./scripts/check-translations.sh

  deployment:
    runs-on: ubuntu-latest
    needs: [ build-front, tests-front, tests-back, linter, images, translations ]
    environment: netlify
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install JS dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup Firebase secret, master)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          echo "${{ secrets.FIREBASE_CONFIG_MASTER }}" > src/app/firebaseConfig.ts
      - name: Setup dependencies (setup Firebase secret, dev)
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
        run: |
          echo "${{ secrets.FIREBASE_CONFIG_DEV }}" > src/app/firebaseConfig.ts
      - name: Install OS dependencies
        run: sudo apt-get install -y libev-dev
      - name: Setup dependencies (install OCaml)
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: 5.1
      - name: Setup dependencies (install OCaml dependencies)
        run: cd backend && opam install . --deps-only --with-test
      - name: Build backend
        run: cd backend && make
      - name: Check if push by an org member
        id: is_organization_member
        uses: jamessingleton/is-organization-member@1.0.1
        with:
          organization: EveryBoard
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy master on push if org member
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            # deploy frontend
            npm install @angular-devkit/architect
            npx ng deploy --base-href=/ --repo=https://github.com/EveryBoard/master --cname=everyboard.org --message="Deployment from action (commit $GITHUB_SHA)" --name acieroid --email 'everyboard@everyboard.org'
            # deploy backend
            mkdir -p ~/.ssh/
            cat > ~/.ssh/known_hosts <<< "$SSH_KNOWN_HOSTS"
            cat > ~/.ssh/id_rsa <<< "$SSH_KEY"
            chmod u+rw,go-rw,a-x ~/.ssh/id_rsa
            cat > backend/service-account.json <<< "$SERVICE_ACCOUNT"
            cd backend && make deploy target=master user=$SSH_USER server=$SSH_SERVER port=$SSH_PORT listen-port=8003 args="-no-emulator -project everyboard -origin 'https://everyboard.org' -endpoint 'https://firestore.googleapis.com'"
          fi
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_GH_TOKEN }}
          SSH_KEY: ${{ secrets.EVERYBOARD_DEPLOY_SSH_KEY }}
          SSH_USER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_USER }}
          SSH_SERVER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_SERVER }}
          SSH_PORT: ${{ secrets.EVERYBOARD_DEPLOY_SSH_PORT }}
          SSH_KNOWN_HOSTS: ${{ secrets.EVERYBOARD_DEPLOY_KNOWN_HOST }}
          SERVICE_ACCOUNT: ${{ secrets.EVERYBOARD_DEPLOY_SERVICE_ACCOUNT_MASTER }}
      - name: Deploy develop on push if org member
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/develop' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            # deploy frontend
            npm install @angular-devkit/architect
            npx ng deploy --base-href=/ --repo=https://github.com/EveryBoard/develop --cname=dev.everyboard.org --message="Deployment from action (commit $GITHUB_SHA)" --name acieroid --email 'everyboard@everyboard.org'
            # deploy backend
            mkdir -p ~/.ssh/
            cat > ~/.ssh/known_hosts <<< "$SSH_KNOWN_HOSTS"
            cat > ~/.ssh/id_rsa <<< "$SSH_KEY"
            chmod u+rw,go-rw,a-x ~/.ssh/id_rsa
            cat > backend/service-account.json <<< "$SERVICE_ACCOUNT"
            cd backend && make deploy target=dev user=$SSH_USER server=$SSH_SERVER port=$SSH_PORT listen-port=8002 args="-no-emulator -project everyboard-dev -origin 'https://dev.everyboard.org' -endpoint 'https://firestore.googleapis.com'"
          fi
        env:
          GH_TOKEN: ${{ secrets.DEPLOY_GH_TOKEN }}
          SSH_KEY: ${{ secrets.EVERYBOARD_DEPLOY_SSH_KEY }}
          SSH_USER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_USER }}
          SSH_SERVER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_SERVER }}
          SSH_PORT: ${{ secrets.EVERYBOARD_DEPLOY_SSH_PORT }}
          SSH_KNOWN_HOSTS: ${{ secrets.EVERYBOARD_DEPLOY_KNOWN_HOST }}
          SERVICE_ACCOUNT: ${{ secrets.EVERYBOARD_DEPLOY_SERVICE_ACCOUNT_DEV }}

  deployment-netlify:
    runs-on: ubuntu-latest
    needs: [ build-front ]
    environment: netlify
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v4
      - name: Setup dependencies (cache node modules)
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Setup dependencies (setup node)
        uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: Setup dependencies (install dependencies)
        run: npm ci
      - name: Build lib
        run: rm -rf node_modules/@types/glob && cd lib && npm run build
      - name: Setup dependencies (setup Firebase secret, others)
        if: ${{ github.ref != 'refs/heads/master'  && github.ref != 'refs/heads/develop' }}
        run: |
          echo "${{ secrets.FIREBASE_CONFIG_TEST }}" > src/app/firebaseConfig.ts
      - name: Install OS dependencies
        run: sudo apt-get install -y libev-dev
      - name: Setup dependencies (install OCaml)
        uses: ocaml/setup-ocaml@v2
        with:
          ocaml-compiler: 5.1
      - name: Setup dependencies (install OCaml dependencies)
        run: cd backend && opam install . --deps-only --with-test
      - name: Check if push by an org member
        id: is_organization_member
        uses: jamessingleton/is-organization-member@1.0.1
        with:
          organization: EveryBoard
          username: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy feature branch if org member
        if: ${{ github.ref != 'refs/heads/master'  && github.ref != 'refs/heads/develop' }}
        run: |
          result=${{ steps.is_organization_member.outputs.result }}
          if [ $result == true ]; then
            npm run build:netlify
            npm install netlify-cli
            netlify deploy --dir=dist/everyboard --alias="$GITHUB_HEAD_REF" --message="Deployment from github ($GITHUB_HEAD_REF, commit $GITHUB_SHA)"
            mkdir -p ~/.ssh/
            cat > ~/.ssh/known_hosts <<< "$SSH_KNOWN_HOSTS"
            cat > ~/.ssh/id_rsa <<< "$SSH_KEY"
            chmod u+rw,go-rw,a-x ~/.ssh/id_rsa
            cat > backend/service-account.json <<< "$SERVICE_ACCOUNT"
            cd backend && make deploy target=test user=$SSH_USER server=$SSH_SERVER port=$SSH_PORT listen-port=8001 args="-no-emulator -project everyboard-test -origin '*' -endpoint 'https://firestore.googleapis.com' -show-errors"
          fi
        env:
          NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
          SSH_KEY: ${{ secrets.EVERYBOARD_DEPLOY_SSH_KEY }}
          SSH_USER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_USER }}
          SSH_SERVER: ${{ secrets.EVERYBOARD_DEPLOY_SSH_SERVER }}
          SSH_PORT: ${{ secrets.EVERYBOARD_DEPLOY_SSH_PORT }}
          SSH_KNOWN_HOSTS: ${{ secrets.EVERYBOARD_DEPLOY_KNOWN_HOST }}
          SERVICE_ACCOUNT: ${{ secrets.EVERYBOARD_DEPLOY_SERVICE_ACCOUNT_TEST }}
